// DateUtil

// 比较年月日时分秒，大于返回1,等于返回0,小于返回-1
window.Date.prototype.compareDateTime = function (date) {
  var date1 = new Date(this)
  var date2 = new Date(date)
  date1.setSeconds(0, 0)
  date2.setSeconds(0, 0)
  var t1 = date1.getTime()
  var t2 = date2.getTime()

  if (t1 === t2) return 0
  return t1 > t2 === true ? 1 : -1
}
// 比较年月日,大于返回1,等于返回0,小于返回-1
window.Date.prototype.compareDate = function (date) {
  var date1 = new Date(this)
  var date2 = new Date(date)
  date1.setHours(0, 0, 0, 0)
  date2.setHours(0, 0, 0, 0)
  var t1 = date1.getTime()
  var t2 = date2.getTime()

  if (t1 === t2) return 0
  return t1 > t2 === true ? 1 : -1
}
// 比较时分,大于返回1,等于返回0,小于返回-1
window.Date.prototype.compareTime = function (date) {
  var date1 = new Date(this)
  var date2 = new Date(date)
  date1.setYear(0)
  date1.setMonth(0, 0)
  date2.setYear(0)
  date2.setMonth(0, 0)

  var t1 = date1.getTime()
  var t2 = date2.getTime()

  if (t1 === t2) return 0
  return t1 > t2 === true ? 1 : -1
}
// 年
window.Date.prototype.year = function () {
  return this.getFullYear()
}
// 月
window.Date.prototype.month = function () {
  var monthNum = this.getMonth() + 1
  if (monthNum < 10) {
    monthNum = '0' + monthNum
  }
  return monthNum
}
// 日
window.Date.prototype.date = function () {
  var dayNum = this.getDate()
  if (dayNum < 10) {
    dayNum = '0' + dayNum
  }
  return dayNum
}
// 返回当月共多少天
window.Date.prototype.days = function (year, month) {
  if (month && year) {
    return new Date(year, month, 0).getDate()
  }
  return new Date(this.year(), this.month(), 0).getDate()
}
// 时
window.Date.prototype.hour = function () {
  var hourNum = this.getHours()
  if (hourNum < 10) {
    hourNum = '0' + hourNum
  }
  return hourNum
}
// 分
window.Date.prototype.minute = function () {
  var minuteNum = this.getMinutes()
  if (minuteNum < 10) {
    minuteNum = '0' + minuteNum
  }
  return minuteNum
}
// 周,参数:zh_cn
window.Date.prototype.week = function (language) {
  var chinaWeek = { 1: '一', 2: '二', 3: '三', 4: '四', 5: '五', 6: '六', 0: '日' }
  if (language === 'zh_cn') {
    return chinaWeek[this.getDay()]
  }
  return this.getDay()
}
// 季
window.Date.prototype.quarter = function () {
  return Math.floor((this.getMonth() + 3) / 3)
}
// 获得当前日期的周数
window.Date.prototype.getWeeksCount = function () {
  var dayMilliSecond = 24 * 60 * 60 * 1000

  var startDate = new Date(this.getFullYear(), 0, 1)
  var startDay = startDate.getDay()
  if (startDay === 0) startDay = 7

  this.setHours(0, 0, 0, 0)
  var currentDay = this.getDay()
  if (currentDay === 0) currentDay = 7

  var dateNum = Math.round((this.getTime() - startDate.getTime() + (startDay - currentDay) * dayMilliSecond) / dayMilliSecond)
  return Math.ceil(dateNum / 7) + 1
}

// Date对象,返回相差天数等
window.Date.prototype.diff = function (date) {
  var dateStart = this // 开始时间
  var dateEnd = date // 结束时间

  var secondMilli = 1000 // 一分钟的毫秒数
  var minuteMilli = 60 * secondMilli // 一分钟的毫秒数
  var hourMilli = 60 * minuteMilli // 一小时的毫秒数
  var dayMilli = 24 * hourMilli // 一天的毫秒数

  var timeDiff = dateEnd.getTime() - dateStart.getTime() // 毫秒差

  // 计算出相差天数
  var daysDiff = Math.floor(timeDiff / dayMilli)
  // 计算出剩余小时数
  var dayMilliRemainder = timeDiff % dayMilli
  var hoursDiff = Math.floor(dayMilliRemainder / hourMilli)
  // 计算剩余分钟数
  var minuteMilliRemainder = dayMilliRemainder % hourMilli
  var minutesDiff = Math.floor(minuteMilliRemainder / minuteMilli)
  // 计算剩余秒数
  var secondMilliRemainder = minuteMilliRemainder % minuteMilli
  var secondsDiff = Math.round(secondMilliRemainder / secondMilli)

  // 计算相差小时数
  var hoursAllDiff = Math.floor(timeDiff / hourMilli)
  // 计算相差分钟数
  var minutesAllDiff = Math.floor(timeDiff / minuteMilli)
  // 计算相差秒数
  var secondsAllDiff = Math.floor(timeDiff / secondMilli)

  return {
    days: daysDiff,
    hours: hoursDiff,
    minutes: minutesDiff,
    seconds: secondsDiff,
    hoursAll: hoursAllDiff,
    minutesAll: minutesAllDiff,
    secondsAll: secondsAllDiff
  }
}
// 减天数
window.Date.prototype.minusDate = function (num) {
  var numMilli = num * 1000 * 60 * 60 * 24
  this.setTime(this.getTime() - numMilli)
  return this
}
// 加天数
window.Date.prototype.plusDate = function (num) {
  var numMilli = num * 1000 * 60 * 60 * 24
  this.setTime(this.getTime() + numMilli)
  return this
}
// 减分钟
window.Date.prototype.minusMinute = function (num) {
  var numMilli = num * 1000 * 60
  this.setTime(this.getTime() - numMilli)
  return this
}
// 加分钟
window.Date.prototype.plusMinute = function (num) {
  var numMilli = num * 1000 * 60
  this.setTime(this.getTime() + numMilli)
  return this
}
// 整数时间，返回日期的档位时间
window.Date.prototype.setMinuteCeil = function (space) {
  /* eslint-disable */
  var space = space ? space : 5 // 间隔
  /* eslint-enable */
  var minute = this.getMinutes() // 分钟
  var hasRemainder = minute % space === 0 // 是否有余数

  var percentNum = Math.ceil(minute / space) // 档位
  percentNum = hasRemainder ? parseInt(percentNum, 10) + 1 : percentNum

  var result = percentNum * space // 根据档位计算结果
  this.setMinutes(result)
  return this
}
// 整数时间，返回日期的档位时间
window.Date.prototype.setMinuteFloor = function (space) {
  /* eslint-disable */
  var space = space ? space : 5 // 间隔
  /* eslint-enable */
  var minute = this.getMinutes() // 分钟
  var hasRemainder = minute % space === 0 // 是否有余数

  var percentNum = Math.floor(minute / space) // 档位
  percentNum = hasRemainder ? parseInt(percentNum) - 1 : percentNum

  var result = percentNum * space // 根据档位计算结果
  this.setMinutes(result)
  return this
}
// 时效性比较,以当前时间为基准,支持比较'日期对象' / '小时数' / 'today'
window.Date.prototype.expires = function (expiresTime) {
  if (!expiresTime) return
  var endTime = new Date(this)
  // 如果参数是日期
  if (expiresTime instanceof Date === true) {
    if (endTime.compareDateTime(expiresTime) === -1) {
      return expiresTime
    } else {
      endTime.setHours(0, 0, 0, 0)
      return endTime.plusDay(1)
    }
  }

  // 如果参数是小时
  if (!isNaN(expiresTime)) {
    var numMilli = expiresTime * 1000 * 60 * 60
    endTime = new Date(endTime.getTime() + numMilli)
    return endTime
  }

  // 如果参数是今天
  if (expiresTime === 'today') {
    endTime.setHours(0, 0, 0, 0)
    return endTime.plusDay(1)
  }
}
// 格式化日期,参数:yyyy-MM-dd hh:mm:ss WW EE
window.Date.prototype.format = function (fmtModel) {
  var fmt = typeof fmtModel === 'string' ? fmtModel : 'yyyy-MM-dd hh:mm:ss'
  var year = this.getFullYear()
  var month = this.getMonth() + 1
  var date = this.getDate()
  var hour = this.getHours()
  var minute = this.getMinutes()
  var second = this.getSeconds()
  var weeksCount = this.getWeeksCount()
  var week = this.week('zh_cn')

  var dateJson = {
    'M+': month,
    'd+': date,
    'h+': hour,
    'm+': minute,
    's+': second,
    'W+': weeksCount,
    'E+': week
  }
  if (/(y+)/.test(fmt)) { // 匹配年
    fmt = fmt.replace(RegExp.$1, (year + '').substr(4 - RegExp.$1.length))
  }
  for (var k in dateJson) { // 逐个匹配
    // '('+ k +')'=(M+)、(d+)、(h+)...
    if (new RegExp('(' + k + ')').test(fmt)) {
      fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (dateJson[k]) : (('00' + dateJson[k]).substr(('' + dateJson[k]).length)))
    }
  }
  return fmt
}
// 获取月头和月尾
window.Date.prototype.monthStartEnd = function () {
  var year = this.year()
  var month = this.month()
  var firstDay = '01'
  var lastDay = this.days()
  if (lastDay < 10) lastDay = '0' + lastDay
  return {
    start: year + '-' + month + '-' + firstDay,
    end: year + '-' + month + '-' + lastDay
  }
}

// DB 本地数据库
var DB = (function () {
  function checkManifest () {
    window.addEventListener('updateready', function (e) {
      console.log('离线缓存状态：' + window.applicationCache.status)
      if (window.applicationCache.status === window.applicationCache.UPDATEREADY) {
        window.applicationCache.swapCache()
        if (confirm('发现此manifest文件有更新，是否更新？')) {
          window.location.reload()
        }
      } else {
        console.log('manifest文件没有变化')
      }
    }, false)
  }

  function setCookie (key, value, days) {
    var expiresDay = days
    var cookieStr = key + '=' + escape(value)
    if (expiresDay) {
      var exp = new Date()
      exp.setTime(exp.getTime() + Number(expiresDay) * 24 * 60 * 60 * 1000)
      cookieStr += ';expires=' + exp.toGMTString()
    }
    document.cookie = cookieStr
  }
  function getCookie (key) {
    var valExpr = new RegExp('(^| )' + key + '=([^]*)(|$)')
    var match = valExpr.exec(document.cookie)
    if (match && match[2]) {
      return unescape(match[2])
    }
    return null
  }
  function delCookie (key) {
    var exp = new Date()
    exp.setTime(exp.getTime() - 1)
    var val = getCookie(key)
    if (val != null) {
      document.cookie = key + '=' + val + 'expires=' + exp.toGMTString()
    }
  }
  function clearCookie () {
    alert('抱歉，cookie不可以全部清空!')
  }

  var store = window.localStorage
  var session = window.sessionStorage
  return {
    // application cache
    checkManifest: checkManifest,

    setStore: function (key, val) {
      store.setItem(key, val)
    },
    getStore: function (key) {
      return store.getItem(key)
    },
    delStore: function (key) {
      store.removeItem(key)
    },
    clearStore: function () {
      return store.clear()
    },

    setSession: function (key, value) {
      session.setItem(key, value)
    },
    getSession: function (key) {
      if (typeof key === 'number') {
        return session.key(key)
      }
      return session.getItem(key)
    },
    delSession: function (key) {
      session.removeItem(key)
    },
    clearSession: function () {
      session.clear()
    },

    setCookie: setCookie, // key,value
    getCookie: getCookie, // key
    delCookie: delCookie, // key
    clearCookie: clearCookie
  }
})();

//export default DB


/* -------------------
解决加减乘除精度
------------------- */
Math.Calc = (function () {
  // 判断obj是否为一个整数
  function isInteger (obj) {
    return Math.floor(obj) === obj
  }

  /* -----------------------------------------------------
  将一个浮点数转成整数，返回整数和倍数。如 3.14 >> 314，倍数是 100
  @param floatNum {number} 小数
  @return ret {times:100, num: 314}
  ----------------------------------------------------- */
  function toInteger (floatNum) {
    var ret = { times: 1, num: 0 }
    var isNegative = floatNum < 0
    if (isInteger(floatNum)) {
      ret.num = floatNum
      return ret
    }
    var strfi = floatNum + ''
    var dotPos = strfi.indexOf('.')
    var len = strfi.substr(dotPos + 1).length
    var times = Math.pow(10, len)
    var intNum = parseInt(Math.abs(floatNum) * times + 0.5, 10)
    ret.times = times
    if (isNegative) {
      intNum = -intNum
    }
    ret.num = intNum
    return ret
  }

  /* -----------------------------------------------------
  核心方法，实现加减乘除运算，确保不丢失精度
  思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）

  @param a {number} 运算数1
  @param b {number} 运算数2
  @param digits {number} 精度，保留的小数点数，比如 2, 即保留为两位小数
  @param op {string} 运算类型，有加减乘除（add/subtract/multiply/divide）
  ----------------------------------------------------- */
  function operation (a, b, digits, op) {
    var o1 = toInteger(a)
    var o2 = toInteger(b)
    var n1 = o1.num
    var n2 = o2.num
    var t1 = o1.times
    var t2 = o2.times
    var max = t1 > t2 ? t1 : t2
    var result = null
    switch (op) {
      case 'add':
        if (t1 === t2) { // 两个小数位数相同
          result = n1 + n2
        } else if (t1 > t2) { // o1 小数位 大于 o2
          result = n1 + n2 * (t1 / t2)
        } else { // o1 小数位 小于 o2
          result = n1 * (t2 / t1) + n2
        }
        result = result / max
        break
      case 'subtract':
        if (t1 === t2) {
          result = n1 - n2
        } else if (t1 > t2) {
          result = n1 - n2 * (t1 / t2)
        } else {
          result = n1 * (t2 / t1) - n2
        }
        result = result / max
        break
      case 'multiply':
        result = (n1 * n2) / (t1 * t2)
        break
      case 'divide':
        result = (n1 / n2) * (t2 / t1)
        break
      default:
        result = 0
    }
    if (digits && !isNaN(digits)) {
      // 精度设置
      return toDigits(result, digits)
    }
    return result
  }

  // 加减乘除的四个接口
  function add (a, b, digits) {
    return operation(a, b, digits, 'add')
  }
  function subtract (a, b, digits) {
    return operation(a, b, digits, 'subtract')
  }
  function multiply (a, b, digits) {
    return operation(a, b, digits, 'multiply')
  }
  function divide (a, b, digits) {
    return operation(a, b, digits, 'divide')
  }
  // toFixed 修复两位小数不会四舍五入的问题
  function toFixed (num, digits) {
    var times = Math.pow(10, digits)
    var result = num * times + 0.5
    result = parseInt(result, 10) / times
    return result
  }
  // toDigits 精度
  function toDigits (num, digits) {
    var digitsMatch = new RegExp('[0-9]+(\\.[0-9]{1,' + digits + '})?')
    num = ('' + num).match(digitsMatch)
    if (num && num[0]) return Number(num[0])
    return null
  }
  // 转换为千分位字符
  function toThousandth (num) {
    var sExpr = /^(\d+)((\.\d+)?)$/
    var n1 = num.toString().replace(sExpr, function (s, s1, s2) {
      var reExpr = /\d{1,3}(?=(\d{3})+$)/g
      return s1.replace(reExpr, '$&,') + s2
    })
    return n1
  }
  // exports
  return {
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide,
    toFixed: toFixed,
    toDigits: toDigits,
    toThousandth: toThousandth
  }
})();


var Request = {
  getParameter: function (argName) {
    var href = decodeURI(window.location.href)
    var param = href.match(new RegExp('[\\?\\&]' + argName + '=([^\\&]*)(\\&?)', 'i'))
    return param ? decodeURI(param[1]) : param
  }
}

;//export default Request


/* -------------------
判断是否是空对象
------------------- */
Object.isEmptyObject = function (obj) {
  var name
  for (name in obj) {
    return false
  }
  return true
}
/* -------------------
判断是否是纯对象
------------------- */
Object.isPlainObject = function (obj) {
  var proto
  var Ctor
  if (!obj || toString.call(obj) !== '[object Object]') {
    return false
  }

  proto = Object.getPrototypeOf(obj)

  // 没有原型的对象（例如`Object.create（null）`），则直接返回true
  if (!proto) {
    return true
  }

  // 如果原型的对象是由全局Object函数构造的，则它们是纯对象
  Ctor = {}.hasOwnProperty.call(proto, 'constructor') && proto.constructor
  return typeof Ctor === 'function' && {}.hasOwnProperty.toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)
}

/* -------------------
  克隆对象字面量、Array
  ------------------- */
Object.clone = function (obj) {
  var copy
  if (typeof obj === 'object') {
    if (obj === null) {
      copy = null
    } else {
      if (obj instanceof Array) {
        copy = []
        for (var i = 0; i < obj.length; i++) {
          copy.push(this.clone(obj[i]))
        }
      } else {
        copy = {}
        for (var j in obj) {
          copy[j] = this.clone(obj[j])
        }
      }
    }
  } else {
    copy = obj
  }
  return copy
}

/* -------------------
  将Json转为params字符串，支持嵌套Json
  ------------------- */
/* Object.params = function (obj, isNotEnCode) {
  var result = ''
  var item
  for (item in obj) {
    if (isNotEnCode) result += '&' + item + '=' + obj[item]
    else result += '&' + item + '=' + encodeURIComponent(obj[item])
  }
  if (result) {
    result = result.slice(1)
  }
  return result
} */
Object.params = function (obj, isNotEnCode) {
  if (!Object.isPlainObject(obj)) return obj
  var result = ''
  function buildParams (obj, prevKey) {
    for (var key in obj) {
      if (obj[key] instanceof Object) {
        var prefix = prevKey ? prevKey + '.' + key : key
        buildParams(obj[key], prefix)
      } else {
        if (prevKey) {
          // result += '&' + prevKey + '.' + key + '=' + obj[key]
          result += '&' + prevKey + '.' + key + '=' + (isNotEnCode ? obj[key] : encodeURIComponent(obj[key]))
        } else {
          // result += '&' + key + '=' + obj[key]
          result += '&' + key + '=' + (isNotEnCode ? obj[key] : encodeURIComponent(obj[key]))
        }
      }
    }
    return result
  }
  buildParams(obj)
  if (result) {
    result = result.slice(1)
  }
  return result
}

/* -------------------
  获得类型
  ------------------- */
Object.type = function (obj) {
  if (obj == null) {
    return obj + ''
  }

  // Support: Android <=2.3 only (functionish RegExp)
  return typeof obj === 'object' || typeof obj === 'function' ? {}[toString.call(obj)] || 'object' : typeof obj
}

/* -------------------
  query条件判断
  ------------------- */
Object.isQueryId = function (id) {
  var idExpr = /^#([\w-]*)$/
  var match = idExpr.exec(id)
  if (match && match.length > 0) {
    return match[1]
  }
  return false
}
Object.isQueryClass = function (classname) {
  var classExpr = /^\.([\w-]*)$/
  var match = classExpr.exec(classname)
  if (match && match.length > 0) {
    return match[1]
  }
  return false
}
Object.isTag = function (str) {
  var tagExpr = /^<(\w+)\s*.*\/\w*>$/im
  var match = tagExpr.exec(str)
  if (match && match.length > 0) {
    return true
  }
  return false
}

/* -------------------
  字符类型
  ------------------- */
Object.charType = function (char) {
  if (char >= 48 && char <= 57) return 'number' // 数字
  if (char >= 65 && char <= 90) return 'capitalize' // 大写
  if (char >= 97 && char <= 122) return 'lowercase' // 小写
  else return 'other'
}
Object.passwordLvl = function (value) {
  var mode = {}
  for (var i = 0; i < value.length; i++) {
    mode[Object.charType(value.charCodeAt(i))] = ''
  }
  var lvl = 0
  /* eslint-disable */
  for (m in mode) {
    lvl++
  }
  /* eslint-enable */
  if (value.length > 0 && value.length < 6) return 1
  return lvl
}

/* -------------------
  是否是方法
  ------------------- */
Object.isFunction = function (obj) {
  return Object.type(obj) === 'function'
}

/* -------------------
  是否是窗口
  ------------------- */
Object.isWindow = function (obj) {
  return obj != null && obj === obj.window
}

/* -------------------
  继承合并
  ------------------- */
Object.extend = function () {
  var options
  var name
  var src
  var copy
  var copyIsArray
  var clone
  var target = arguments[0] || {}
  var i = 1
  var length = arguments.length
  var deep = false

  // Handle a deep copy situation
  if (typeof target === 'boolean') {
    deep = target

    // Skip the boolean and the target
    target = arguments[i] || {}
    i++
  }

  // Handle case when target is a string or something (possible in deep copy)
  if (typeof target !== 'object' && !Object.isFunction(target)) {
    target = {}
  }

  // Extend jQuery itself if only one argument is passed
  if (i === length) {
    target = this
    i--
  }

  for (; i < length; i++) {
    // 只处理非空/未定义的值
    options = arguments[i]
    if (options != null) {
      // 扩展基础对象
      for (name in options) {
        src = target[name]
        copy = options[name]

        // 防止永无止境的循环
        if (target === copy) {
          continue
        }

        // 如果我们合并了普通的对象或数组，就会重新出现
        if (deep && copy && (Object.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) { // eslint-disable-line
          if (copyIsArray) {
            copyIsArray = false
            clone = src && Array.isArray(src) ? src : []
          } else {
            clone = src && Object.isPlainObject(src) ? src : {}
          }

          // 永远不要修改原始对象，而是克隆它们
          target[name] = Object.extend(deep, clone, copy)

          // 不要带入未定义的值
        } else if (copy !== undefined) {
          target[name] = copy
        }
      }
    }
  }

  // 返回修改后的对象
  return target
}


// 转为json，目的是字符串去重
window.String.prototype.toJson = function (split) {
  var array = this.split(split)
  var json = {}
  for (var i in array) {
    var ary = array[i]
    json[ary] ? (json[ary]++) : (json[ary] = 1)
  }
  return json
}

// 去除字符串左右两端的空格
window.String.prototype.trim = function (trimPos) {
  if (trimPos === 'left') {
    return this.replace(/(^\s*)/g, '')
  } else if (trimPos === 'right') {
    return this.replace(/(\s*$)/g, '')
  }
  return this.replace(/(^\s*)|(\s*$)/g, '')
}

// 判断是否是#的形式
window.String.prototype.isQueryId = function () {
  var idExpr = /^#([\w-]*)$/ // 匹配id(#id)
  var match = idExpr.exec(this)
  if(!match || !match[1]){
    return false
  }
  return true
}

// 判断是否包含class名称
window.String.prototype.hasClass = function (name) {
  var names = this.split(' ')
  for (var i = 0; i < names.length; i++) {
    if (names[i] === name) return true
  }
  return false
}

// 生成唯一标识符
window.String.GUID = function () {
  var d = new Date().getTime()
  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = (d + Math.random() * 16) % 16 | 0
    d = Math.floor(d / 16)
    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16) // eslint-disable-line
  })
  return uuid
}


// Ajax
var Ajax = {
  xhr: function (config) {
    var xhr = new window.XMLHttpRequest()
    var url = config.url
    var data = config.data || {}
    var success = config.success
    var error = config.error
    var params = Object.params(data)
    var type = config.type || 'GET'
    var contentType = config.contentType
    var token = config.token
    var extra = config.extra

    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          var res = JSON.parse(xhr.responseText)
          success(res, extra)
        } else {
          error && error()
        }
      }
    }
    // 鉴权
    if (token) xhr.setRequestHeader('Authorization', token)
    // post | get
    if (type === 'POST') {
      xhr.open(type, url, true)
      xhr.setRequestHeader('Content-type', contentType || 'application/json')
      if (contentType === 'application/x-www-form-urlencoded; charset=UTF-8') {
        xhr.send(params)
      } else {
        xhr.send(JSON.stringify(data))
      }
    } else {
      if (url.indexOf('?') === -1) {
        url += '?' + params
      } else {
        url += '&' + params
      }
      xhr.open(type, url, true)
      xhr.send(null)
    }
  },
  fetchData: function (url, config) {
    // config = req, type, contentType, token
    // 显示loading
    // ob.$emit('ajaxLoading', true)
    return new Promise(function (resolve, reject) {
      Ajax.xhr({
        url: url,
        data: config.req || {},
        type: config.type || null,
        contentType: config.contentType || null,
        token: config.token || null,
        success: function (data) {
          if (data.code === '1') {
            resolve(data)
          } else {
            reject(data)
          }
          // 关闭loading
          // ob.$emit('ajaxLoading', false)
        },
        error: function (err) {
          reject(err)
          // 关闭loading
          // ob.$emit('ajaxLoading', false)
        }
      })
    })
  }
}

//export default Ajax


// Edit 富文本编辑框
var Edit = {
  // 获取选区
  selection: function () {
    return document.getSelection()
  },
  // 获取文本框光标位置
  getTxtCusorPos: function (txt) {
    var cusorPos = -1
    // 非ie
    if (txt.selectionStart) {// 非IE浏览器
      cusorPos = txt.selectionStart
      return cusorPos
    }
    // 讨厌的ie
    if (document.selection && document.selection.createRange) {
      var range = document.selection.createRange()
      range.moveStart('character', -txt.value.length)
      cusorPos = range.text.length
      return cusorPos
    }
  },
  // 获取光标位置
  getDivCusorPos: function () {
    var cusorPos = 0//  光标位置
    // 非ie
    if (window.getSelection) {
      var selection = window.getSelection()
      // console.log(selection.anchorNode) // 选中区域的“起点”
      // console.log(selection.focusNode) // 选中区域的“结束点”
      // console.log(selection.focusOffset) // “结束点”的偏移量
      // console.log(selection.isCollapsed) // 判断是否有选中区域
      // console.log(selection.rangeCount) // 一般一个页面只有一个range，也有可能是多个range(使用Ctrl健进行多选)

      // “起点”的偏移量
      cusorPos = selection.anchorOffset
      return cusorPos
    }
    // 讨厌的ie
    if (document.selection && document.selection.createRange) {
      var range = document.selection.createRange()
      var srcele = range.parentElement()
      var copy = document.body.createTextRange()
      copy.moveToElementText(srcele)
      for (cusorPos = 0; copy.compareEndPoints('StartToStart', range) < 0; cusorPos++) {
        copy.moveStart('character', 1)
      }
      return cusorPos
    }
  },
  // 只支持高级浏览器
  selectionPos: function (classname) {
    var selection = window.getSelection()
    var cursorOffset = 0
    document.onselectionchange = function (e) {
      if (e.target.activeElement.className === classname) {
        cursorOffset = selection.anchorOffset
      }
    }
    return cursorOffset
  },
  /* --------------------------
  确定命令是否已经激活
  @method isenable
  @param commandName (命令名称，如：backcolor)
  @return boolean
  -------------------------- */
  isenable: function (commandName) {
    return document.queryCommandEnabled(commandName)
  },
  backgroundcolor: function (color) {
    document.execCommand('backcolor', false, color)
  },
  bold: function () {
    document.execCommand('bold', false, null)
  },
  italic: function () {
    document.execCommand('italic', false, null)
  },
  underline: function () {
    document.execCommand('underline', false, null)
  },
  copy: function () {
    document.execCommand('copy', false, null)
  },
  selectall: function () {
    document.execCommand('selectall', false, null)
  },
  cut: function () {
    document.execCommand('cut', false, null)
  },
  paste: function () {
    document.execCommand('paste', false, null)
  },
  del: function () {
    document.execCommand('delete', false, null)
  },
  link: function (url) {
    document.execCommand('createlink', false, url)
  },
  unlink: function () {
    document.execCommand('unlink', false, null)
  },
  fontname: function (fontName) {
    document.execCommand('fontname', false, fontName)
  },
  fontsize: function (fontSize) {
    if (fontSize) {
      document.execCommand('fontsize', false, fontSize)
      return
    }
    return document.queryCommandValue('fontsize')
  },
  fontcolor: function (fontColor) {
    document.execCommand('forecolor', false, fontColor)
  },
  format: function (tag) {
    document.execCommand('formatblock', false, tag)
  },
  unformat: function () {
    document.execCommand('removeformat', false, null)
  },
  indent: function () {
    document.execCommand('indent', false, null)
  },
  outdent: function () {
    document.execCommand('outdent', false, null)
  },
  hr: function () {
    document.execCommand('inserthorzizontalrule', false, null)
  },
  img: function (url) {
    document.execCommand('insertimage', false, url)
  },
  ol: function () {
    document.execCommand('insertorderedlist', false, null)
  },
  ul: function () {
    document.execCommand('insertunorderedlist', false, null)
  },
  p: function () {
    document.execCommand('insertparagraph', false, null)
  },
  center: function () {
    document.execCommand('justifycenter', false, null)
  },
  left: function () {
    document.execCommand('justifyleft', false, null)
  },
  right: function () {
    document.execCommand('justifyright', false, null)
  },
  // 设置光标位置
  setCaretPosition: function (elem, caretPos) {
    if (elem !== null) {
      if (elem.createTextRange) {
        var range = elem.createTextRange()
        range.move('character', caretPos)
        range.select()
      } else {
        if (elem.selectionStart) {
          elem.focus()
          elem.setSelectionRange(caretPos, caretPos)
        } else {
          elem.focus()
        }
      }
    }
  },
  isEnter: function () {
    // 监听键盘输入
    window.addEventListener('keydown', function (e) {
      var keynum = e.which || e.keyCode
      if (keynum === '13') {
        return true
      }
      return false
    }, false)
  },
  keyboard: function (extendCallBack, collapseCallBack) {
    var winHeight = window.innerHeight
    var currentWinHeight = window.innerHeight
    var listenerInput// 监听输入框
    listenerInput = setInterval(function (e) {
      currentWinHeight = window.innerHeight
      // 获得输入法高度
      if (window.localStorage.getItem('keyboardHeight') && window.localStorage.getItem('keyboardHeight') > 0) {
        console.log('读取数据库keyboardHeight:' + window.localStorage.getItem('inputHeight'))
        this.inputHeight = window.localStorage.getItem('keyboardHeight')
        clearInterval(listenerInput)
      } else {
        this.inputHeight = winHeight - currentWinHeight
        console.log('注入数据库keyboardHeight:' + inputHeight)
        window.localStorage.setItem('keyboardHeight', inputHeight)
      }
      // 判断输入法是否收缩
      if (winHeight === currentWinHeight) {
        if (collapseCallBack) {
          collapseCallBack.call(this, e)
        }
        clearInterval(listenerInput)
      } else {
        if (extendCallBack) {
          extendCallBack.call(this, e)
        }
      }
    }, 500)
  }
};

//export default Edit


// PubSub 订阅发布
var PubSub = (function () {
  var _listen
  var _trigger
  var _remove
  var _default = 'default'
  var namespaceCache = {}
  var _create
  var each = function (arr, fn) {
    var ret
    for (var i = 0; i < arr.length; i++) {
      var n = arr[i]
      ret = fn.call(n, i, n)
    }
    return ret
  }

  _listen = function (key, fn, cache) {
    if (!cache[key]) {
      cache[key] = []
    }
    cache[key].push(fn)
  }
  _remove = function (key, cache, fn) {
    if (!cache[key]) {
      return
    }
    if (fn) {
      for (var i = cache[key].length; i >= 0; i--) {
        if (cache[key] === fn) {
          cache[key].splice(i, 1)
        } else {
          cache[key] = []
        }
      }
    } else {
      cache[key] = []
    }
  }
  _trigger = function () {
    var cache = [].shift.call(arguments)
    var key = [].shift.call(arguments)
    var args = arguments
    var stack = cache[key]
    if (!stack || !stack.length) {
      return
    }
    return each(stack, function () {
      return this.apply(this, args)
    })
  }
  _create = function (ns) {
    var namespace = ns || _default
    var cache = {}
    var offlineStack = [] // 离线事件
    var ret = {
      listen: function (key, fn, last) {
        _listen(key, fn, cache)
        if (offlineStack === null) {
          return
        }
        if (last === 'last') {
          offlineStack.length && offlineStack.pop()()
        } else {
          each(offlineStack, function () {
            this()
          })
        }
        offlineStack = null
      },
      one: function (key, fn, last) {
        _remove(key, cache)
        this.listen(key, fn, last)
      },
      remove: function (key, fn) {
        _remove(key, cache, fn)
      },
      trigger: function () {
        var _self = this;
        [].unshift.call(arguments, cache)
        var args = arguments
        var fn = function () {
          return _trigger.apply(_self, args)
        }
        if (offlineStack) {
          return offlineStack.push(fn)
        }
        return fn()
      }
    }
    if (Object.prototype.toString.call(namespace).indexOf('object HTML') === 1 && namespace.getAttribute('id')) {
      namespace = namespace.getAttribute('id')
    }
    var result = namespace ? (namespaceCache[namespace] ? namespaceCache[namespace] : namespaceCache[namespace] = ret) : ret
    return result
  }
  return {
    create: _create,
    one: function (key, fn, last) {
      var event = this.create()
      event.one(key, fn, last)
    },
    remove: function (key, fn) {
      var event = this.create()
      event.remove(key, fn)
    },
    listen: function (key, fn, last) {
      var event = this.create()
      event.listen(key, fn, last)
    },
    trigger: function () {
      var event = this.create()
      event.trigger.apply(this, arguments)
    }
  }
})();

//export default PubSub
/* *******************订阅发布******************* */
/*
<a class="button block" id="ID-BtnLogin">登录</a>
// 按钮
var btnLogin=document.getElementById('ID-BtnLogin');
// 订阅
PubSub.create('nsLogin').listen('login',userHandler);
PubSub.create('nsLogin').listen('login',shopHandler);
PubSub.create('nsLogin').listen('login',orderHandler);
// 句柄
function userHandler(e){
  console.log('初始化用户信息')
}
function shopHandler(e){
  console.log('初始化购物车')
}
function orderHandler(e){
  console.log('初始化订单')
}
// 发布
btnLogin.addEventListener('click',function(e){
  PubSub.create('nsLogin').trigger('login',e);
},false);
*/


//  EventUtil 事件函数
var EventUtil = (function () {
  var _listenTouchEvent = function (element, type, handler, isDetach) {
    var params = {
      threshold: 0
    }
    /* ------------------------
    Model
    ------------------------ */
    var touches = {
      direction: 0,
      vertical: 0,
      horizontal: 0,
      startX: 0,
      startY: 0,
      endX: 0,
      endY: 0,
      diffX: 0,
      diffY: 0
    }
    /* ------------------------
    Touch Handler
    ------------------------ */
    var onTouchStart = function (e) {
      touches.startX = e.touches[0].clientX
      touches.startY = e.touches[0].clientY
    }
    var onTouchEnd = function (e) {
      var eventName = ''
      touches.endX = e.changedTouches[0].clientX
      touches.endY = e.changedTouches[0].clientY
      touches.diffX = touches.startX - touches.endX
      touches.diffY = touches.startY - touches.endY
      // 单击事件
      if (Math.abs(touches.diffX) < 6 && Math.abs(touches.diffY) < 6) {
        eventName = 'tap'
      }

      // 设置方向
      if (touches.direction === 0) { // 设置滑动方向(-1上下 | 1左右)
        touches.direction = Math.abs(touches.diffX) > Math.abs(touches.diffY) ? 1 : -1
      }
      if (touches.direction === -1) { // 设置垂直方向(-1上 | 1下)
        touches.vertical = touches.diffY < 0 ? 1 : -1
      }
      if (touches.direction === 1) { // 设置左右方向(-1左 | 1右)
        touches.horizontal = touches.diffX < 0 ? 1 : -1
      }

      // swipeleft | swiperight | swipedown | swipeup 事件
      if (touches.vertical === -1) { // 上
        if (Math.abs(touches.diffY) > params.threshold) {
          eventName = 'swipeup'
        }
      } else if (touches.vertical === 1) { // 下
        if (Math.abs(touches.diffY) > params.threshold) {
          eventName = 'swipedown'
        }
      } else if (touches.horizontal === -1) { // 左
        if (Math.abs(touches.diffY) > params.threshold) {
          eventName = 'swipeleft'
        }
      } else if (touches.horizontal === 1) { // 右
        if (Math.abs(touches.diffY) > params.threshold) {
          eventName = 'swiperight'
        }
      }
      // 清空方向
      touches.direction = 0
      touches.vertical = 0
      touches.horizontal = 0
      // 执行函数
      for (var n in element.touchEvents) {
        if (eventName === n) element.touchEvents[n](e)
      }
    }
    /* ------------------------
    Touch Events
    ------------------------ */
    // 绑定事件
    var attach = function () {
      if (Object.keys(element.touchEvents || {}).length === 0) {
        element.touchEvents = {}
        element['addEventListener']('touchstart', onTouchStart, false)
        element['addEventListener']('touchend', onTouchEnd, false)
      }
      element.touchEvents[type] = handler
    }
    // 移除事件
    var detach = function () {
      if (element.touchEvents) delete element.touchEvents[type]
      if (Object.keys(element.touchEvents || {}).length === 0) {
        element['removeEventListener']('touchstart', onTouchStart, false)
        element['removeEventListener']('touchend', onTouchEnd, false)
      }
    }
    // 添加或移除事件
    if (isDetach) {
      detach()
    } else {
      attach()
    }
  }
  var _listenShakeEvent = function (element, type, handler, isDetach) {
    var threshold = 3000 // 晃动速度
    var lastUpdate = 0 // 设置最后更新时间，用于对比
    var curShakeX = 0
    var curShakeY = 0
    var curShakeZ = 0
    var lastShakeX = 0
    var lastShakeY = 0
    var lastShakeZ = 0
    function deviceMotionHandler (e) {
      var acceleration = e.accelerationIncludingGravity // 获得重力加速
      var curTime = new Date().getTime()// 获得当前时间戳
      if ((curTime - lastUpdate) > 100) {
        var diffTime = curTime - lastUpdate // 时间差
        lastUpdate = curTime
        curShakeX = acceleration.x // x轴加速度
        curShakeY = acceleration.y // y轴加速度
        curShakeZ = acceleration.z // z轴加速度
        var speed = Math.abs(curShakeX + curShakeY + curShakeZ - lastShakeX - lastShakeY - lastShakeZ) / diffTime * 10000
        if (speed > threshold) {
          var e = {
            target: window,
            speed: speed
          }
          handler(e)
        }
        lastShakeX = curShakeX
        lastShakeY = curShakeY
        lastShakeZ = curShakeZ
      }
    }
    function attach () {
      if (!window.DeviceMotionEvent) {
        alert('您好，你目前所用的设备好像不支持重力感应哦！')
        return
      }
      window.addEventListener('devicemotion', deviceMotionHandler, false)
    }
    function detach () {
      window.removeEventListener('devicemotion', deviceMotionHandler, false);
    }
    // 添加或移除事件
    if (isDetach) {
      detach()
    } else {
      attach()
    }
  }
  return {
    addHandler: function (element, type, handler) {
      // 自定义事件 tap | swipeleft | swiperight | swipedown | swipeup
      if (type === 'tap' || type === 'swipeleft' || type === 'swiperight' || type === 'swipedown' || type === 'swipeup') {
        _listenTouchEvent(element, type, handler)
        return
      }
      // 自定义事件 shake
      if (type === 'shake') {
        _listenShakeEvent(element, type, handler)
        return
      }
      // 系统事件
      if (element.addEventListener) {
        element.addEventListener(type, handler, false)
      } else if (element.attachEvent) {
        element.attachEvent('on' + type, handler)
      } else {
        element['on' + type] = handler
      }
    },
    removeHandler: function (element, type, handler) {
      // 自定义事件 tap | swipeleft | swiperight | swipedown | swipeup
      if (type === 'tap' || type === 'swipeleft' || type === 'swiperight' || type === 'swipedown' || type === 'swipeup') {
        _listenTouchEvent(element, type, handler, true)
        return
      }
      // 自定义事件 shake
      if (type === 'shake') {
        _listenShakeEvent(element, type, handler, true)
        return
      }
      // 系统事件
      if (element.removeEventListener) {
        element.removeEventListener(type, handler, false)
      } else if (element.detachEvent) {
        element.detachEvent('on' + type, handler)
      } else {
        element['on' + type] = null
      }
    },
    preventDefault: function (e) {
      if (e.preventDefault) {
        e.preventDefault()
      } else {
        e.returnValue = false
      }
    },
    stopPropagation: function (e) {
      if (e.stopPropagation) {
        e.stopPropagation()
      } else {
        e.cancelBubble = true
      }
    },
    event: function (e) {
      return e || window.e
    },
    type: function (e) {
      return e.type
    },
    target: function (e) {
      return e.target || e.srcElement
    }
  }
})();

//export default EventUtil


/* -------------------
  获得样式
  ------------------- */
Element.prototype.getStyles = function () {
  return window.getComputedStyle(this)
}
Element.prototype.getStyleValue = function (property) {
  return window.getComputedStyle(this).getPropertyValue(property)
}


// Device
var Device = (function () {
  var ua = navigator.userAgent.toLowerCase()
  // 内核
  var kernel = ''
  if (ua.indexOf('trident') > -1) {
    kernel = 'trident'
  } else if (ua.indexOf('presto') > -1) {
    kernel = 'presto'
  } else if (ua.indexOf('applewebkit') > -1) {
    kernel = 'webkit'
  } else if (ua.indexOf('gecko') > -1 && ua.indexOf('khtml') === -1) {
    kernel = 'gecko'
  }
  // 设备
  var device = ''
  if (ua.match(/applewebkit.*mobile.*/)) {
    device = 'mobile'
  } else {
    device = 'pc'
  }
  // 系统
  var os = ''
  var osVersion = ''
  var andriodExp = ua.match(/android\s*(\d*\.*\d*)/)
  var iosExp = ua.match(/cpu iphone os (.*?) like mac os/)
  if (andriodExp) {
    os = 'andriod'
    osVersion = andriodExp[1]
  } else if (iosExp) {
    os = 'ios'
    osVersion = iosExp[1]
  }
  // 平台
  var platform = ''
  if (ua.indexOf('micromessenger') > -1) {
    platform = 'weixin'
  } else if (ua.indexOf('mqqbrowser') > -1) {
    platform = 'qq'
  } else if (ua.indexOf('ucbrowser') > -1) {
    platform = 'uc'
  }
  // 网络监听
  var onLineCallback
  function handleOnline (e) {
    onLineCallback(true)
  }
  function handleOffline (e) {
    onLineCallback(false)
  }
  function onLine (callback) {
    onLineCallback = callback
    window.removeEventListener('online', handleOnline, false)
    window.removeEventListener('offline', handleOffline, false)
    window.addEventListener('online', handleOnline, false)
    window.addEventListener('offline', handleOffline, false)
  }
  return {
    kernel: kernel,
    device: device,
    os: os,
    osVersion: osVersion,
    platform: platform,
    // 应用程序判断
    language: (window.navigator.browserLanguage || window.navigator.language).toLowerCase(),
    appVersion: window.navigator.appVersion,
    onLine: onLine,
    isOnLine: window.navigator.onLine,
    ua: ua
  }
})();

//export default Device


// Form 表单元素控制提交
var Form = function (container, params) {
  /* --------------------
  Model
  -------------------- */
  var defaults = {
    ignoreClass: null // 过滤表单元素
    /*  callback
    onSubmit:function(selected)
    */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  // Form
  var s = this
  // Params
  s.params = params
  // Container
  s.container = typeof container === 'string' ? document.querySelector(container) : container
  if (!s.container) {
    console.log('SeedsUI Error：未找到Form表单的DOM对象，请检查传入参数是否正确')
    return
  }
  // 表单元素
  s.fields = []
  s.update = function () {
    s.fields = []
    // 获取有效的表单元素
    for (var i = 0; i < s.container.elements.length; i++) {
      var field = s.container.elements[i]
      // 过滤没有name的表单元素
      if (!field.type || !field.name) {
        continue
      }
      // 过滤button、reset、submit
      if (field.type === 'button' || field.type === 'reset' || field.type === 'submit') {
        continue
      }
      // 过滤未选中的checkbox和radio
      if (field.type === 'radio' || field.type === 'checkbox') {
        if (!field.checked) {
          continue
        }
      }
      if (s.params.ignoreClass && field.classList.contains(s.params.ignoreClass)) {
        continue
      }
      // push到数组里
      s.fields.push(field)
    }
  }
  s.update()

  /* --------------------
  Method
  -------------------- */
  // 设置fields对象
  s.setFields = function (fields) {
    s.fields = fields
  }
  // 添加fields对象
  s.pushField = function (field) {
    s.fields.push(field)
  }

  s.selected = {}
  s.selectedString = []
  // 添加已填值
  s.addSelected = function (field) {
    // 字符串格式
    s.selectedString.push(field.name + '=' + field.value)
    // Json格式
    if (s.selected[field.name]) {
      s.selected[field.name].push(field.value)
    } else {
      s.selected[field.name] = []
      s.selected[field.name].push(field.value)
    }
  }
  // 表单Json化
  s.serializeJson = function () {
    var field = null
    for (var i = 0; i < s.fields.length; i++) {
      field = s.fields[i]
      // 如果是多选框，则每个值单独一个条目
      if (field.type === 'select-one' || field.type === 'select-multiple') {
        for (var j = 0; j < field.options.length; j++) {
          var option = field.options[j]
          if (option.selected) {
            s.addSelected(field)
          }
        }
      } else {
        s.addSelected(field)
      }
    }
    return s.selected
  }
  // 表单序列化
  s.serialize = function () {
    // 获得字符串
    return s.selectedString.join('&')
  }
  // callback表单提交
  if (s.params.onSubmit) {
    this.container.addEventListener('submit', function (e) {
      s.params.onSubmit(e, s.selected)
    }, false)
  }
};

//export default Form


// History 单页模式
var History = function (params) {
  /* ------------------------
  Model
  ------------------------ */
  var defaults = {
    enableStorage: true,
    historyKey: 'history',
    useHash: true
    /* callbacks
    onInit:function(History)// 初始化
    onBack:function(History)// 返回
    onForward:function(History)// 前进
    */
  }

  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  s.params = params

  s.list = []
  s.discardList = []
  s.currentHash = ''
  s.prevHash = ''

  // 保存到storage中
  var storage = window.sessionStorage
  var storageHistory = storage.getItem(s.params.historyKey)
  if (s.params.enableStorage && storageHistory) s.list = storageHistory.split(',')

  /* ------------------------
  Method
  ------------------------ */
  s.saveList = function () {
    if (s.params.enableStorage) storage.setItem(s.params.historyKey, s.list)
  }
  s.clearList = function () {
    s.list = []
    storage.removeItem(s.params.historyKey)
  }

  s.add = function (hash, enableHistory) {
    s.list.push(hash)
    // 历史记录保存到本地数据库中
    s.saveList()
    // 是否添加到历史记录
    if (enableHistory) {
      try {
        window.history.pushState({
          href: hash
        }, document.title, hash)
      } catch (err) {
        console.log('SeedsUI Error:添加history失败')
      }
    }
  }
  s.replace = function (hash, enableHistory) {
    s.prevHash = s.list.pop()
    s.list.push(hash)
    // 历史记录保存到本地数据库中
    s.saveList()
    // 是否添加到历史记录
    if (enableHistory) {
      try {
        window.history.replaceState({
          href: hash
        }, document.title, hash)
      } catch (err) {
        console.log('SeedsUI Error:替换history失败')
      }
    }
  }

  s.remove = function (hash) {
    s.list = s.list.filter(function (n) {
      return n !== hash
    })
    // 历史记录保存到本地数据库中
    s.saveList()
  }

  /* ------------------------
  Control
  ------------------------ */
  s.events = function (detach) {
    var action = detach ? 'removeEventListener' : 'addEventListener'
    // hash值监听
    window[action]('popstate', s.onPopstate, false)
    // window[action]('hashchange',s.onPopstate,false)
  }
  s.attach = function (event) {
    s.events()
  }
  s.detach = function (event) {
    s.events(true)
  }
  s.onPopstate = function (e) {
    // console.log('location: ' + document.location + ', state: ' + JSON.stringify(e.state))
    s.currentHash = s.params.useHash ? location.hash : location.href
    // 返回到根部
    if (location.hash === '') {
      s.onBack()
      // console.log('根部——当前hash：'+s.currentHash+'关闭页面：'+s.prevHash)
      return
    }

    // 再次进入当前hash，则不工作
    if (s.list.indexOf(s.currentHash) >= 0 && s.list[s.list.length - 1] === s.currentHash) {
      return
    }

    // 前进与后退
    if (s.list.indexOf(s.currentHash) === -1) { // 前进
      s.onForward()
      // Callback onForward
      if (s.params.onForward) s.params.onForward(s)

      // console.log('前进——当前hash：'+s.currentHash+'上个页面：'+s.prevHash)
    } else { // 后退
      s.onBack()
      // console.log('后退——当前hash：'+s.currentHash+'关闭页面：'+s.prevHash)
    }
  }
  s.onBack = function () {
    s.prevHash = s.list.pop()
    // 如果返回二级及以上，如history.go(-2)
    if (s.currentHash !== s.list[s.list.length - 1]) {
      s.discardList = []
      var discardLen = s.list.length - 1 - s.list.indexOf(s.currentHash)
      for (var i = 0; i < discardLen; i++) {
        s.discardList.push(s.list.pop())
      }
    } else {
      s.discardList = []
    }
    // Callback onBack
    if (s.params.onBack) s.params.onBack(s)
    // 历史记录保存到本地数据库中
    s.saveList()
  }
  s.onForward = function () {
    s.prevHash = s.list[s.list.length - 1] || ''
    s.list.push(s.currentHash)
    // 历史记录保存到本地数据库中
    s.saveList()
  }
  s.onInit = function () {
    // Callback onInit
    if (s.params.onInit) s.params.onInit(s)
    // 添加事件绑定
    s.attach()
  }
  s.init = function () {
    s.onInit()
  }
  s.init()
};

//export default History


// Media 多媒体控件
var Media = function (media) {
  /* ---------------------------
    Model
    --------------------------- */
  var s = this
  s.media = document.querySelector(media) || new Audio(media)
  /* ---------------------------
    Method
    --------------------------- */
  s.playAudio = function (loop) {
    s.media.autoplay = true
    s.media.loop = loop || false
    s.media.play()
    return s
  }
  // 判断视频加载状态
  s.isReady = function () {
    if (s.media.readyState !== 4) {
      console.log('视频尚未加载完成，状态：' + s.media.readyState)
      return false
    }
    return true
  }
  // 暂停与播放
  s.resume = function () {
    if (s.media.paused) {
      s.media.play()
      return false
    } else {
      s.media.pause()
      return true
    }
  }
  // 全屏与非全屏，w3c推荐标准，但尚未兼容
  s.fullScreen = function () {
    if (s.media.requestFullscreen) {
      s.media.exitFullscreen()
      return false
    } else {
      s.media.requestFullscreen()
      return true
    }
  }
  // 播放时间
  s.durationTime = function () {
    if (!s.isReady) return
    if (arguments.length > 0) {
      s.media.duration = arguments[0]
    }
    return s.media.duration
  }
  // 当前时间
  s.currentTime = function () {
    if (!s.isReady) return
    if (arguments.length > 0) {
      s.media.currentTime = arguments[0]
    }
    return s.media.currentTime
  }
  // 音量，值为0.0到1.0
  s.volume = function () {
    if (arguments.length > 0) {
      s.media.volume = arguments[0]
    }
    return s.media.volume
  }
  // 音量值大小
  s.volumeLvl = function () {
    var volnumber = s.media.volume
    if (volnumber === 0) {
      return 0
    } else if (volnumber > 0 && volnumber < 0.3) {
      return 1
    } else if (volnumber > 0.3 && volnumber < 0.6) {
      return 2
    } else if (volnumber > 0.6 && volnumber < 0.9) {
      return 3
    } else {
      return 4
    }
  }
  // 设置播放速度，默认为1.0秒
  s.rate = function () {
    if (arguments) {
      s.media.defaultPlaybackRate = arguments[0]
    }
    return s.media.defaultPlaybackRate
  }

  // 是否支持此视频
  s.isSupport = function (mediaPostfix) {
    var maybeMedia = ''
    var probablyMedia = ''
    switch (mediaPostfix) {
      // 音频
      case 'aac':
        maybeMedia = 'audio/mp4'
        probablyMedia = 'audio/mp4; codecs="mp4a.40.2"'
        break
      case 'mp3':
        maybeMedia = 'audio/mpeg'
        probablyMedia = 'audio/mpeg'
        break
      case 'vorbis':
        maybeMedia = 'audio/ogg'
        probablyMedia = 'audio/ogg; codecs="vorbis"'
        break// 后缀通常为ogg
      case 'wav':
        maybeMedia = 'audio/wav'
        probablyMedia = 'audio/wav; codecs="1"'
        break
      // 视频
      case 'h.264':
        maybeMedia = 'video/mp4'
        probablyMedia = 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"'
        break // 后缀通常为mpg4、mp4、mov
      case 'theora':
        maybeMedia = 'video/ogg'
        probablyMedia = 'video/ogg; codecs="theora"'
        break // 后缀通常为ogg
      case 'webm':
        maybeMedia = 'video/webm'
        probablyMedia = 'video/webm; codecs="vp8, vorbis"'
        break // 后缀通常为webm
    }
    var player = document.createElement('video')
    if (maybeMedia !== '' && probablyMedia !== '' && (player.canPlayType(maybeMedia) || player.canPlayType(probablyMedia))) {
      return true
    }
    return false
  }
  /* ---------------------------
    Events
    --------------------------- */
  var event = function (eventname, fn, detach) {
    var action = detach ? 'removeEventListener' : 'addEventListener'
    s.media[action](eventname, fn, false)
  }
  // 因为没有数据不能播放，readyState值为0
  s.onDataunavailable = function (callback, detach) {
    event('dataunavailable', callback, detach)
  }
  // 当前帧已下载完成，readyState值为1
  s.onCanshowcurrentframe = function (callback, detach) {
    event('canshowcurrentframe', callback, detach)
  }
  // 可以播放时，readyState值为2
  s.onCanplay = function (callback, detach) {
    event('canplay', callback, detach)
  }
  // 播放可继续，而且应该不会中断，readyState值为3
  s.onCanplaythrough = function (callback, detach) {
    event('canplaythrough', callback, detach)
  }
  // 所有媒体已加载完成，load有可能会被废弃，建议使用canplaythrough
  s.onLoad = function (callback, detach) {
    event('load', callback, detach)
  }
  // 媒体的第一帧已加载完成
  s.onLoadeddata = function (callback, detach) {
    event('loadeddata', callback, detach)
  }
  // 媒体的元数据已加载完成
  s.onLoadedmetadata = function (callback, detach) {
    event('loadedmetadata', callback, detach)
  }
  // 下载已开始
  s.onLoadstart = function (callback, detach) {
    event('loadstart', callback, detach)
  }
  // 正在下载
  s.onProgress = function (callback, detach) {
    event('progress', callback, detach)
  }
  // 下载中断
  s.onAbort = function (callback, detach) {
    event('abort', callback, detach)
  }
  // 浏览器尝试下载，但未接收到数据
  s.onStalled = function (callback, detach) {
    event('stalled', callback, detach)
  }
  // 下载发生网络错误
  s.onError = function (callback, detach) {
    event('error', callback, detach)
  }
  // 网络连接关闭
  s.onEmptied = function (callback, detach) {
    event('emptied', callback, detach)
  }
  // 发生错误阻止了媒体下载
  s.onEmpty = function (callback, detach) {
    event('empty', callback, detach)
  }
  // 准备播放
  s.onPlay = function (callback, detach) {
    event('play', callback, detach)
  }
  // 正在播放
  s.onPlaying = function (callback, detach) {
    event('playing', callback, detach)
  }
  // 当前时间被不合理或意外的方式更新
  s.onTimeupdate = function (callback, detach) {
    event('timeupdate', callback, detach)
  }
  // 暂停
  s.onPause = function (callback, detach) {
    event('pause', callback, detach)
  }
  // 播放暂停，等待下载更多数据
  s.onWaiting = function (callback, detach) {
    event('pause', callback, detach)
  }
  // 媒体已播放至末尾，播放停止
  s.onEnded = function (callback, detach) {
    event('ended', callback, detach)
  }
  // 更改音量事件
  s.onVolumechange = function (callback, detach) {
    event('volumechange', callback, detach)
  }
  // 更改播放速度事件
  s.onRatechange = function (callback, detach) {
    event('ratechange', callback, detach)
  }
  // 搜索结束
  s.onSeeked = function (callback, detach) {
    event('seeked', callback, detach)
  }
  // 正在移动到新位置
  s.onSeeking = function (callback, detach) {
    event('seeking', callback, detach)
  }
};

//export default Media


// toPinyin|toCapitalize汉字转拼音
var PinyinHelper = (function () {
  var pinyins = { 'a': '\u554a\u963f\u9515', 'ai': '\u57c3\u6328\u54ce\u5509\u54c0\u7691\u764c\u853c\u77ee\u827e\u788d\u7231\u9698\u8bf6\u6371\u55f3\u55cc\u5ad2\u7477\u66a7\u7839\u953f\u972d', 'an': '\u978d\u6c28\u5b89\u4ffa\u6309\u6697\u5cb8\u80fa\u6848\u8c19\u57ef\u63de\u72b4\u5eb5\u6849\u94f5\u9e4c\u9878\u9eef', 'ang': '\u80ae\u6602\u76ce', 'ao': '\u51f9\u6556\u71ac\u7ff1\u8884\u50b2\u5965\u61ca\u6fb3\u5773\u62d7\u55f7\u5662\u5c99\u5ed2\u9068\u5aaa\u9a9c\u8071\u87af\u93ca\u9ccc\u93d6', 'ba': '\u82ad\u634c\u6252\u53ed\u5427\u7b06\u516b\u75a4\u5df4\u62d4\u8dcb\u9776\u628a\u8019\u575d\u9738\u7f62\u7238\u8307\u83dd\u8406\u636d\u5c9c\u705e\u6777\u94af\u7c91\u9c85\u9b43', 'bai': '\u767d\u67cf\u767e\u6446\u4f70\u8d25\u62dc\u7a17\u859c\u63b0\u97b4', 'ban': '\u6591\u73ed\u642c\u6273\u822c\u9881\u677f\u7248\u626e\u62cc\u4f34\u74e3\u534a\u529e\u7eca\u962a\u5742\u8c73\u94a3\u7622\u764d\u8228', 'bang': '\u90a6\u5e2e\u6886\u699c\u8180\u7ed1\u68d2\u78c5\u868c\u9551\u508d\u8c24\u84a1\u8783', 'bao': '\u82de\u80de\u5305\u8912\u96f9\u4fdd\u5821\u9971\u5b9d\u62b1\u62a5\u66b4\u8c79\u9c8d\u7206\u52f9\u8446\u5b80\u5b62\u7172\u9e28\u8913\u8db5\u9f85', 'bo': '\u5265\u8584\u73bb\u83e0\u64ad\u62e8\u94b5\u6ce2\u535a\u52c3\u640f\u94c2\u7b94\u4f2f\u5e1b\u8236\u8116\u818a\u6e24\u6cca\u9a73\u4eb3\u8543\u5575\u997d\u6a97\u64d8\u7934\u94b9\u9e41\u7c38\u8ddb', 'bei': '\u676f\u7891\u60b2\u5351\u5317\u8f88\u80cc\u8d1d\u94a1\u500d\u72c8\u5907\u60eb\u7119\u88ab\u5b5b\u9642\u90b6\u57e4\u84d3\u5457\u602b\u6096\u789a\u9e4e\u8919\u943e', 'ben': '\u5954\u82ef\u672c\u7b28\u755a\u574c\u951b', 'beng': '\u5d29\u7ef7\u752d\u6cf5\u8e66\u8ff8\u552a\u5623\u750f', 'bi': '\u903c\u9f3b\u6bd4\u9119\u7b14\u5f7c\u78a7\u84d6\u853d\u6bd5\u6bd9\u6bd6\u5e01\u5e87\u75f9\u95ed\u655d\u5f0a\u5fc5\u8f9f\u58c1\u81c2\u907f\u965b\u5315\u4ef3\u4ffe\u8298\u835c\u8378\u5421\u54d4\u72f4\u5eb3\u610e\u6ed7\u6fde\u5f3c\u59a3\u5a62\u5b16\u74a7\u8d32\u7540\u94cb\u79d5\u88e8\u7b5a\u7b85\u7be6\u822d\u895e\u8df8\u9ac0', 'bian': '\u97ad\u8fb9\u7f16\u8d2c\u6241\u4fbf\u53d8\u535e\u8fa8\u8fa9\u8fab\u904d\u533e\u5f01\u82c4\u5fed\u6c74\u7f0f\u7178\u782d\u78a5\u7a39\u7a86\u8759\u7b3e\u9cca', 'biao': '\u6807\u5f6a\u8198\u8868\u5a4a\u9aa0\u98d1\u98d9\u98da\u706c\u9556\u9573\u762d\u88f1\u9cd4', 'bie': '\u9cd6\u618b\u522b\u762a\u8e69\u9cd8', 'bin': '\u5f6c\u658c\u6fd2\u6ee8\u5bbe\u6448\u50a7\u6d5c\u7f24\u73a2\u6ba1\u8191\u9554\u9acc\u9b13', 'bing': '\u5175\u51b0\u67c4\u4e19\u79c9\u997c\u70b3\u75c5\u5e76\u7980\u90b4\u6452\u7ee0\u678b\u69df\u71f9', 'bu': '\u6355\u535c\u54fa\u8865\u57e0\u4e0d\u5e03\u6b65\u7c3f\u90e8\u6016\u62ca\u535f\u900b\u74ff\u6661\u949a\u91ad', 'ca': '\u64e6\u5693\u7924', 'cai': '\u731c\u88c1\u6750\u624d\u8d22\u776c\u8e29\u91c7\u5f69\u83dc\u8521', 'can': '\u9910\u53c2\u8695\u6b8b\u60ed\u60e8\u707f\u9a96\u74a8\u7cb2\u9eea', 'cang': '\u82cd\u8231\u4ed3\u6ca7\u85cf\u4f27', 'cao': '\u64cd\u7cd9\u69fd\u66f9\u8349\u8279\u5608\u6f15\u87ac\u825a', 'ce': '\u5395\u7b56\u4fa7\u518c\u6d4b\u5202\u5e3b\u607b', 'ceng': '\u5c42\u8e6d\u564c', 'cha': '\u63d2\u53c9\u832c\u8336\u67e5\u78b4\u643d\u5bdf\u5c94\u5dee\u8be7\u7339\u9987\u6c4a\u59f9\u6748\u6942\u69ce\u6aab\u9497\u9538\u9572\u8869', 'chai': '\u62c6\u67f4\u8c7a\u4faa\u8308\u7625\u867f\u9f87', 'chan': '\u6400\u63ba\u8749\u998b\u8c17\u7f20\u94f2\u4ea7\u9610\u98a4\u5181\u8c04\u8c36\u8487\u5edb\u5fcf\u6f7a\u6fb6\u5b71\u7fbc\u5a75\u5b17\u9aa3\u89c7\u7985\u9561\u88e3\u87fe\u8e94', 'chang': '\u660c\u7316\u573a\u5c1d\u5e38\u957f\u507f\u80a0\u5382\u655e\u7545\u5531\u5021\u4f25\u9b2f\u82cc\u83d6\u5f9c\u6005\u60dd\u960a\u5a3c\u5ae6\u6636\u6c05\u9cb3', 'chao': '\u8d85\u6284\u949e\u671d\u5632\u6f6e\u5de2\u5435\u7092\u600a\u7ec9\u6641\u8016', 'che': '\u8f66\u626f\u64a4\u63a3\u5f7b\u6f88\u577c\u5c6e\u7817', 'chen': '\u90f4\u81e3\u8fb0\u5c18\u6668\u5ff1\u6c89\u9648\u8d81\u886c\u79f0\u8c0c\u62bb\u55d4\u5bb8\u741b\u6987\u809c\u80c2\u789c\u9f80', 'cheng': '\u6491\u57ce\u6a59\u6210\u5448\u4e58\u7a0b\u60e9\u6f84\u8bda\u627f\u901e\u9a8b\u79e4\u57d5\u5d4a\u5fb5\u6d48\u67a8\u67fd\u6a18\u665f\u584d\u77a0\u94d6\u88ce\u86cf\u9172', 'chi': '\u5403\u75f4\u6301\u5319\u6c60\u8fdf\u5f1b\u9a70\u803b\u9f7f\u4f88\u5c3a\u8d64\u7fc5\u65a5\u70bd\u50ba\u5880\u82aa\u830c\u640b\u53f1\u54e7\u557b\u55e4\u5f73\u996c\u6cb2\u5ab8\u6555\u80dd\u7719\u7735\u9e31\u761b\u892b\u86a9\u87ad\u7b1e\u7bea\u8c49\u8e05\u8e1f\u9b51', 'chong': '\u5145\u51b2\u866b\u5d07\u5ba0\u833a\u5fe1\u61a7\u94f3\u825f', 'chou': '\u62bd\u916c\u7574\u8e0c\u7a20\u6101\u7b79\u4ec7\u7ef8\u7785\u4e11\u4fe6\u5733\u5e31\u60c6\u6eb4\u59af\u7633\u96e0\u9c8b', 'chu': '\u81ed\u521d\u51fa\u6a71\u53a8\u8e87\u9504\u96cf\u6ec1\u9664\u695a\u7840\u50a8\u77d7\u6410\u89e6\u5904\u4e8d\u520d\u61b7\u7ecc\u6775\u696e\u6a17\u870d\u8e70\u9edc', 'chuan': '\u63e3\u5ddd\u7a7f\u693d\u4f20\u8239\u5598\u4e32\u63be\u821b\u60f4\u9044\u5ddb\u6c1a\u948f\u9569\u8221', 'chuang': '\u75ae\u7a97\u5e62\u5e8a\u95ef\u521b\u6006', 'chui': '\u5439\u708a\u6376\u9524\u5782\u9672\u68f0\u69cc', 'chun': '\u6625\u693f\u9187\u5507\u6df3\u7eaf\u8822\u4fc3\u83bc\u6c8c\u80ab\u6710\u9e51\u877d', 'chuo': '\u6233\u7ef0\u851f\u8fb6\u8f8d\u955e\u8e14\u9f8a', 'ci': '\u75b5\u8328\u78c1\u96cc\u8f9e\u6148\u74f7\u8bcd\u6b64\u523a\u8d50\u6b21\u8360\u5472\u5d6f\u9e5a\u8785\u7ccd\u8d91', 'cong': '\u806a\u8471\u56f1\u5306\u4ece\u4e1b\u506c\u82c1\u6dd9\u9aa2\u742e\u7481\u679e', 'cu': '\u51d1\u7c97\u918b\u7c07\u731d\u6b82\u8e59', 'cuan': '\u8e7f\u7be1\u7a9c\u6c46\u64ba\u6615\u7228', 'cui': '\u6467\u5d14\u50ac\u8106\u7601\u7cb9\u6dec\u7fe0\u8403\u60b4\u7480\u69b1\u96b9', 'cun': '\u6751\u5b58\u5bf8\u78cb\u5fd6\u76b4', 'cuo': '\u64ae\u6413\u63aa\u632b\u9519\u539d\u811e\u9509\u77ec\u75e4\u9e7e\u8e49\u8e9c', 'da': '\u642d\u8fbe\u7b54\u7629\u6253\u5927\u8037\u54d2\u55d2\u601b\u59b2\u75b8\u8921\u7b2a\u977c\u9791', 'dai': '\u5446\u6b79\u50a3\u6234\u5e26\u6b86\u4ee3\u8d37\u888b\u5f85\u902e\u6020\u57ed\u7519\u5454\u5cb1\u8fe8\u902f\u9a80\u7ed0\u73b3\u9edb', 'dan': '\u803d\u62c5\u4e39\u5355\u90f8\u63b8\u80c6\u65e6\u6c2e\u4f46\u60ee\u6de1\u8bde\u5f39\u86cb\u4ebb\u510b\u5369\u840f\u5556\u6fb9\u6a90\u6b9a\u8d55\u7708\u7605\u8043\u7baa', 'dang': '\u5f53\u6321\u515a\u8361\u6863\u8c20\u51fc\u83ea\u5b95\u7800\u94db\u88c6', 'dao': '\u5200\u6363\u8e48\u5012\u5c9b\u7977\u5bfc\u5230\u7a3b\u60bc\u9053\u76d7\u53e8\u5541\u5fc9\u6d2e\u6c18\u7118\u5fd1\u7e9b', 'de': '\u5fb7\u5f97\u7684\u951d', 'deng': '\u8e6c\u706f\u767b\u7b49\u77aa\u51f3\u9093\u5654\u5d9d\u6225\u78f4\u956b\u7c26', 'di': '\u5824\u4f4e\u6ef4\u8fea\u654c\u7b1b\u72c4\u6da4\u7fdf\u5ae1\u62b5\u5e95\u5730\u8482\u7b2c\u5e1d\u5f1f\u9012\u7f14\u6c10\u7c74\u8bcb\u8c1b\u90b8\u577b\u839c\u837b\u5600\u5a23\u67e2\u68e3\u89cc\u7825\u78b2\u7747\u955d\u7f9d\u9ab6', 'dian': '\u98a0\u6382\u6ec7\u7898\u70b9\u5178\u975b\u57ab\u7535\u4f43\u7538\u5e97\u60e6\u5960\u6dc0\u6bbf\u4e36\u963d\u576b\u57dd\u5dc5\u73b7\u765c\u766b\u7c1f\u8e2e', 'diao': '\u7889\u53fc\u96d5\u51cb\u5201\u6389\u540a\u9493\u8c03\u8f7a\u94de\u8729\u7c9c\u8c82', 'die': '\u8dcc\u7239\u789f\u8776\u8fed\u8c0d\u53e0\u4f5a\u57a4\u581e\u63f2\u558b\u6e2b\u8f76\u7252\u74de\u8936\u800b\u8e40\u9cbd\u9cce', 'ding': '\u4e01\u76ef\u53ee\u9489\u9876\u9f0e\u952d\u5b9a\u8ba2\u4e22\u4ec3\u5576\u738e\u815a\u7887\u753a\u94e4\u7594\u8035\u914a', 'dong': '\u4e1c\u51ac\u8463\u61c2\u52a8\u680b\u4f97\u606b\u51bb\u6d1e\u578c\u549a\u5cbd\u5cd2\u5902\u6c21\u80e8\u80f4\u7850\u9e2b', 'dou': '\u515c\u6296\u6597\u9661\u8c46\u9017\u75d8\u8538\u94ad\u7aa6\u7aac\u86aa\u7bfc\u9161', 'du': '\u90fd\u7763\u6bd2\u728a\u72ec\u8bfb\u5835\u7779\u8d4c\u675c\u9540\u809a\u5ea6\u6e21\u5992\u828f\u561f\u6e0e\u691f\u6a50\u724d\u8839\u7b03\u9ad1\u9ee9', 'duan': '\u7aef\u77ed\u953b\u6bb5\u65ad\u7f0e\u5f56\u6934\u7145\u7c16', 'dui': '\u5806\u5151\u961f\u5bf9\u603c\u619d\u7893', 'dun': '\u58a9\u5428\u8e72\u6566\u987f\u56e4\u949d\u76fe\u9041\u7096\u7818\u7905\u76f9\u9566\u8db8', 'duo': '\u6387\u54c6\u591a\u593a\u579b\u8eb2\u6735\u8dfa\u8235\u5241\u60f0\u5815\u5484\u54da\u7f0d\u67c1\u94ce\u88f0\u8e31', 'e': '\u86fe\u5ce8\u9e45\u4fc4\u989d\u8bb9\u5a25\u6076\u5384\u627c\u904f\u9102\u997f\u5669\u8c14\u57a9\u57ad\u82ca\u83aa\u843c\u5443\u6115\u5c59\u5a40\u8f6d\u66f7\u816d\u786a\u9507\u9537\u9e57\u989a\u9cc4', 'en': '\u6069\u84bd\u6441\u5514\u55ef', 'er': '\u800c\u513f\u8033\u5c14\u9975\u6d31\u4e8c\u8d30\u8fe9\u73e5\u94d2\u9e38\u9c95', 'fa': '\u53d1\u7f5a\u7b4f\u4f10\u4e4f\u9600\u6cd5\u73d0\u57a1\u781d', 'fan': '\u85e9\u5e06\u756a\u7ffb\u6a0a\u77fe\u9492\u7e41\u51e1\u70e6\u53cd\u8fd4\u8303\u8d29\u72af\u996d\u6cdb\u8629\u5e61\u72ad\u68b5\u6535\u71d4\u7548\u8e6f', 'fang': '\u574a\u82b3\u65b9\u80aa\u623f\u9632\u59a8\u4eff\u8bbf\u7eba\u653e\u531a\u90a1\u5f77\u94ab\u822b\u9c82', 'fei': '\u83f2\u975e\u5561\u98de\u80a5\u532a\u8bfd\u5420\u80ba\u5e9f\u6cb8\u8d39\u82be\u72d2\u60b1\u6ddd\u5983\u7ecb\u7eef\u69a7\u8153\u6590\u6249\u7953\u7829\u9544\u75f1\u871a\u7bda\u7fe1\u970f\u9cb1', 'fen': '\u82ac\u915a\u5429\u6c1b\u5206\u7eb7\u575f\u711a\u6c7e\u7c89\u594b\u4efd\u5fff\u6124\u7caa\u507e\u7035\u68fc\u610d\u9cbc\u9f22', 'feng': '\u4e30\u5c01\u67ab\u8702\u5cf0\u950b\u98ce\u75af\u70fd\u9022\u51af\u7f1d\u8bbd\u5949\u51e4\u4ff8\u9146\u8451\u6ca3\u781c', 'fu': '\u4f5b\u5426\u592b\u6577\u80a4\u5b75\u6276\u62c2\u8f90\u5e45\u6c1f\u7b26\u4f0f\u4fd8\u670d\u6d6e\u6daa\u798f\u88b1\u5f17\u752b\u629a\u8f85\u4fef\u91dc\u65a7\u812f\u8151\u5e9c\u8150\u8d74\u526f\u8986\u8d4b\u590d\u5085\u4ed8\u961c\u7236\u8179\u8d1f\u5bcc\u8ba3\u9644\u5987\u7f1a\u5490\u5310\u51eb\u90db\u8299\u82fb\u832f\u83a9\u83d4\u544b\u5e5e\u6ecf\u8274\u5b5a\u9a78\u7ec2\u6874\u8d59\u9efb\u9efc\u7f58\u7a03\u99a5\u864d\u86a8\u8709\u8760\u876e\u9eb8\u8dba\u8dd7\u9cc6', 'ga': '\u5676\u560e\u86e4\u5c2c\u5477\u5c15\u5c1c\u65ee\u9486', 'gai': '\u8be5\u6539\u6982\u9499\u76d6\u6e89\u4e10\u9654\u5793\u6224\u8d45\u80f2', 'gan': '\u5e72\u7518\u6746\u67d1\u7aff\u809d\u8d76\u611f\u79c6\u6562\u8d63\u5769\u82f7\u5c34\u64c0\u6cd4\u6de6\u6f89\u7ec0\u6a44\u65f0\u77f8\u75b3\u9150', 'gang': '\u5188\u521a\u94a2\u7f38\u809b\u7eb2\u5c97\u6e2f\u6206\u7f61\u9883\u7b7b', 'gong': '\u6760\u5de5\u653b\u529f\u606d\u9f9a\u4f9b\u8eac\u516c\u5bab\u5f13\u5de9\u6c5e\u62f1\u8d21\u5171\u857b\u5efe\u54a3\u73d9\u80b1\u86a3\u86e9\u89e5', 'gao': '\u7bd9\u768b\u9ad8\u818f\u7f94\u7cd5\u641e\u9550\u7a3f\u544a\u777e\u8bf0\u90dc\u84bf\u85c1\u7f1f\u69d4\u69c1\u6772\u9506', 'ge': '\u54e5\u6b4c\u6401\u6208\u9e3d\u80f3\u7599\u5272\u9769\u845b\u683c\u9601\u9694\u94ec\u4e2a\u5404\u9b32\u4ee1\u54ff\u5865\u55dd\u7ea5\u643f\u8188\u784c\u94ea\u9549\u88bc\u988c\u867c\u8238\u9abc\u9ac2', 'gei': '\u7ed9', 'gen': '\u6839\u8ddf\u4e98\u831b\u54cf\u826e', 'geng': '\u8015\u66f4\u5e9a\u7fb9\u57c2\u803f\u6897\u54fd\u8d53\u9ca0', 'gou': '\u94a9\u52fe\u6c9f\u82df\u72d7\u57a2\u6784\u8d2d\u591f\u4f5d\u8bdf\u5ca3\u9058\u5abe\u7f11\u89cf\u5f40\u9e32\u7b31\u7bdd\u97b2', 'gu': '\u8f9c\u83c7\u5495\u7b8d\u4f30\u6cbd\u5b64\u59d1\u9f13\u53e4\u86ca\u9aa8\u8c37\u80a1\u6545\u987e\u56fa\u96c7\u560f\u8bc2\u83f0\u54cc\u5d2e\u6c69\u688f\u8f71\u726f\u727f\u80cd\u81cc\u6bc2\u77bd\u7f5f\u94b4\u9522\u74e0\u9e2a\u9e44\u75fc\u86c4\u9164\u89da\u9cb4\u9ab0\u9e58', 'gua': '\u522e\u74dc\u5250\u5be1\u6302\u8902\u5366\u8bd6\u5471\u681d\u9e39', 'guai': '\u4e56\u62d0\u602a\u54d9', 'guan': '\u68fa\u5173\u5b98\u51a0\u89c2\u7ba1\u9986\u7f50\u60ef\u704c\u8d2f\u500c\u839e\u63bc\u6dab\u76e5\u9e73\u9ccf', 'guang': '\u5149\u5e7f\u901b\u72b7\u6844\u80f1\u7592', 'gui': '\u7470\u89c4\u572d\u7845\u5f52\u9f9f\u95fa\u8f68\u9b3c\u8be1\u7678\u6842\u67dc\u8dea\u8d35\u523d\u5326\u523f\u5e8b\u5b84\u59ab\u6867\u7085\u6677\u7688\u7c0b\u9c91\u9cdc', 'gun': '\u8f8a\u6eda\u68cd\u4e28\u886e\u7ef2\u78d9\u9ca7', 'guo': '\u9505\u90ed\u56fd\u679c\u88f9\u8fc7\u9998\u8803\u57da\u63b4\u5459\u56d7\u5e3c\u5d1e\u7313\u6901\u8662\u951e\u8052\u872e\u873e\u8748', 'ha': '\u54c8', 'hai': '\u9ab8\u5b69\u6d77\u6c26\u4ea5\u5bb3\u9a87\u54b4\u55e8\u988f\u91a2', 'han': '\u9163\u61a8\u90af\u97e9\u542b\u6db5\u5bd2\u51fd\u558a\u7f55\u7ff0\u64bc\u634d\u65f1\u61be\u608d\u710a\u6c57\u6c49\u9097\u83e1\u6496\u961a\u701a\u6657\u7113\u9894\u86b6\u9f3e', 'hen': '\u592f\u75d5\u5f88\u72e0\u6068', 'hang': '\u676d\u822a\u6c86\u7ed7\u73e9\u6841', 'hao': '\u58d5\u568e\u8c6a\u6beb\u90dd\u597d\u8017\u53f7\u6d69\u8585\u55e5\u5686\u6fe0\u704f\u660a\u7693\u98a2\u869d', 'he': '\u5475\u559d\u8377\u83cf\u6838\u79be\u548c\u4f55\u5408\u76d2\u8c89\u9602\u6cb3\u6db8\u8d6b\u8910\u9e64\u8d3a\u8bc3\u52be\u58d1\u85ff\u55d1\u55ec\u9616\u76cd\u86b5\u7fee', 'hei': '\u563f\u9ed1', 'heng': '\u54fc\u4ea8\u6a2a\u8861\u6052\u8a07\u8605', 'hong': '\u8f70\u54c4\u70d8\u8679\u9e3f\u6d2a\u5b8f\u5f18\u7ea2\u9ec9\u8ba7\u836d\u85a8\u95f3\u6cd3', 'hou': '\u5589\u4faf\u7334\u543c\u539a\u5019\u540e\u5820\u5f8c\u9005\u760a\u7bcc\u7cc7\u9c8e\u9aba', 'hu': '\u547c\u4e4e\u5ffd\u745a\u58f6\u846b\u80e1\u8774\u72d0\u7cca\u6e56\u5f27\u864e\u552c\u62a4\u4e92\u6caa\u6237\u51b1\u553f\u56eb\u5cb5\u7322\u6019\u60da\u6d52\u6ef9\u7425\u69f2\u8f77\u89f3\u70c0\u7173\u623d\u6248\u795c\u9e55\u9e71\u7b0f\u9190\u659b', 'hua': '\u82b1\u54d7\u534e\u733e\u6ed1\u753b\u5212\u5316\u8bdd\u5290\u6d4d\u9a85\u6866\u94e7\u7a1e', 'huai': '\u69d0\u5f8a\u6000\u6dee\u574f\u8fd8\u8e1d', 'huan': '\u6b22\u73af\u6853\u7f13\u6362\u60a3\u5524\u75ea\u8c62\u7115\u6da3\u5ba6\u5e7b\u90c7\u5942\u57b8\u64d0\u571c\u6d39\u6d63\u6f36\u5bf0\u902d\u7f33\u953e\u9ca9\u9b1f', 'huang': '\u8352\u614c\u9ec4\u78fa\u8757\u7c27\u7687\u51f0\u60f6\u714c\u6643\u5e4c\u604d\u8c0e\u968d\u5fa8\u6e5f\u6f62\u9051\u749c\u8093\u7640\u87e5\u7bc1\u9cc7', 'hui': '\u7070\u6325\u8f89\u5fbd\u6062\u86d4\u56de\u6bc1\u6094\u6167\u5349\u60e0\u6666\u8d3f\u79fd\u4f1a\u70e9\u6c47\u8bb3\u8bf2\u7ed8\u8bd9\u8334\u835f\u8559\u54d5\u5599\u96b3\u6d04\u5f57\u7f0b\u73f2\u6656\u605a\u867a\u87ea\u9ebe', 'hun': '\u8364\u660f\u5a5a\u9b42\u6d51\u6df7\u8be8\u9984\u960d\u6eb7\u7f17', 'huo': '\u8c41\u6d3b\u4f19\u706b\u83b7\u6216\u60d1\u970d\u8d27\u7978\u6509\u56af\u5925\u94ac\u952a\u956c\u8020\u8816', 'ji': '\u51fb\u573e\u57fa\u673a\u7578\u7a3d\u79ef\u7b95\u808c\u9965\u8ff9\u6fc0\u8ba5\u9e21\u59ec\u7ee9\u7f09\u5409\u6781\u68d8\u8f91\u7c4d\u96c6\u53ca\u6025\u75be\u6c72\u5373\u5ac9\u7ea7\u6324\u51e0\u810a\u5df1\u84df\u6280\u5180\u5b63\u4f0e\u796d\u5242\u60b8\u6d4e\u5bc4\u5bc2\u8ba1\u8bb0\u65e2\u5fcc\u9645\u5993\u7ee7\u7eaa\u5c45\u4e0c\u4e69\u525e\u4f76\u4f74\u8114\u58bc\u82a8\u82b0\u8401\u84ba\u857a\u638e\u53fd\u54ad\u54dc\u5527\u5c8c\u5d74\u6d0e\u5f50\u5c50\u9aa5\u757f\u7391\u696b\u6b9b\u621f\u6222\u8d4d\u89ca\u7284\u9f51\u77f6\u7f81\u5d47\u7a37\u7620\u7635\u866e\u7b08\u7b04\u66a8\u8dfb\u8dfd\u9701\u9c9a\u9cab\u9afb\u9e82', 'jia': '\u5609\u67b7\u5939\u4f73\u5bb6\u52a0\u835a\u988a\u8d3e\u7532\u94be\u5047\u7a3c\u4ef7\u67b6\u9a7e\u5ac1\u4f3d\u90cf\u62ee\u5cac\u6d43\u8fe6\u73c8\u621b\u80db\u605d\u94d7\u9553\u75c2\u86f1\u7b33\u8888\u8dcf', 'jian': '\u6b7c\u76d1\u575a\u5c16\u7b3a\u95f4\u714e\u517c\u80a9\u8270\u5978\u7f04\u8327\u68c0\u67ec\u78b1\u7877\u62e3\u6361\u7b80\u4fed\u526a\u51cf\u8350\u69db\u9274\u8df5\u8d31\u89c1\u952e\u7bad\u4ef6\u5065\u8230\u5251\u996f\u6e10\u6e85\u6da7\u5efa\u50ed\u8c0f\u8c2b\u83c5\u84b9\u641b\u56dd\u6e54\u8e47\u8b07\u7f23\u67a7\u67d9\u6957\u620b\u622c\u726e\u728d\u6bfd\u8171\u7751\u950f\u9e63\u88e5\u7b15\u7bb4\u7fe6\u8dbc\u8e3a\u9ca3\u97af', 'jiang': '\u50f5\u59dc\u5c06\u6d46\u6c5f\u7586\u848b\u6868\u5956\u8bb2\u5320\u9171\u964d\u8333\u6d1a\u7edb\u7f30\u729f\u7913\u8029\u7ce8\u8c47', 'jiao': '\u8549\u6912\u7901\u7126\u80f6\u4ea4\u90ca\u6d47\u9a84\u5a07\u56bc\u6405\u94f0\u77eb\u4fa5\u811a\u72e1\u89d2\u997a\u7f34\u7ede\u527f\u6559\u9175\u8f7f\u8f83\u53eb\u4f7c\u50ec\u832d\u6322\u564d\u5ce4\u5fbc\u59e3\u7e9f\u656b\u768e\u9e6a\u86df\u91ae\u8de4\u9c9b', 'jie': '\u7a96\u63ed\u63a5\u7686\u79f8\u8857\u9636\u622a\u52ab\u8282\u6854\u6770\u6377\u776b\u7aed\u6d01\u7ed3\u89e3\u59d0\u6212\u85c9\u82a5\u754c\u501f\u4ecb\u75a5\u8beb\u5c4a\u5048\u8ba6\u8bd8\u5588\u55df\u736c\u5a55\u5b51\u6840\u7352\u78a3\u9534\u7596\u88b7\u9889\u86a7\u7faf\u9c92\u9ab1\u9aeb', 'jin': '\u5dfe\u7b4b\u65a4\u91d1\u4eca\u6d25\u895f\u7d27\u9526\u4ec5\u8c28\u8fdb\u9773\u664b\u7981\u8fd1\u70ec\u6d78\u5c3d\u537a\u8369\u5807\u5664\u9991\u5ed1\u5997\u7f19\u747e\u69ff\u8d46\u89d0\u9485\u9513\u887f\u77dc', 'jing': '\u52b2\u8346\u5162\u830e\u775b\u6676\u9cb8\u4eac\u60ca\u7cbe\u7cb3\u7ecf\u4e95\u8b66\u666f\u9888\u9759\u5883\u656c\u955c\u5f84\u75c9\u9756\u7adf\u7ade\u51c0\u522d\u5106\u9631\u83c1\u734d\u61ac\u6cfe\u8ff3\u5f2a\u5a67\u80bc\u80eb\u8148\u65cc', 'jiong': '\u70af\u7a98\u5182\u8fe5\u6243', 'jiu': '\u63ea\u7a76\u7ea0\u7396\u97ed\u4e45\u7078\u4e5d\u9152\u53a9\u6551\u65e7\u81fc\u8205\u548e\u5c31\u759a\u50e6\u557e\u9604\u67e9\u6855\u9e6b\u8d73\u9b0f', 'ju': '\u97a0\u62d8\u72d9\u75bd\u9a79\u83ca\u5c40\u5480\u77e9\u4e3e\u6cae\u805a\u62d2\u636e\u5de8\u5177\u8ddd\u8e1e\u952f\u4ff1\u53e5\u60e7\u70ac\u5267\u5028\u8bb5\u82e3\u82f4\u8392\u63ac\u907d\u5c66\u741a\u67b8\u6910\u6998\u6989\u6a58\u728b\u98d3\u949c\u9514\u7aad\u88fe\u8d84\u91b5\u8e3d\u9f83\u96ce\u97ab', 'juan': '\u6350\u9e43\u5a1f\u5026\u7737\u5377\u7ee2\u9104\u72f7\u6d93\u684a\u8832\u9529\u954c\u96bd', 'jue': '\u6485\u652b\u6289\u6398\u5014\u7235\u89c9\u51b3\u8bc0\u7edd\u53a5\u5282\u8c32\u77cd\u8568\u5658\u5d1b\u7357\u5b53\u73cf\u6877\u6a5b\u721d\u9562\u8e76\u89d6', 'jun': '\u5747\u83cc\u94a7\u519b\u541b\u5cfb\u4fca\u7ae3\u6d5a\u90e1\u9a8f\u6343\u72fb\u76b2\u7b60\u9e87', 'ka': '\u5580\u5496\u5361\u4f67\u5494\u80e9', 'ke': '\u54af\u5777\u82db\u67ef\u68f5\u78d5\u9897\u79d1\u58f3\u54b3\u53ef\u6e34\u514b\u523b\u5ba2\u8bfe\u5ca2\u606a\u6e98\u9a92\u7f02\u73c2\u8f72\u6c2a\u778c\u94b6\u75b4\u7aa0\u874c\u9ac1', 'kai': '\u5f00\u63e9\u6977\u51ef\u6168\u5240\u57b2\u8488\u5ffe\u607a\u94e0\u950e', 'kan': '\u520a\u582a\u52d8\u574e\u780d\u770b\u4f83\u51f5\u83b0\u83b6\u6221\u9f9b\u77b0', 'kang': '\u5eb7\u6177\u7ce0\u625b\u6297\u4ea2\u7095\u5751\u4f09\u95f6\u94aa', 'kao': '\u8003\u62f7\u70e4\u9760\u5c3b\u6832\u7292\u94d0', 'ken': '\u80af\u5543\u57a6\u6073\u57a0\u88c9\u9880', 'keng': '\u542d\u5fd0\u94ff', 'kong': '\u7a7a\u6050\u5b54\u63a7\u5025\u5d06\u7b9c', 'kou': '\u62a0\u53e3\u6263\u5bc7\u82a4\u853b\u53e9\u770d\u7b58', 'ku': '\u67af\u54ed\u7a9f\u82e6\u9177\u5e93\u88e4\u5233\u5800\u55be\u7ed4\u9ab7', 'kua': '\u5938\u57ae\u630e\u8de8\u80ef\u4f89', 'kuai': '\u5757\u7b77\u4fa9\u5feb\u84af\u90d0\u8489\u72ef\u810d', 'kuan': '\u5bbd\u6b3e\u9acb', 'kuang': '\u5321\u7b50\u72c2\u6846\u77ff\u7736\u65f7\u51b5\u8bd3\u8bf3\u909d\u5739\u593c\u54d0\u7ea9\u8d36', 'kui': '\u4e8f\u76d4\u5cbf\u7aa5\u8475\u594e\u9b41\u5080\u9988\u6127\u6e83\u9997\u532e\u5914\u9697\u63c6\u55b9\u559f\u609d\u6126\u9615\u9035\u668c\u777d\u8069\u8770\u7bd1\u81fe\u8dec', 'kun': '\u5764\u6606\u6346\u56f0\u6083\u9603\u7428\u951f\u918c\u9cb2\u9ae1', 'kuo': '\u62ec\u6269\u5ed3\u9614\u86de', 'la': '\u5783\u62c9\u5587\u8721\u814a\u8fa3\u5566\u524c\u647a\u908b\u65ef\u782c\u760c', 'lai': '\u83b1\u6765\u8d56\u5d03\u5f95\u6d9e\u6fd1\u8d49\u7750\u94fc\u765e\u7c41', 'lan': '\u84dd\u5a6a\u680f\u62e6\u7bee\u9611\u5170\u6f9c\u8c30\u63fd\u89c8\u61d2\u7f06\u70c2\u6ee5\u5549\u5c9a\u61d4\u6f24\u6984\u6593\u7f71\u9567\u8934', 'lang': '\u7405\u6994\u72fc\u5eca\u90ce\u6717\u6d6a\u83a8\u8497\u5577\u9606\u9512\u7a02\u8782', 'lao': '\u635e\u52b3\u7262\u8001\u4f6c\u59e5\u916a\u70d9\u6d9d\u5520\u5d02\u6833\u94d1\u94f9\u75e8\u91aa', 'le': '\u52d2\u4e50\u808b\u4ec2\u53fb\u561e\u6cd0\u9cd3', 'lei': '\u96f7\u956d\u857e\u78ca\u7d2f\u5121\u5792\u64c2\u7c7b\u6cea\u7fb8\u8bd4\u837d\u54a7\u6f2f\u5ad8\u7f27\u6a91\u8012\u9179', 'ling': '\u68f1\u51b7\u62ce\u73b2\u83f1\u96f6\u9f84\u94c3\u4f36\u7f9a\u51cc\u7075\u9675\u5cad\u9886\u53e6\u4ee4\u9143\u5844\u82d3\u5464\u56f9\u6ce0\u7eeb\u67c3\u68c2\u74f4\u8046\u86c9\u7fce\u9cae', 'leng': '\u695e\u6123', 'li': '\u5398\u68a8\u7281\u9ece\u7bf1\u72f8\u79bb\u6f13\u7406\u674e\u91cc\u9ca4\u793c\u8389\u8354\u540f\u6817\u4e3d\u5389\u52b1\u783e\u5386\u5229\u5088\u4f8b\u4fd0\u75e2\u7acb\u7c92\u6ca5\u96b6\u529b\u7483\u54e9\u4fea\u4fda\u90e6\u575c\u82c8\u8385\u84e0\u85dc\u6369\u5456\u5533\u55b1\u7301\u6ea7\u6fa7\u9026\u5a0c\u5ae0\u9a8a\u7f21\u73de\u67a5\u680e\u8f79\u623e\u783a\u8a48\u7f79\u9502\u9e42\u75a0\u75ac\u86ce\u870a\u8821\u7b20\u7be5\u7c9d\u91b4\u8dde\u96f3\u9ca1\u9ce2\u9ee7', 'lian': '\u4fe9\u8054\u83b2\u8fde\u9570\u5ec9\u601c\u6d9f\u5e18\u655b\u8138\u94fe\u604b\u70bc\u7ec3\u631b\u8539\u5941\u6f4b\u6fc2\u5a08\u740f\u695d\u6b93\u81c1\u81a6\u88e2\u880a\u9ca2', 'liang': '\u7cae\u51c9\u6881\u7cb1\u826f\u4e24\u8f86\u91cf\u667e\u4eae\u8c05\u589a\u690b\u8e09\u9753\u9b49', 'liao': '\u64a9\u804a\u50da\u7597\u71ce\u5be5\u8fbd\u6f66\u4e86\u6482\u9563\u5ed6\u6599\u84fc\u5c25\u5639\u7360\u5bee\u7f2d\u948c\u9e69\u8022', 'lie': '\u5217\u88c2\u70c8\u52a3\u730e\u51bd\u57d2\u6d0c\u8d94\u8e90\u9b23', 'lin': '\u7433\u6797\u78f7\u9716\u4e34\u90bb\u9cde\u6dcb\u51db\u8d41\u541d\u853a\u5d99\u5eea\u9074\u6aa9\u8f9a\u77b5\u7cbc\u8e8f\u9e9f', 'liu': '\u6e9c\u7409\u69b4\u786b\u998f\u7559\u5218\u7624\u6d41\u67f3\u516d\u62a1\u507b\u848c\u6cd6\u6d4f\u905b\u9a9d\u7efa\u65d2\u7198\u950d\u954f\u9e68\u938f', 'long': '\u9f99\u804b\u5499\u7b3c\u7abf\u9686\u5784\u62e2\u9647\u5f04\u5785\u830f\u6cf7\u73d1\u680a\u80e7\u783b\u7643', 'lou': '\u697c\u5a04\u6402\u7bd3\u6f0f\u964b\u55bd\u5d5d\u9542\u7618\u8027\u877c\u9ac5', 'lu': '\u82a6\u5362\u9885\u5e90\u7089\u63b3\u5364\u864f\u9c81\u9e93\u788c\u9732\u8def\u8d42\u9e7f\u6f5e\u7984\u5f55\u9646\u622e\u5786\u6445\u64b8\u565c\u6cf8\u6e0c\u6f09\u7490\u680c\u6a79\u8f73\u8f82\u8f98\u6c07\u80ea\u9565\u9e2c\u9e6d\u7c0f\u823b\u9c88', 'lv': '\u9a74\u5415\u94dd\u4fa3\u65c5\u5c65\u5c61\u7f15\u8651\u6c2f\u5f8b\u7387\u6ee4\u7eff\u634b\u95fe\u6988\u8182\u7a06\u891b', 'luan': '\u5ce6\u5b6a\u6ee6\u5375\u4e71\u683e\u9e3e\u92ae', 'lue': '\u63a0\u7565\u950a', 'lun': '\u8f6e\u4f26\u4ed1\u6ca6\u7eb6\u8bba\u56f5', 'luo': '\u841d\u87ba\u7f57\u903b\u9523\u7ba9\u9aa1\u88f8\u843d\u6d1b\u9a86\u7edc\u502e\u8366\u645e\u7321\u6cfa\u6924\u8136\u9559\u7630\u96d2', 'ma': '\u5988\u9ebb\u739b\u7801\u8682\u9a6c\u9a82\u561b\u5417\u551b\u72b8\u5b37\u6769\u9ebd', 'mai': '\u57cb\u4e70\u9ea6\u5356\u8fc8\u8109\u52a2\u836c\u54aa\u973e', 'man': '\u7792\u9992\u86ee\u6ee1\u8513\u66fc\u6162\u6f2b\u8c29\u5881\u5e54\u7f26\u71b3\u9558\u989f\u87a8\u9cd7\u9794', 'mang': '\u8292\u832b\u76f2\u5fd9\u83bd\u9099\u6f2d\u6726\u786d\u87d2', 'meng': '\u6c13\u840c\u8499\u6aac\u76df\u9530\u731b\u68a6\u5b5f\u52d0\u750d\u77a2\u61f5\u791e\u867b\u8722\u8813\u824b\u8268\u9efe', 'miao': '\u732b\u82d7\u63cf\u7784\u85d0\u79d2\u6e3a\u5e99\u5999\u55b5\u9088\u7f08\u7f2a\u676a\u6dfc\u7707\u9e4b\u8731', 'mao': '\u8305\u951a\u6bdb\u77db\u94c6\u536f\u8302\u5192\u5e3d\u8c8c\u8d38\u4f94\u88a4\u52d6\u8306\u5cc1\u7441\u6634\u7266\u8004\u65c4\u61cb\u7780\u86d1\u8765\u87ca\u9ae6', 'me': '\u4e48', 'mei': '\u73ab\u679a\u6885\u9176\u9709\u7164\u6ca1\u7709\u5a92\u9541\u6bcf\u7f8e\u6627\u5bd0\u59b9\u5a9a\u5776\u8393\u5d4b\u7338\u6d7c\u6e44\u6963\u9545\u9e5b\u8882\u9b45', 'men': '\u95e8\u95f7\u4eec\u626a\u739f\u7116\u61d1\u9494', 'mi': '\u772f\u919a\u9761\u7cdc\u8ff7\u8c1c\u5f25\u7c73\u79d8\u89c5\u6ccc\u871c\u5bc6\u5e42\u8288\u5196\u8c27\u863c\u5627\u7315\u736f\u6c68\u5b93\u5f2d\u8112\u6549\u7cf8\u7e3b\u9e8b', 'mian': '\u68c9\u7720\u7ef5\u5195\u514d\u52c9\u5a29\u7f05\u9762\u6c94\u6e4e\u817c\u7704', 'mie': '\u8511\u706d\u54a9\u881b\u7bfe', 'min': '\u6c11\u62bf\u76bf\u654f\u60af\u95fd\u82e0\u5cb7\u95f5\u6cef\u73c9', 'ming': '\u660e\u879f\u9e23\u94ed\u540d\u547d\u51a5\u8317\u6e9f\u669d\u7791\u9169', 'miu': '\u8c2c', 'mo': '\u6478\u6479\u8611\u6a21\u819c\u78e8\u6469\u9b54\u62b9\u672b\u83ab\u58a8\u9ed8\u6cab\u6f20\u5bde\u964c\u8c1f\u8309\u84e6\u998d\u5aeb\u9546\u79e3\u763c\u8031\u87c6\u8c8a\u8c98', 'mou': '\u8c0b\u725f\u67d0\u53b6\u54de\u5a7a\u7738\u936a', 'mu': '\u62c7\u7261\u4ea9\u59c6\u6bcd\u5893\u66ae\u5e55\u52df\u6155\u6728\u76ee\u7766\u7267\u7a46\u4eeb\u82dc\u5452\u6c90\u6bea\u94bc', 'na': '\u62ff\u54ea\u5450\u94a0\u90a3\u5a1c\u7eb3\u5185\u637a\u80ad\u954e\u8872\u7bac', 'nai': '\u6c16\u4e43\u5976\u8010\u5948\u9f10\u827f\u8418\u67f0', 'nan': '\u5357\u7537\u96be\u56ca\u5583\u56e1\u6960\u8169\u877b\u8d67', 'nao': '\u6320\u8111\u607c\u95f9\u5b6c\u57b4\u7331\u7459\u7847\u94d9\u86f2', 'ne': '\u6dd6\u5462\u8bb7', 'nei': '\u9981', 'nen': '\u5ae9\u80fd\u6798\u6041', 'ni': '\u59ae\u9713\u502a\u6ce5\u5c3c\u62df\u4f60\u533f\u817b\u9006\u6eba\u4f32\u576d\u730a\u6029\u6ee0\u6635\u65ce\u7962\u615d\u7768\u94cc\u9cb5', 'nian': '\u852b\u62c8\u5e74\u78be\u64b5\u637b\u5ff5\u5eff\u8f87\u9ecf\u9c87\u9cb6', 'niang': '\u5a18\u917f', 'niao': '\u9e1f\u5c3f\u8311\u5b32\u8132\u8885', 'nie': '\u634f\u8042\u5b7d\u556e\u954a\u954d\u6d85\u4e5c\u9667\u8616\u55eb\u8080\u989e\u81ec\u8e51', 'nin': '\u60a8\u67e0', 'ning': '\u72de\u51dd\u5b81\u62e7\u6cde\u4f5e\u84e5\u549b\u752f\u804d', 'niu': '\u725b\u626d\u94ae\u7ebd\u72c3\u5ff8\u599e\u86b4', 'nong': '\u8113\u6d53\u519c\u4fac', 'nu': '\u5974\u52aa\u6012\u5476\u5e11\u5f29\u80ec\u5b65\u9a7d', 'nv': '\u5973\u6067\u9495\u8844', 'nuan': '\u6696', 'nuenue': '\u8650', 'nue': '\u759f\u8c11', 'nuo': '\u632a\u61e6\u7cef\u8bfa\u50a9\u6426\u558f\u9518', 'ou': '\u54e6\u6b27\u9e25\u6bb4\u85d5\u5455\u5076\u6ca4\u6004\u74ef\u8026', 'pa': '\u556a\u8db4\u722c\u5e15\u6015\u7436\u8469\u7b62', 'pai': '\u62cd\u6392\u724c\u5f98\u6e43\u6d3e\u4ff3\u848e', 'pan': '\u6500\u6f58\u76d8\u78d0\u76fc\u7554\u5224\u53db\u723f\u6cee\u88a2\u897b\u87e0\u8e52', 'pang': '\u4e53\u5e9e\u65c1\u802a\u80d6\u6ec2\u9004', 'pao': '\u629b\u5486\u5228\u70ae\u888d\u8dd1\u6ce1\u530f\u72cd\u5e96\u812c\u75b1', 'pei': '\u5478\u80da\u57f9\u88f4\u8d54\u966a\u914d\u4f69\u6c9b\u638a\u8f94\u5e14\u6de0\u65c6\u952b\u9185\u9708', 'pen': '\u55b7\u76c6\u6e53', 'peng': '\u7830\u62a8\u70f9\u6f8e\u5f6d\u84ec\u68da\u787c\u7bf7\u81a8\u670b\u9e4f\u6367\u78b0\u576f\u580b\u562d\u6026\u87db', 'pi': '\u7812\u9739\u6279\u62ab\u5288\u7435\u6bd7\u5564\u813e\u75b2\u76ae\u5339\u75de\u50fb\u5c41\u8b6c\u4e15\u9674\u90b3\u90eb\u572e\u9f19\u64d7\u567c\u5e80\u5ab2\u7eb0\u6787\u7513\u7765\u7f74\u94cd\u75e6\u7656\u758b\u868d\u8c94', 'pian': '\u7bc7\u504f\u7247\u9a97\u8c1d\u9a88\u728f\u80fc\u890a\u7fe9\u8e41', 'piao': '\u98d8\u6f02\u74e2\u7968\u527d\u560c\u5ad6\u7f25\u6b8d\u779f\u87b5', 'pie': '\u6487\u77a5\u4e3f\u82e4\u6c15', 'pin': '\u62fc\u9891\u8d2b\u54c1\u8058\u62da\u59d8\u5ad4\u6980\u725d\u98a6', 'ping': '\u4e52\u576a\u82f9\u840d\u5e73\u51ed\u74f6\u8bc4\u5c4f\u4fdc\u5a09\u67b0\u9c86', 'po': '\u5761\u6cfc\u9887\u5a46\u7834\u9b44\u8feb\u7c95\u53f5\u9131\u6ea5\u73c0\u948b\u94b7\u76a4\u7b38', 'pou': '\u5256\u88d2\u8e23', 'pu': '\u6251\u94fa\u4ec6\u8386\u8461\u83e9\u84b2\u57d4\u6734\u5703\u666e\u6d66\u8c31\u66dd\u7011\u530d\u5657\u6fee\u749e\u6c06\u9564\u9568\u8e7c', 'qi': '\u671f\u6b3a\u6816\u621a\u59bb\u4e03\u51c4\u6f06\u67d2\u6c8f\u5176\u68cb\u5947\u6b67\u7566\u5d0e\u8110\u9f50\u65d7\u7948\u7941\u9a91\u8d77\u5c82\u4e5e\u4f01\u542f\u5951\u780c\u5668\u6c14\u8fc4\u5f03\u6c7d\u6ce3\u8bab\u4e9f\u4e93\u573b\u8291\u840b\u847a\u5601\u5c7a\u5c90\u6c54\u6dc7\u9a90\u7eee\u742a\u7426\u675e\u6864\u69ed\u6b39\u797a\u61a9\u789b\u86f4\u871e\u7da6\u7dae\u8dbf\u8e4a\u9ccd\u9e92', 'qia': '\u6390\u6070\u6d3d\u845c', 'qian': '\u7275\u6266\u948e\u94c5\u5343\u8fc1\u7b7e\u4edf\u8c26\u4e7e\u9ed4\u94b1\u94b3\u524d\u6f5c\u9063\u6d45\u8c34\u5811\u5d4c\u6b20\u6b49\u4f65\u9621\u828a\u82a1\u8368\u63ae\u5c8d\u60ad\u614a\u9a9e\u6434\u8930\u7f31\u6920\u80b7\u6106\u94a4\u8654\u7b9d', 'qiang': '\u67aa\u545b\u8154\u7f8c\u5899\u8537\u5f3a\u62a2\u5af1\u6a2f\u6217\u709d\u9516\u9535\u956a\u8941\u8723\u7f9f\u8deb\u8dc4', 'qiao': '\u6a47\u9539\u6572\u6084\u6865\u77a7\u4e54\u4fa8\u5de7\u9798\u64ac\u7fd8\u5ced\u4fcf\u7a8d\u5281\u8bee\u8c2f\u835e\u6100\u6194\u7f32\u6a35\u6bf3\u7857\u8df7\u9792', 'qie': '\u5207\u8304\u4e14\u602f\u7a83\u90c4\u553c\u60ec\u59be\u6308\u9532\u7ba7', 'qin': '\u94a6\u4fb5\u4eb2\u79e6\u7434\u52e4\u82b9\u64d2\u79bd\u5bdd\u6c81\u82a9\u84c1\u8572\u63ff\u5423\u55ea\u5659\u6eb1\u6a8e\u8793\u887e', 'qing': '\u9752\u8f7b\u6c22\u503e\u537f\u6e05\u64ce\u6674\u6c30\u60c5\u9877\u8bf7\u5e86\u5029\u82d8\u570a\u6aa0\u78ec\u873b\u7f44\u7b90\u8b26\u9cad\u9ee5', 'qiong': '\u743c\u7a77\u909b\u8315\u7a79\u7b47\u928e', 'qiu': '\u79cb\u4e18\u90b1\u7403\u6c42\u56da\u914b\u6cc5\u4fc5\u6c3d\u5def\u827d\u72b0\u6e6b\u9011\u9052\u6978\u8d47\u9e20\u866c\u86af\u8764\u88d8\u7cd7\u9cc5\u9f3d', 'qu': '\u8d8b\u533a\u86c6\u66f2\u8eaf\u5c48\u9a71\u6e20\u53d6\u5a36\u9f8b\u8da3\u53bb\u8bce\u52ac\u8556\u8627\u5c96\u8862\u9612\u74a9\u89d1\u6c0d\u795b\u78f2\u766f\u86d0\u883c\u9eb4\u77bf\u9ee2', 'quan': '\u5708\u98a7\u6743\u919b\u6cc9\u5168\u75ca\u62f3\u72ac\u5238\u529d\u8be0\u8343\u737e\u609b\u7efb\u8f81\u754e\u94e8\u8737\u7b4c\u9b08', 'que': '\u7f3a\u7094\u7638\u5374\u9e4a\u69b7\u786e\u96c0\u9619\u60ab', 'qun': '\u88d9\u7fa4\u9021', 'ran': '\u7136\u71c3\u5189\u67d3\u82d2\u9aef', 'rang': '\u74e4\u58e4\u6518\u56b7\u8ba9\u79b3\u7a70', 'rao': '\u9976\u6270\u7ed5\u835b\u5a06\u6861', 'ruo': '\u60f9\u82e5\u5f31', 're': '\u70ed\u504c', 'ren': '\u58ec\u4ec1\u4eba\u5fcd\u97e7\u4efb\u8ba4\u5203\u598a\u7eab\u4ede\u834f\u845a\u996a\u8f6b\u7a14\u887d', 'reng': '\u6254\u4ecd', 'ri': '\u65e5', 'rong': '\u620e\u8338\u84c9\u8363\u878d\u7194\u6eb6\u5bb9\u7ed2\u5197\u5d58\u72e8\u7f1b\u6995\u877e', 'rou': '\u63c9\u67d4\u8089\u7cc5\u8e42\u97a3', 'ru': '\u8339\u8815\u5112\u5b7a\u5982\u8fb1\u4e73\u6c5d\u5165\u8925\u84d0\u85b7\u5685\u6d33\u6ebd\u6fe1\u94f7\u8966\u98a5', 'ruan': '\u8f6f\u962e\u670a', 'rui': '\u854a\u745e\u9510\u82ae\u8564\u777f\u868b', 'run': '\u95f0\u6da6', 'sa': '\u6492\u6d12\u8428\u5345\u4ee8\u6332\u98d2', 'sai': '\u816e\u9cc3\u585e\u8d5b\u567b', 'san': '\u4e09\u53c1\u4f1e\u6563\u5f61\u9993\u6c35\u6bf5\u7cc1\u9730', 'sang': '\u6851\u55d3\u4e27\u6421\u78c9\u98a1', 'sao': '\u6414\u9a9a\u626b\u5ac2\u57fd\u81ca\u7619\u9ccb', 'se': '\u745f\u8272\u6da9\u556c\u94e9\u94ef\u7a51', 'sen': '\u68ee', 'seng': '\u50e7', 'sha': '\u838e\u7802\u6740\u5239\u6c99\u7eb1\u50bb\u5565\u715e\u810e\u6b43\u75e7\u88df\u970e\u9ca8', 'shai': '\u7b5b\u6652\u917e', 'shan': '\u73ca\u82eb\u6749\u5c71\u5220\u717d\u886b\u95ea\u9655\u64c5\u8d61\u81b3\u5584\u6c55\u6247\u7f2e\u5261\u8baa\u912f\u57cf\u829f\u6f78\u59d7\u9a9f\u81bb\u9490\u759d\u87ee\u8222\u8dda\u9cdd', 'shang': '\u5892\u4f24\u5546\u8d4f\u664c\u4e0a\u5c1a\u88f3\u57a7\u7ef1\u6b87\u71b5\u89de', 'shao': '\u68a2\u634e\u7a0d\u70e7\u828d\u52fa\u97f6\u5c11\u54e8\u90b5\u7ecd\u52ad\u82d5\u6f72\u86f8\u7b24\u7b72\u8244', 'she': '\u5962\u8d4a\u86c7\u820c\u820d\u8d66\u6444\u5c04\u6151\u6d89\u793e\u8bbe\u538d\u4f58\u731e\u7572\u9e9d', 'shen': '\u7837\u7533\u547b\u4f38\u8eab\u6df1\u5a20\u7ec5\u795e\u6c88\u5ba1\u5a76\u751a\u80be\u614e\u6e17\u8bdc\u8c02\u5432\u54c2\u6e16\u6939\u77e7\u8703', 'sheng': '\u58f0\u751f\u7525\u7272\u5347\u7ef3\u7701\u76db\u5269\u80dc\u5723\u4e1e\u6e11\u5ab5\u771a\u7b19', 'shi': '\u5e08\u5931\u72ee\u65bd\u6e7f\u8bd7\u5c38\u8671\u5341\u77f3\u62fe\u65f6\u4ec0\u98df\u8680\u5b9e\u8bc6\u53f2\u77e2\u4f7f\u5c4e\u9a76\u59cb\u5f0f\u793a\u58eb\u4e16\u67ff\u4e8b\u62ed\u8a93\u901d\u52bf\u662f\u55dc\u566c\u9002\u4ed5\u4f8d\u91ca\u9970\u6c0f\u5e02\u6043\u5ba4\u89c6\u8bd5\u8c25\u57d8\u83b3\u84cd\u5f11\u5511\u9963\u8f7c\u8006\u8d33\u70bb\u793b\u94c8\u94ca\u87ab\u8210\u7b6e\u8c55\u9ca5\u9cba', 'shou': '\u6536\u624b\u9996\u5b88\u5bff\u6388\u552e\u53d7\u7626\u517d\u624c\u72e9\u7ef6\u824f', 'shu': '\u852c\u67a2\u68b3\u6b8a\u6292\u8f93\u53d4\u8212\u6dd1\u758f\u4e66\u8d4e\u5b70\u719f\u85af\u6691\u66d9\u7f72\u8700\u9ecd\u9f20\u5c5e\u672f\u8ff0\u6811\u675f\u620d\u7ad6\u5885\u5eb6\u6570\u6f31\u6055\u500f\u587e\u83fd\u5fc4\u6cad\u6d91\u6f8d\u59dd\u7ebe\u6bf9\u8167\u6bb3\u956f\u79eb\u9e6c', 'shua': '\u5237\u800d\u5530\u6dae', 'shuai': '\u6454\u8870\u7529\u5e05\u87c0', 'shuan': '\u6813\u62f4\u95e9', 'shuang': '\u971c\u53cc\u723d\u5b40', 'shui': '\u8c01\u6c34\u7761\u7a0e', 'shun': '\u542e\u77ac\u987a\u821c\u6042', 'shuo': '\u8bf4\u7855\u6714\u70c1\u84b4\u6420\u55cd\u6fef\u5981\u69ca\u94c4', 'si': '\u65af\u6495\u5636\u601d\u79c1\u53f8\u4e1d\u6b7b\u8086\u5bfa\u55e3\u56db\u4f3a\u4f3c\u9972\u5df3\u53ae\u4fdf\u5155\u83e5\u549d\u6c5c\u6cd7\u6f8c\u59d2\u9a77\u7f0c\u7940\u7960\u9536\u9e36\u801c\u86f3\u7b25', 'song': '\u677e\u8038\u6002\u9882\u9001\u5b8b\u8bbc\u8bf5\u51c7\u83d8\u5d27\u5d69\u5fea\u609a\u6dde\u7ae6', 'sou': '\u641c\u8258\u64de\u55fd\u53df\u55d6\u55fe\u998a\u6eb2\u98d5\u778d\u953c\u878b', 'su': '\u82cf\u9165\u4fd7\u7d20\u901f\u7c9f\u50f3\u5851\u6eaf\u5bbf\u8bc9\u8083\u5919\u8c21\u850c\u55c9\u612b\u7c0c\u89eb\u7a23', 'suan': '\u9178\u849c\u7b97', 'sui': '\u867d\u968b\u968f\u7ee5\u9ad3\u788e\u5c81\u7a57\u9042\u96a7\u795f\u84d1\u51ab\u8c07\u6fc9\u9083\u71e7\u772d\u7762', 'sun': '\u5b59\u635f\u7b0b\u836a\u72f2\u98e7\u69ab\u8de3\u96bc', 'suo': '\u68ad\u5506\u7f29\u7410\u7d22\u9501\u6240\u5522\u55e6\u5a11\u686b\u7743\u7fa7', 'ta': '\u584c\u4ed6\u5b83\u5979\u5854\u736d\u631e\u8e4b\u8e0f\u95fc\u6ebb\u9062\u69bb\u6c93', 'tai': '\u80ce\u82d4\u62ac\u53f0\u6cf0\u915e\u592a\u6001\u6c70\u90b0\u85b9\u80bd\u70b1\u949b\u8dc6\u9c90', 'tan': '\u574d\u644a\u8d2a\u762b\u6ee9\u575b\u6a80\u75f0\u6f6d\u8c2d\u8c08\u5766\u6bef\u8892\u78b3\u63a2\u53f9\u70ad\u90ef\u8548\u6619\u94bd\u952c\u8983', 'tang': '\u6c64\u5858\u642a\u5802\u68e0\u819b\u5510\u7cd6\u50a5\u9967\u6e8f\u746d\u94f4\u9557\u8025\u8797\u87b3\u7fb0\u91a3', 'thang': '\u5018\u8eba\u6dcc', 'theng': '\u8d9f\u70eb', 'tao': '\u638f\u6d9b\u6ed4\u7ee6\u8404\u6843\u9003\u6dd8\u9676\u8ba8\u5957\u6311\u9f17\u5555\u97ec\u9955', 'te': '\u7279', 'teng': '\u85e4\u817e\u75bc\u8a8a\u6ed5', 'ti': '\u68af\u5254\u8e22\u9511\u63d0\u9898\u8e44\u557c\u4f53\u66ff\u568f\u60d5\u6d95\u5243\u5c49\u8351\u608c\u9016\u7ee8\u7f07\u9e48\u88fc\u918d', 'tian': '\u5929\u6dfb\u586b\u7530\u751c\u606c\u8214\u8146\u63ad\u5fdd\u9617\u6b84\u754b\u94bf\u86ba', 'tiao': '\u6761\u8fe2\u773a\u8df3\u4f7b\u7967\u94eb\u7a95\u9f86\u9ca6', 'tie': '\u8d34\u94c1\u5e16\u841c\u992e', 'ting': '\u5385\u542c\u70c3\u6c40\u5ef7\u505c\u4ead\u5ead\u633a\u8247\u839b\u8476\u5a77\u6883\u8713\u9706', 'tong': '\u901a\u6850\u916e\u77b3\u540c\u94dc\u5f64\u7ae5\u6876\u6345\u7b52\u7edf\u75db\u4f5f\u50ee\u4edd\u833c\u55f5\u6078\u6f7c\u783c', 'tou': '\u5077\u6295\u5934\u900f\u4ea0', 'tu': '\u51f8\u79c3\u7a81\u56fe\u5f92\u9014\u6d82\u5c60\u571f\u5410\u5154\u580d\u837c\u83df\u948d\u9174', 'tuan': '\u6e4d\u56e2\u7583', 'tui': '\u63a8\u9893\u817f\u8715\u892a\u9000\u5fd2\u717a', 'tun': '\u541e\u5c6f\u81c0\u9968\u66be\u8c5a\u7a80', 'tuo': '\u62d6\u6258\u8131\u9e35\u9640\u9a6e\u9a7c\u692d\u59a5\u62d3\u553e\u4e47\u4f57\u5768\u5eb9\u6cb1\u67dd\u7823\u7ba8\u8204\u8dce\u9f0d', 'wa': '\u6316\u54c7\u86d9\u6d3c\u5a03\u74e6\u889c\u4f64\u5a32\u817d', 'wai': '\u6b6a\u5916', 'wan': '\u8c4c\u5f2f\u6e7e\u73a9\u987d\u4e38\u70f7\u5b8c\u7897\u633d\u665a\u7696\u60cb\u5b9b\u5a49\u4e07\u8155\u525c\u8284\u82cb\u83c0\u7ea8\u7efe\u742c\u8118\u7579\u873f\u7ba2', 'wang': '\u6c6a\u738b\u4ea1\u6789\u7f51\u5f80\u65fa\u671b\u5fd8\u5984\u7f54\u5c22\u60d8\u8f8b\u9b4d', 'wei': '\u5a01\u5dcd\u5fae\u5371\u97e6\u8fdd\u6845\u56f4\u552f\u60df\u4e3a\u6f4d\u7ef4\u82c7\u840e\u59d4\u4f1f\u4f2a\u5c3e\u7eac\u672a\u851a\u5473\u754f\u80c3\u5582\u9b4f\u4f4d\u6e2d\u8c13\u5c09\u6170\u536b\u502d\u504e\u8bff\u9688\u8473\u8587\u5e0f\u5e37\u5d34\u5d6c\u7325\u732c\u95f1\u6ca9\u6d27\u6da0\u9036\u5a13\u73ae\u97ea\u8ece\u709c\u7168\u71a8\u75ff\u8249\u9c94', 'wen': '\u761f\u6e29\u868a\u6587\u95fb\u7eb9\u543b\u7a33\u7d0a\u95ee\u520e\u6120\u960c\u6c76\u74ba\u97eb\u6b81\u96ef', 'weng': '\u55e1\u7fc1\u74ee\u84ca\u8579', 'wo': '\u631d\u8717\u6da1\u7a9d\u6211\u65a1\u5367\u63e1\u6c83\u83b4\u5e44\u6e25\u674c\u809f\u9f8c', 'wu': '\u5deb\u545c\u94a8\u4e4c\u6c61\u8bec\u5c4b\u65e0\u829c\u68a7\u543e\u5434\u6bcb\u6b66\u4e94\u6342\u5348\u821e\u4f0d\u4fae\u575e\u620a\u96fe\u6664\u7269\u52ff\u52a1\u609f\u8bef\u5140\u4ef5\u9622\u90ac\u572c\u82b4\u5e91\u6003\u5fe4\u6d6f\u5be4\u8fd5\u59a9\u9a9b\u727e\u7110\u9e49\u9e5c\u8708\u92c8\u9f2f', 'xi': '\u6614\u7199\u6790\u897f\u7852\u77fd\u6670\u563b\u5438\u9521\u727a\u7a00\u606f\u5e0c\u6089\u819d\u5915\u60dc\u7184\u70ef\u6eaa\u6c50\u7280\u6a84\u88ad\u5e2d\u4e60\u5ab3\u559c\u94e3\u6d17\u7cfb\u9699\u620f\u7ec6\u50d6\u516e\u96b0\u90d7\u831c\u8478\u84f0\u595a\u550f\u5f99\u9969\u960b\u6d60\u6dc5\u5c63\u5b09\u73ba\u6a28\u66e6\u89cb\u6b37\u71b9\u798a\u79a7\u94b8\u7699\u7a78\u8725\u87cb\u823e\u7fb2\u7c9e\u7fd5\u91af\u9f37', 'xia': '\u778e\u867e\u5323\u971e\u8f96\u6687\u5ce1\u4fa0\u72ed\u4e0b\u53a6\u590f\u5413\u6380\u846d\u55c4\u72ce\u9050\u7455\u7856\u7615\u7f45\u9ee0', 'xian': '\u9528\u5148\u4ed9\u9c9c\u7ea4\u54b8\u8d24\u8854\u8237\u95f2\u6d8e\u5f26\u5acc\u663e\u9669\u73b0\u732e\u53bf\u817a\u9985\u7fa1\u5baa\u9677\u9650\u7ebf\u51bc\u85d3\u5c98\u7303\u66b9\u5a34\u6c19\u7946\u9e47\u75eb\u86ac\u7b45\u7c7c\u9170\u8df9', 'xiang': '\u76f8\u53a2\u9576\u9999\u7bb1\u8944\u6e58\u4e61\u7fd4\u7965\u8be6\u60f3\u54cd\u4eab\u9879\u5df7\u6a61\u50cf\u5411\u8c61\u8297\u8459\u9977\u5ea0\u9aa7\u7f03\u87d3\u9c9e\u98e8', 'xiao': '\u8427\u785d\u9704\u524a\u54ee\u56a3\u9500\u6d88\u5bb5\u6dc6\u6653\u5c0f\u5b5d\u6821\u8096\u5578\u7b11\u6548\u54d3\u54bb\u5d24\u6f47\u900d\u9a81\u7ee1\u67ad\u67b5\u7b71\u7bab\u9b48', 'xie': '\u6954\u4e9b\u6b47\u874e\u978b\u534f\u631f\u643a\u90aa\u659c\u80c1\u8c10\u5199\u68b0\u5378\u87f9\u61c8\u6cc4\u6cfb\u8c22\u5c51\u5055\u4eb5\u52f0\u71ee\u85a4\u64b7\u5ee8\u7023\u9082\u7ec1\u7f2c\u69ad\u698d\u6b59\u8e9e', 'xin': '\u85aa\u82af\u950c\u6b23\u8f9b\u65b0\u5ffb\u5fc3\u4fe1\u8845\u56df\u99a8\u8398\u6b46\u94fd\u946b', 'xing': '\u661f\u8165\u7329\u60fa\u5174\u5211\u578b\u5f62\u90a2\u884c\u9192\u5e78\u674f\u6027\u59d3\u9649\u8347\u8365\u64e4\u60bb\u784e', 'xiong': '\u5144\u51f6\u80f8\u5308\u6c79\u96c4\u718a\u828e', 'xiu': '\u4f11\u4fee\u7f9e\u673d\u55c5\u9508\u79c0\u8896\u7ee3\u83a0\u5cab\u9990\u5ea5\u9e3a\u8c85\u9af9', 'xu': '\u589f\u620c\u9700\u865a\u5618\u987b\u5f90\u8bb8\u84c4\u9157\u53d9\u65ed\u5e8f\u755c\u6064\u7d6e\u5a7f\u7eea\u7eed\u8bb4\u8be9\u5729\u84ff\u6035\u6d2b\u6e86\u987c\u6829\u7166\u7809\u76f1\u80e5\u7cc8\u9191', 'xuan': '\u8f69\u55a7\u5ba3\u60ac\u65cb\u7384\u9009\u7663\u7729\u7eda\u5107\u8c16\u8431\u63ce\u9994\u6ceb\u6d35\u6e32\u6f29\u7487\u6966\u6684\u70ab\u714a\u78b9\u94c9\u955f\u75c3', 'xue': '\u9774\u859b\u5b66\u7a74\u96ea\u8840\u5671\u6cf6\u9cd5', 'xun': '\u52cb\u718f\u5faa\u65ec\u8be2\u5bfb\u9a6f\u5de1\u6b89\u6c5b\u8bad\u8baf\u900a\u8fc5\u5dfd\u57d9\u8340\u85b0\u5ccb\u5f87\u6d54\u66db\u7aa8\u91ba\u9c9f', 'ya': '\u538b\u62bc\u9e26\u9e2d\u5440\u4e2b\u82bd\u7259\u869c\u5d16\u8859\u6daf\u96c5\u54d1\u4e9a\u8bb6\u4f22\u63e0\u5416\u5c88\u8fd3\u5a05\u740a\u6860\u6c29\u7811\u775a\u75d6', 'yan': '\u7109\u54bd\u9609\u70df\u6df9\u76d0\u4e25\u7814\u8712\u5ca9\u5ef6\u8a00\u989c\u960e\u708e\u6cbf\u5944\u63a9\u773c\u884d\u6f14\u8273\u5830\u71d5\u538c\u781a\u96c1\u5501\u5f66\u7130\u5bb4\u8c1a\u9a8c\u53a3\u9765\u8d5d\u4fe8\u5043\u5156\u8ba0\u8c33\u90fe\u9122\u82ab\u83f8\u5d26\u6079\u95eb\u960f\u6d07\u6e6e\u6edf\u598d\u5ae3\u7430\u664f\u80ed\u814c\u7131\u7f68\u7b75\u917d\u9b47\u990d\u9f39', 'yang': '\u6b83\u592e\u9e2f\u79e7\u6768\u626c\u4f6f\u75a1\u7f8a\u6d0b\u9633\u6c27\u4ef0\u75d2\u517b\u6837\u6f3e\u5f89\u600f\u6cf1\u7080\u70ca\u6059\u86d8\u9785', 'yao': '\u9080\u8170\u5996\u7476\u6447\u5c27\u9065\u7a91\u8c23\u59da\u54ac\u8200\u836f\u8981\u8000\u592d\u723b\u5406\u5d3e\u5fad\u7039\u5e7a\u73e7\u6773\u66dc\u80b4\u9e5e\u7a88\u7e47\u9cd0', 'ye': '\u6930\u564e\u8036\u7237\u91ce\u51b6\u4e5f\u9875\u6396\u4e1a\u53f6\u66f3\u814b\u591c\u6db2\u8c12\u90ba\u63f6\u9980\u6654\u70e8\u94d8', 'yi': '\u4e00\u58f9\u533b\u63d6\u94f1\u4f9d\u4f0a\u8863\u9890\u5937\u9057\u79fb\u4eea\u80f0\u7591\u6c82\u5b9c\u59e8\u5f5d\u6905\u8681\u501a\u5df2\u4e59\u77e3\u4ee5\u827a\u6291\u6613\u9091\u5c79\u4ebf\u5f79\u81c6\u9038\u8084\u75ab\u4ea6\u88d4\u610f\u6bc5\u5fc6\u4e49\u76ca\u6ea2\u8be3\u8bae\u8c0a\u8bd1\u5f02\u7ffc\u7fcc\u7ece\u5208\u5293\u4f7e\u8bd2\u572a\u572f\u57f8\u61ff\u82e1\u858f\u5f08\u5955\u6339\u5f0b\u5453\u54a6\u54bf\u566b\u5cc4\u5db7\u7317\u9974\u603f\u6021\u6092\u6f2a\u8fe4\u9a7f\u7f22\u6baa\u8d3b\u65d6\u71a0\u9487\u9552\u9571\u75cd\u7617\u7654\u7fca\u8864\u8734\u8223\u7fbf\u7ff3\u914f\u9edf', 'yin': '\u8335\u836b\u56e0\u6bb7\u97f3\u9634\u59fb\u541f\u94f6\u6deb\u5bc5\u996e\u5c39\u5f15\u9690\u5370\u80e4\u911e\u5819\u831a\u5591\u72fa\u5924\u6c24\u94df\u763e\u8693\u972a\u9f88', 'ying': '\u82f1\u6a31\u5a74\u9e70\u5e94\u7f28\u83b9\u8424\u8425\u8367\u8747\u8fce\u8d62\u76c8\u5f71\u9896\u786c\u6620\u5b34\u90e2\u8314\u83ba\u8426\u6484\u5624\u81ba\u6ee2\u6f46\u701b\u745b\u748e\u6979\u9e66\u763f\u988d\u7f42', 'yo': '\u54df\u5537', 'yong': '\u62e5\u4f63\u81c3\u75c8\u5eb8\u96cd\u8e0a\u86f9\u548f\u6cf3\u6d8c\u6c38\u607f\u52c7\u7528\u4fd1\u58c5\u5889\u6175\u9095\u955b\u752c\u9cd9\u9954', 'you': '\u5e7d\u4f18\u60a0\u5fe7\u5c24\u7531\u90ae\u94c0\u72b9\u6cb9\u6e38\u9149\u6709\u53cb\u53f3\u4f51\u91c9\u8bf1\u53c8\u5e7c\u5363\u6538\u4f91\u83b8\u5466\u56ff\u5ba5\u67da\u7337\u7256\u94d5\u75a3\u8763\u9c7f\u9edd\u9f2c', 'yu': '\u8fc2\u6de4\u4e8e\u76c2\u6986\u865e\u611a\u8206\u4f59\u4fde\u903e\u9c7c\u6109\u6e1d\u6e14\u9685\u4e88\u5a31\u96e8\u4e0e\u5c7f\u79b9\u5b87\u8bed\u7fbd\u7389\u57df\u828b\u90c1\u5401\u9047\u55bb\u5cea\u5fa1\u6108\u6b32\u72f1\u80b2\u8a89\u6d74\u5bd3\u88d5\u9884\u8c6b\u9a6d\u79ba\u6bd3\u4f1b\u4fe3\u8c00\u8c15\u8438\u84e3\u63c4\u5581\u5704\u5709\u5d5b\u72f3\u996b\u5ebe\u9608\u59aa\u59a4\u7ea1\u745c\u6631\u89ce\u8174\u6b24\u65bc\u715c\u71e0\u807f\u94b0\u9e46\u7610\u7600\u7ab3\u8753\u7afd\u8201\u96e9\u9f89', 'yuan': '\u9e33\u6e0a\u51a4\u5143\u57a3\u8881\u539f\u63f4\u8f95\u56ed\u5458\u5706\u733f\u6e90\u7f18\u8fdc\u82d1\u613f\u6028\u9662\u586c\u6c85\u5a9b\u7457\u6a7c\u7230\u7722\u9e22\u8788\u9f0b', 'yue': '\u66f0\u7ea6\u8d8a\u8dc3\u94a5\u5cb3\u7ca4\u6708\u60a6\u9605\u9fa0\u6a3e\u5216\u94ba', 'yun': '\u8018\u4e91\u90e7\u5300\u9668\u5141\u8fd0\u8574\u915d\u6655\u97f5\u5b55\u90d3\u82b8\u72c1\u607d\u7ead\u6b92\u6600\u6c32', 'za': '\u531d\u7838\u6742\u62f6\u5482', 'zai': '\u683d\u54c9\u707e\u5bb0\u8f7d\u518d\u5728\u54b1\u5d3d\u753e', 'zan': '\u6512\u6682\u8d5e\u74d2\u661d\u7c2a\u7ccc\u8db1\u933e', 'zang': '\u8d43\u810f\u846c\u5958\u6215\u81e7', 'zao': '\u906d\u7cdf\u51ff\u85fb\u67a3\u65e9\u6fa1\u86a4\u8e81\u566a\u9020\u7682\u7076\u71e5\u5523\u7f2b', 'ze': '\u8d23\u62e9\u5219\u6cfd\u4ec4\u8d5c\u5567\u8fee\u6603\u7b2e\u7ba6\u8234', 'zei': '\u8d3c', 'zen': '\u600e\u8c2e', 'zeng': '\u589e\u618e\u66fe\u8d60\u7f2f\u7511\u7f7e\u9503', 'zha': '\u624e\u55b3\u6e23\u672d\u8f67\u94e1\u95f8\u7728\u6805\u69a8\u548b\u4e4d\u70b8\u8bc8\u63f8\u5412\u54a4\u54f3\u600d\u781f\u75c4\u86b1\u9f44', 'zhai': '\u6458\u658b\u5b85\u7a84\u503a\u5be8\u7826', 'zhan': '\u77bb\u6be1\u8a79\u7c98\u6cbe\u76cf\u65a9\u8f97\u5d2d\u5c55\u8638\u6808\u5360\u6218\u7ad9\u6e5b\u7efd\u8c35\u640c\u65c3', 'zhang': '\u6a1f\u7ae0\u5f70\u6f33\u5f20\u638c\u6da8\u6756\u4e08\u5e10\u8d26\u4ed7\u80c0\u7634\u969c\u4ec9\u9123\u5e5b\u5d82\u7350\u5adc\u748b\u87d1', 'zhao': '\u62db\u662d\u627e\u6cbc\u8d75\u7167\u7f69\u5146\u8087\u53ec\u722a\u8bcf\u68f9\u948a\u7b0a', 'zhe': '\u906e\u6298\u54f2\u86f0\u8f99\u8005\u9517\u8517\u8fd9\u6d59\u8c2a\u966c\u67d8\u8f84\u78d4\u9e67\u891a\u8707\u8d6d', 'zhen': '\u73cd\u659f\u771f\u7504\u7827\u81fb\u8d1e\u9488\u4fa6\u6795\u75b9\u8bca\u9707\u632f\u9547\u9635\u7f1c\u6862\u699b\u8f78\u8d48\u80d7\u6715\u796f\u755b\u9e29', 'zheng': '\u84b8\u6323\u7741\u5f81\u72f0\u4e89\u6014\u6574\u62ef\u6b63\u653f\u5e27\u75c7\u90d1\u8bc1\u8be4\u5ce5\u94b2\u94ee\u7b5d', 'zhi': '\u829d\u679d\u652f\u5431\u8718\u77e5\u80a2\u8102\u6c41\u4e4b\u7ec7\u804c\u76f4\u690d\u6b96\u6267\u503c\u4f84\u5740\u6307\u6b62\u8dbe\u53ea\u65e8\u7eb8\u5fd7\u631a\u63b7\u81f3\u81f4\u7f6e\u5e1c\u5cd9\u5236\u667a\u79e9\u7a1a\u8d28\u7099\u75d4\u6ede\u6cbb\u7a92\u536e\u965f\u90c5\u57f4\u82b7\u646d\u5e19\u5fee\u5f58\u54ab\u9a98\u6809\u67b3\u6800\u684e\u8f75\u8f7e\u6534\u8d3d\u81a3\u7949\u7957\u9ef9\u96c9\u9e37\u75e3\u86ed\u7d77\u916f\u8dd6\u8e2c\u8e2f\u8c78\u89ef', 'zhong': '\u4e2d\u76c5\u5fe0\u949f\u8877\u7ec8\u79cd\u80bf\u91cd\u4ef2\u4f17\u51a2\u953a\u87bd\u8202\u822f\u8e35', 'zhou': '\u821f\u5468\u5dde\u6d32\u8bcc\u7ca5\u8f74\u8098\u5e1a\u5492\u76b1\u5b99\u663c\u9aa4\u5544\u7740\u501c\u8bf9\u836e\u9b3b\u7ea3\u80c4\u78a1\u7c40\u8233\u914e\u9cb7', 'zhu': '\u73e0\u682a\u86db\u6731\u732a\u8bf8\u8bdb\u9010\u7af9\u70db\u716e\u62c4\u77a9\u5631\u4e3b\u8457\u67f1\u52a9\u86c0\u8d2e\u94f8\u7b51\u4f4f\u6ce8\u795d\u9a7b\u4f2b\u4f8f\u90be\u82ce\u8331\u6d19\u6e1a\u6f74\u9a7a\u677c\u69e0\u6a65\u70b7\u94e2\u75b0\u7603\u86b0\u7afa\u7bb8\u7fe5\u8e85\u9e88', 'zhua': '\u6293', 'zhuai': '\u62fd', 'zhuan': '\u4e13\u7816\u8f6c\u64b0\u8d5a\u7bc6\u629f\u556d\u989b', 'zhuang': '\u6869\u5e84\u88c5\u5986\u649e\u58ee\u72b6\u4e2c', 'zhui': '\u690e\u9525\u8ffd\u8d58\u5760\u7f00\u8411\u9a93\u7f12', 'zhun': '\u8c06\u51c6', 'zhuo': '\u6349\u62d9\u5353\u684c\u7422\u8301\u914c\u707c\u6d4a\u502c\u8bfc\u5ef4\u855e\u64e2\u555c\u6d5e\u6dbf\u6753\u712f\u799a\u65ab', 'zi': '\u5179\u54a8\u8d44\u59ff\u6ecb\u6dc4\u5b5c\u7d2b\u4ed4\u7c7d\u6ed3\u5b50\u81ea\u6e0d\u5b57\u8c18\u5d6b\u59ca\u5b73\u7f01\u6893\u8f8e\u8d40\u6063\u7726\u9531\u79ed\u8014\u7b2b\u7ca2\u89dc\u8a3e\u9cbb\u9aed', 'zong': '\u9b03\u68d5\u8e2a\u5b97\u7efc\u603b\u7eb5\u8159\u7cbd', 'zou': '\u90b9\u8d70\u594f\u63cd\u9139\u9cb0', 'zu': '\u79df\u8db3\u5352\u65cf\u7956\u8bc5\u963b\u7ec4\u4fce\u83f9\u5550\u5f82\u9a75\u8e74', 'zuan': '\u94bb\u7e82\u6525\u7f35', 'zui': '\u5634\u9189\u6700\u7f6a', 'zun': '\u5c0a\u9075\u6499\u6a3d\u9cdf', 'zuo': '\u6628\u5de6\u4f50\u67de\u505a\u4f5c\u5750\u5ea7\u961d\u963c\u80d9\u795a\u9162', 'cou': '\u85ae\u6971\u8f8f\u8160', 'nang': '\u652e\u54dd\u56d4\u9995\u66e9', 'o': '\u5594', 'dia': '\u55f2', 'chuai': '\u562c\u81aa\u8e39', 'cen': '\u5c91\u6d94', 'diu': '\u94e5', 'nou': '\u8028', 'fou': '\u7f36', 'bia': '\u9adf' }
  function getPinyin (ch) {
    for (var pinyin in pinyins) {
      if (pinyins[pinyin].indexOf(ch) !== -1) {
        return pinyin
      }
    }
  }
  return {
    toPinyin: function (chs) {
      var result
      var pinyin = chs
      var chExpr = /[\u4E00-\u9FA5]/gm
      while ((result = chExpr.exec(chs)) != null) {
        var ch = result[0]
        var charPinyin = getPinyin(ch)
        pinyin = pinyin.replace(result[0], charPinyin)
      }
      return pinyin
    },
    toCapitalize: function (word) {
      if (word.length > 0) {
        var wordFirst = word.substr(0, 1).toUpperCase()
        var wordExtra = word.substr(1, word.length)
        return wordFirst + wordExtra
      }
    },
    colors: {
      'a': '#52c7fe',
      'b': '#52c7fe',
      'c': '#52c7fe',
      'd': '#52c7fe',
      'e': '#52c7fe',
      'f': '#ffaf01',
      'g': '#ffaf01',
      'h': '#ffaf01',
      'i': '#ffaf01',
      'j': '#ffaf01',
      'k': '#3ae3eb',
      'l': '#3ae3eb',
      'm': '#3ae3eb',
      'n': '#3ae3eb',
      'o': '#3ae3eb',
      'p': '#ff6e36',
      'q': '#ff6e36',
      'r': '#ff6e36',
      's': '#ff6e36',
      't': '#ff6e36',
      'u': '#cf7af3',
      'v': '#cf7af3',
      'w': '#cf7af3',
      'x': '#cf7af3',
      'y': '#cf7af3',
      'z': '#4cd32e',
      '0': '#52c7fe',
      '1': '#52c7fe',
      '2': '#52c7fe',
      '3': '#52c7fe',
      '4': '#52c7fe',
      '5': '#ffaf01',
      '6': '#ffaf01',
      '7': '#ffaf01',
      '8': '#ffaf01',
      '9': '#ffaf01'
    }
  }
})()

window.String.prototype.toPinyin = function () {
  return PinyinHelper.toPinyin(this)
}
window.String.prototype.toCapitalize = function () {
  return PinyinHelper.toCapitalize(this)
}
window.String.prototype.toColor = function () {
  if (!/^[A-Za-z0-9]+$/.test(this)) return
  if (this.length > 1) return PinyinHelper.colors[this.substring(0, 1).toLowerCase()]
  return PinyinHelper.colors[this.toLowerCase()]
}


// Validator 表单验证 (require object.js)
var Validator = function () {
  /* ------------------------
  正则
  ------------------------ */
  var Patts = {
    required: /.+/,
    number: /^[+-]?(0|([1-9][0-9]*))(\.[0-9]+)?$/, // 数字
    decimal: /^[+-]?(0|([1-9][0-9]*))(\.[0-9]+)$/, // 小数
    digits: /\.[0-9]*/, // 精度
    integer: /^(0|([+-]?[1-9][0-9]*))$/, // 整数
    positive: /^(0|([1-9][0-9]*))(\.[0-9]+)?$/, // 正数
    negative: /^-(0|([1-9][0-9]*))(\.[0-9]+)?$/, // 负数
    positiveInteger: /^[1-9][0-9]*$/, // 正整数
    negativeInteger: /^-[1-9][0-9]*$/, // 负整数
    username: /^[\w]+$/, // 用户名
    password: /^[0-9_a-zA-Z-~!@#$]*$/, // 密码
    mail: /^(\w+@\w+\.[\.\w]+)$/, // 邮箱
    phone: /^([1][34578][0-9]{9})$/, // 手机
    chinese: /^[\u4E00-\u9FA5]*$/, // 中文
    specialchar: /^[。~!@#$%\^\+\*&\\\/\?\|:\.<>{}()';="]*$/ // 特殊字符
  }
  /* ------------------------
  验证策略类
  ------------------------ */
  var Rules = {
    // 为空
    required: function (value, errorMsg) {
      if (!Patts.required.test(value)) {
        return errorMsg
      }
    },
    // 数字
    number: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.number.test(value)) {
        return errorMsg
      }
    },
    // 小数
    decimal: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.decimal.test(value)) {
        return errorMsg
      }
    },
    // 小数位数
    maxDigits: function (value, max, errorMsg) {
      var match = value.match(Patts.digits)
      if (match && match[0] && match[0].length - 1 > max) {
        return errorMsg
      }
    },
    // 整数
    integer: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.integer.test(value)) {
        return errorMsg
      }
    },
    // 正数
    positive: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.positive.test(value)) {
        return errorMsg
      }
    },
    // 负数
    negative: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.negative.test(value)) {
        return errorMsg
      }
    },
    // 正整数
    positiveInteger: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.positiveInteger.test(value)) {
        return errorMsg
      }
    },
    // 负整数
    negativeInteger: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.negativeInteger.test(value)) {
        return errorMsg
      }
    },
    username: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.username.test(value)) {
        return errorMsg
      }
    },
    password: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.password.test(value)) {
        return errorMsg
      }
    },
    mail: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.mail.test(value)) {
        return errorMsg
      }
    },
    phone: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.phone.test(value)) {
        return errorMsg
      }
    },
    chinese: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.chinese.test(value)) {
        return errorMsg
      }
    },
    // 特殊字符
    specialchar: function (value, errorMsg) {
      if (value.length !== 0 && !Patts.specialchar.test(value)) {
        return errorMsg
      }
    },
    minNumber: function (value, min, errorMsg) {
      if (value.length !== 0 && value * 1 < min * 1) {
        return errorMsg
      }
    },
    maxNumber: function (value, max, errorMsg) {
      if (value.length !== 0 && value * 1 > max * 1) {
        return errorMsg
      }
    },
    minLength: function (value, length, errorMsg) {
      if (value.length !== 0 && value.length < length) {
        return errorMsg
      }
    },
    maxLength: function (value, length, errorMsg) {
      if (value.length !== 0 && value.length > length) {
        return errorMsg
      }
    },
    compare: function (value1, value2, errorMsg) {
      if (value1 !== value2) {
        return errorMsg
      }
    },
    // 密码安全等级
    safeLvl: function (value, lvl, errorMsg) {
      var valLvl = Object.passwordLvl(value)
      if (value.length !== 0 && valLvl < lvl) {
        return errorMsg
      }
    }
  }
  /* ------------------------
  Validator类
  ------------------------ */
  var s = this
  s.caches = []
  s.add = function (field, strategies) {
    /* eslint-disable */
    for (var i = 0, strategy; strategy = strategies[i++];) {
      (function (strategy) {
        var ruleArray = strategy.rule.split(":")
        var errorMsg = strategy.errorMsg

        s.caches.push(function () {
          var ruleName = ruleArray.shift()
          ruleArray.unshift(field instanceof Object ? field.value : field)
          ruleArray.push(errorMsg) // 此时ruleArray的值为 ruleValue,fieldValue,errorMsg
          var ruleErrorMsg = Rules[ruleName].apply(null, ruleArray)
          if (ruleErrorMsg) return { field: field, msg: ruleErrorMsg }
        })
      })(strategy)
    }
    /* eslint-enable */
  }
  s.start = function () {
    /* eslint-disable */
    for (var i = 0, valiFn; valiFn = s.caches[i++];) {
      var error = valiFn()
      if (error) return error
    }
    /* eslint-enable */
  }
};

//export default Validator


// IDValidator
var IDValidator = (function () {
  var GB2260 = {'110000': '北京市', '110100': '北京市市辖区', '110101': '北京市东城区', '110102': '北京市西城区', '110103': '北京市崇文区', '110104': '北京市宣武区', '110105': '北京市朝阳区', '110106': '北京市丰台区', '110107': '北京市石景山区', '110108': '北京市海淀区', '110109': '北京市门头沟区', '110111': '北京市房山区', '110112': '北京市通州区', '110113': '北京市顺义区', '110200': '北京市县', '110221': '北京市昌平县', '110224': '北京市大兴县', '110226': '北京市平谷县', '110227': '北京市怀柔县', '110228': '北京市密云县', '110229': '北京市延庆县', '120000': '天津市', '120100': '天津市市辖区', '120101': '天津市和平区', '120102': '天津市河东区', '120103': '天津市河西区', '120104': '天津市南开区', '120105': '天津市河北区', '120106': '天津市红桥区', '120107': '天津市塘沽区', '120108': '天津市汉沽区', '120109': '天津市大港区', '120110': '天津市东丽区', '120111': '天津市西青区', '120112': '天津市津南区', '120113': '天津市北辰区', '120200': '天津市县', '120221': '天津市宁河县', '120222': '天津市武清县', '120223': '天津市静海县', '120224': '天津市宝坻县', '120225': '天津市蓟县', '130000': '河北省', '130100': '河北省石家庄市', '130101': '河北省石家庄市市辖区', '130102': '河北省石家庄市长安区', '130103': '河北省石家庄市桥东区', '130104': '河北省石家庄市桥西区', '130105': '河北省石家庄市新华区', '130106': '河北省石家庄市郊区', '130107': '河北省石家庄市井陉矿区', '130121': '河北省石家庄市井陉县', '130123': '河北省石家庄市正定县', '130124': '河北省石家庄市栾城县', '130125': '河北省石家庄市行唐县', '130126': '河北省石家庄市灵寿县', '130127': '河北省石家庄市高邑县', '130128': '河北省石家庄市深泽县', '130129': '河北省石家庄市赞皇县', '130130': '河北省石家庄市无极县', '130131': '河北省石家庄市平山县', '130132': '河北省石家庄市元氏县', '130133': '河北省石家庄市赵县', '130181': '河北省石家庄市辛集市', '130182': '河北省石家庄市藁城市', '130183': '河北省石家庄市晋州市', '130184': '河北省石家庄市新乐市', '130185': '河北省石家庄市鹿泉市', '130200': '河北省唐山市', '130201': '河北省唐山市市辖区', '130202': '河北省唐山市路南区', '130203': '河北省唐山市路北区', '130204': '河北省唐山市古冶区', '130205': '河北省唐山市开平区', '130206': '河北省唐山市新区', '130221': '河北省唐山市丰润县', '130223': '河北省唐山市滦县', '130224': '河北省唐山市滦南县', '130225': '河北省唐山市乐亭县', '130227': '河北省唐山市迁西县', '130229': '河北省唐山市玉田县', '130230': '河北省唐山市唐海县', '130281': '河北省唐山市遵化市', '130282': '河北省唐山市丰南市', '130283': '河北省唐山市迁安市', '130300': '河北省秦皇岛市秦皇岛市', '130301': '河北省秦皇岛市市辖区', '130302': '河北省秦皇岛市海港区', '130303': '河北省秦皇岛市山海关区', '130304': '河北省秦皇岛市北戴河区', '130321': '河北省秦皇岛市青龙满族自治县', '130322': '河北省秦皇岛市昌黎县', '130323': '河北省秦皇岛市抚宁县', '130324': '河北省秦皇岛市卢龙县', '130400': '河北省邯郸市邯郸市', '130401': '河北省邯郸市市辖区', '130402': '河北省邯郸市邯山区', '130403': '河北省邯郸市丛台区', '130404': '河北省邯郸市复兴区', '130406': '河北省邯郸市峰峰矿区', '130421': '河北省邯郸市邯郸县', '130423': '河北省邯郸市临漳县', '130424': '河北省邯郸市成安县', '130425': '河北省邯郸市大名县', '130426': '河北省邯郸市涉县', '130427': '河北省邯郸市磁县', '130428': '河北省邯郸市肥乡县', '130429': '河北省邯郸市永年县', '130430': '河北省邯郸市邱县', '130431': '河北省邯郸市鸡泽县', '130432': '河北省邯郸市广平县', '130433': '河北省邯郸市馆陶县', '130434': '河北省邯郸市魏县', '130435': '河北省邯郸市曲周县', '130481': '河北省邯郸市武安市', '130500': '河北省邢台市', '130501': '河北省邢台市市辖区', '130502': '河北省邢台市桥东区', '130503': '河北省邢台市桥西区', '130521': '河北省邢台市邢台县', '130522': '河北省邢台市临城县', '130523': '河北省邢台市内丘县', '130524': '河北省邢台市柏乡县', '130525': '河北省邢台市隆尧县', '130526': '河北省邢台市任县', '130527': '河北省邢台市南和县', '130528': '河北省邢台市宁晋县', '130529': '河北省邢台市巨鹿县', '130530': '河北省邢台市新河县', '130531': '河北省邢台市广宗县', '130532': '河北省邢台市平乡县', '130533': '河北省邢台市威县', '130534': '河北省邢台市清河县', '130535': '河北省邢台市临西县', '130581': '河北省邢台市南宫市', '130582': '河北省邢台市沙河市', '130600': '河北省保定市', '130601': '河北省保定市市辖区', '130602': '河北省保定市新市区', '130603': '河北省保定市北市区', '130604': '河北省保定市南市区', '130621': '河北省保定市满城县', '130622': '河北省保定市清苑县', '130623': '河北省保定市涞水县', '130624': '河北省保定市阜平县', '130625': '河北省保定市徐水县', '130626': '河北省保定市定兴县', '130627': '河北省保定市唐县', '130628': '河北省保定市高阳县', '130629': '河北省保定市容城县', '130630': '河北省保定市涞源县', '130631': '河北省保定市望都县', '130632': '河北省保定市安新县', '130633': '河北省保定市易县', '130634': '河北省保定市曲阳县', '130635': '河北省保定市蠡县', '130636': '河北省保定市顺平县', '130637': '河北省保定市博野县', '130638': '河北省保定市雄县', '130681': '河北省保定市涿州市', '130682': '河北省保定市定州市', '130683': '河北省保定市安国市', '130684': '河北省保定市高碑店市', '130700': '河北省张家口市', '130701': '河北省张家口市市辖区', '130702': '河北省张家口市桥东区', '130703': '河北省张家口市桥西区', '130705': '河北省张家口市宣化区', '130706': '河北省张家口市下花园区', '130721': '河北省张家口市宣化县', '130722': '河北省张家口市张北县', '130723': '河北省张家口市康保县', '130724': '河北省张家口市沽源县', '130725': '河北省张家口市尚义县', '130726': '河北省张家口市蔚县', '130727': '河北省张家口市阳原县', '130728': '河北省张家口市怀安县', '130729': '河北省张家口市万全县', '130730': '河北省张家口市怀来县', '130731': '河北省张家口市涿鹿县', '130732': '河北省张家口市赤城县', '130733': '河北省张家口市崇礼县', '130800': '河北省承德市', '130801': '河北省承德市市辖区', '130802': '河北省承德市双桥区', '130803': '河北省承德市双滦区', '130804': '河北省承德市鹰手营子矿区', '130821': '河北省承德市承德县', '130822': '河北省承德市兴隆县', '130823': '河北省承德市平泉县', '130824': '河北省承德市滦平县', '130825': '河北省承德市隆化县', '130826': '河北省承德市丰宁满族自治县', '130827': '河北省承德市宽城满族自治县', '130828': '河北省承德市围场满族蒙古族自治县', '130900': '河北省沧州市', '130901': '河北省沧州市市辖区', '130902': '河北省沧州市新华区', '130903': '河北省沧州市运河区', '130921': '河北省沧州市沧县', '130922': '河北省沧州市青县', '130923': '河北省沧州市东光县', '130924': '河北省沧州市海兴县', '130925': '河北省沧州市盐山县', '130926': '河北省沧州市肃宁县', '130927': '河北省沧州市南皮县', '130928': '河北省沧州市吴桥县', '130929': '河北省沧州市献县', '130930': '河北省沧州市孟村回族自治县', '130981': '河北省沧州市泊头市', '130982': '河北省沧州市任丘市', '130983': '河北省沧州市黄骅市', '130984': '河北省沧州市河间市', '131000': '河北省廊坊市', '131001': '河北省廊坊市市辖区', '131002': '河北省廊坊市安次区', '131022': '河北省廊坊市固安县', '131023': '河北省廊坊市永清县', '131024': '河北省廊坊市香河县', '131025': '河北省廊坊市大城县', '131026': '河北省廊坊市文安县', '131028': '河北省廊坊市大厂回族自治县', '131081': '河北省廊坊市霸州市', '131082': '河北省廊坊市三河市', '131100': '河北省衡水市', '131101': '河北省衡水市市辖区', '131102': '河北省衡水市桃城区', '131121': '河北省衡水市枣强县', '131122': '河北省衡水市武邑县', '131123': '河北省衡水市武强县', '131124': '河北省衡水市饶阳县', '131125': '河北省衡水市安平县', '131126': '河北省衡水市故城县', '131127': '河北省衡水市景县', '131128': '河北省衡水市阜城县', '131181': '河北省衡水市冀州市', '131182': '河北省衡水市深州市', '140000': '山西省', '140100': '山西省太原市', '140101': '山西省太原市市辖区', '140105': '山西省太原市小店区', '140106': '山西省太原市迎泽区', '140107': '山西省太原市杏花岭区', '140108': '山西省太原市尖草坪区', '140109': '山西省太原市万柏林区', '140110': '山西省太原市晋源区', '140121': '山西省太原市清徐县', '140122': '山西省太原市阳曲县', '140123': '山西省太原市娄烦县', '140181': '山西省太原市古交市', '140200': '山西省大同市', '140201': '山西省大同市市辖区', '140202': '山西省大同市城区', '140203': '山西省大同市矿区', '140211': '山西省大同市南郊区', '140212': '山西省大同市新荣区', '140221': '山西省大同市阳高县', '140222': '山西省大同市天镇县', '140223': '山西省大同市广灵县', '140224': '山西省大同市灵丘县', '140225': '山西省大同市浑源县', '140226': '山西省大同市左云县', '140227': '山西省大同市大同县', '140300': '山西省阳泉市', '140301': '山西省阳泉市市辖区', '140302': '山西省阳泉市城区', '140303': '山西省阳泉市矿区', '140311': '山西省阳泉市郊区', '140321': '山西省阳泉市平定县', '140322': '山西省阳泉市盂县', '140400': '山西省长治市', '140401': '山西省长治市市辖区', '140402': '山西省长治市城区', '140411': '山西省长治市郊区', '140421': '山西省长治市长治县', '140423': '山西省长治市襄垣县', '140424': '山西省长治市屯留县', '140425': '山西省长治市平顺县', '140426': '山西省长治市黎城县', '140427': '山西省长治市壶关县', '140428': '山西省长治市长子县', '140429': '山西省长治市武乡县', '140430': '山西省长治市沁县', '140431': '山西省长治市沁源县', '140481': '山西省长治市潞城市', '140500': '山西省晋城市', '140501': '山西省晋城市市辖区', '140502': '山西省晋城市城区', '140521': '山西省晋城市沁水县', '140522': '山西省晋城市阳城县', '140524': '山西省晋城市陵川县', '140525': '山西省晋城市泽州县', '140581': '山西省晋城市高平市', '140600': '山西省晋城市朔州市', '140601': '山西省晋城市市辖区', '140602': '山西省晋城市朔城区', '140603': '山西省晋城市平鲁区', '140621': '山西省晋城市山阴县', '140622': '山西省晋城市应县', '140623': '山西省晋城市右玉县', '140624': '山西省晋城市怀仁县', '142200': '山西省忻州地区', '142201': '山西省忻州地区忻州市', '142202': '山西省忻州地区原平市', '142222': '山西省忻州地区定襄县', '142223': '山西省忻州地区五台县', '142225': '山西省忻州地区代县', '142226': '山西省忻州地区繁峙县', '142227': '山西省忻州地区宁武县', '142228': '山西省忻州地区静乐县', '142229': '山西省忻州地区神池县', '142230': '山西省忻州地区五寨县', '142231': '山西省忻州地区岢岚县', '142232': '山西省忻州地区河曲县', '142233': '山西省忻州地区保德县', '142234': '山西省忻州地区偏关县', '142300': '山西省忻州地区吕梁地区', '142301': '山西省忻州地区孝义市', '142302': '山西省忻州地区离石市', '142303': '山西省忻州地区汾阳市', '142322': '山西省忻州地区文水县', '142323': '山西省忻州地区交城县', '142325': '山西省忻州地区兴县', '142326': '山西省忻州地区临县', '142327': '山西省忻州地区柳林县', '142328': '山西省忻州地区石楼县', '142329': '山西省忻州地区岚县', '142330': '山西省忻州地区方山县', '142332': '山西省忻州地区中阳县', '142333': '山西省忻州地区交口县', '142400': '山西省晋中地区', '142401': '山西省晋中地区榆次市', '142402': '山西省晋中地区介休市', '142421': '山西省晋中地区榆社县', '142422': '山西省晋中地区左权县', '142423': '山西省晋中地区和顺县', '142424': '山西省晋中地区昔阳县', '142427': '山西省晋中地区寿阳县', '142429': '山西省晋中地区太谷县', '142430': '山西省晋中地区祁县', '142431': '山西省晋中地区平遥县', '142433': '山西省晋中地区灵石县', '142600': '山西省临汾地区', '142601': '山西省临汾地区临汾市', '142602': '山西省临汾地区侯马市', '142603': '山西省临汾地区霍州市', '142621': '山西省临汾地区曲沃县', '142622': '山西省临汾地区翼城县', '142623': '山西省临汾地区襄汾县', '142625': '山西省临汾地区洪洞县', '142627': '山西省临汾地区古县', '142628': '山西省临汾地区安泽县', '142629': '山西省临汾地区浮山县', '142630': '山西省临汾地区吉县', '142631': '山西省临汾地区乡宁县', '142632': '山西省临汾地区蒲县', '142633': '山西省临汾地区大宁县', '142634': '山西省临汾地区永和县', '142635': '山西省临汾地区隰县', '142636': '山西省临汾地区汾西县', '142700': '山西省运城地区', '142701': '山西省运城地区运城市', '142702': '山西省运城地区永济市', '142703': '山西省运城地区河津市', '142723': '山西省运城地区芮城县', '142724': '山西省运城地区临猗县', '142725': '山西省运城地区万荣县', '142726': '山西省运城地区新绛县', '142727': '山西省运城地区稷山县', '142729': '山西省运城地区闻喜县', '142730': '山西省运城地区夏县', '142731': '山西省运城地区绛县', '142732': '山西省运城地区平陆县', '142733': '山西省运城地区垣曲县', '150000': '内蒙古自治区', '150100': '内蒙古自治区呼和浩特市', '150101': '内蒙古自治区呼和浩特市市辖区', '150102': '内蒙古自治区呼和浩特市新城区', '150103': '内蒙古自治区呼和浩特市回民区', '150104': '内蒙古自治区呼和浩特市玉泉区', '150105': '内蒙古自治区呼和浩特市郊区', '150121': '内蒙古自治区呼和浩特市土默特左旗', '150122': '内蒙古自治区呼和浩特市托克托县', '150123': '内蒙古自治区呼和浩特市和林格尔县', '150124': '内蒙古自治区呼和浩特市清水河县', '150125': '内蒙古自治区呼和浩特市武川县', '150200': '内蒙古自治区包头市', '150201': '内蒙古自治区包头市市辖区', '150202': '内蒙古自治区包头市东河区', '150203': '内蒙古自治区包头市昆都伦区', '150204': '内蒙古自治区包头市青山区', '150205': '内蒙古自治区包头市石拐矿区', '150206': '内蒙古自治区包头市白云矿区', '150207': '内蒙古自治区包头市郊区', '150221': '内蒙古自治区包头市土默特右旗', '150222': '内蒙古自治区包头市固阳县', '150223': '内蒙古自治区包头市达尔罕茂明安联合旗', '150300': '内蒙古自治区乌海市', '150301': '内蒙古自治区乌海市市辖区', '150302': '内蒙古自治区乌海市海勃湾区', '150303': '内蒙古自治区乌海市海南区', '150304': '内蒙古自治区乌海市乌达区', '150400': '内蒙古自治区赤峰市', '150401': '内蒙古自治区赤峰市市辖区', '150402': '内蒙古自治区赤峰市红山区', '150403': '内蒙古自治区赤峰市元宝山区', '150404': '内蒙古自治区赤峰市松山区', '150421': '内蒙古自治区赤峰市阿鲁科尔沁旗', '150422': '内蒙古自治区赤峰市巴林左旗', '150423': '内蒙古自治区赤峰市巴林右旗', '150424': '内蒙古自治区赤峰市林西县', '150425': '内蒙古自治区赤峰市克什克腾旗', '150426': '内蒙古自治区赤峰市翁牛特旗', '150428': '内蒙古自治区赤峰市喀喇沁旗', '150429': '内蒙古自治区赤峰市宁城县', '150430': '内蒙古自治区赤峰市敖汉旗', '152100': '内蒙古自治区呼伦贝尔盟', '152101': '内蒙古自治区呼伦贝尔盟海拉尔市', '152102': '内蒙古自治区呼伦贝尔盟满洲里市', '152103': '内蒙古自治区呼伦贝尔盟扎兰屯市', '152104': '内蒙古自治区呼伦贝尔盟牙克石市', '152105': '内蒙古自治区呼伦贝尔盟根河市', '152106': '内蒙古自治区呼伦贝尔盟额尔古纳市', '152122': '内蒙古自治区呼伦贝尔盟阿荣旗', '152123': '内蒙古自治区呼伦贝尔盟莫力达瓦达斡尔族自治旗', '152127': '内蒙古自治区呼伦贝尔盟鄂伦春自治旗', '152128': '内蒙古自治区呼伦贝尔盟鄂温克族自治旗', '152129': '内蒙古自治区呼伦贝尔盟新巴尔虎右旗', '152130': '内蒙古自治区呼伦贝尔盟新巴尔虎左旗', '152131': '内蒙古自治区呼伦贝尔盟陈巴尔虎旗', '152200': '内蒙古自治区兴安盟', '152201': '内蒙古自治区兴安盟乌兰浩特市', '152202': '内蒙古自治区兴安盟阿尔山市', '152221': '内蒙古自治区兴安盟科尔沁右翼前旗', '152222': '内蒙古自治区兴安盟科尔沁右翼中旗', '152223': '内蒙古自治区兴安盟扎赉特旗', '152224': '内蒙古自治区兴安盟突泉县', '152300': '内蒙古自治区哲里木盟', '152301': '内蒙古自治区哲里木盟通辽市', '152302': '内蒙古自治区哲里木盟霍林郭勒市', '152322': '内蒙古自治区哲里木盟科尔沁左翼中旗', '152323': '内蒙古自治区哲里木盟科尔沁左翼后旗', '152324': '内蒙古自治区哲里木盟开鲁县', '152325': '内蒙古自治区哲里木盟库伦旗', '152326': '内蒙古自治区哲里木盟奈曼旗', '152327': '内蒙古自治区哲里木盟扎鲁特旗', '152500': '内蒙古自治区锡林郭勒盟', '152501': '内蒙古自治区锡林郭勒盟二连浩特市', '152502': '内蒙古自治区锡林郭勒盟锡林浩特市', '152522': '内蒙古自治区锡林郭勒盟阿巴嘎旗', '152523': '内蒙古自治区锡林郭勒盟苏尼特左旗', '152524': '内蒙古自治区锡林郭勒盟苏尼特右旗', '152525': '内蒙古自治区锡林郭勒盟东乌珠穆沁旗', '152526': '内蒙古自治区锡林郭勒盟西乌珠穆沁旗', '152527': '内蒙古自治区锡林郭勒盟太仆寺旗', '152528': '内蒙古自治区锡林郭勒盟镶黄旗', '152529': '内蒙古自治区锡林郭勒盟正镶白旗', '152530': '内蒙古自治区锡林郭勒盟正蓝旗', '152531': '内蒙古自治区锡林郭勒盟多伦县', '152600': '内蒙古自治区乌兰察布盟', '152601': '内蒙古自治区乌兰察布盟集宁市', '152602': '内蒙古自治区乌兰察布盟丰镇市', '152624': '内蒙古自治区乌兰察布盟卓资县', '152625': '内蒙古自治区乌兰察布盟化德县', '152626': '内蒙古自治区乌兰察布盟商都县', '152627': '内蒙古自治区乌兰察布盟兴和县', '152629': '内蒙古自治区乌兰察布盟凉城县', '152630': '内蒙古自治区乌兰察布盟察哈尔右翼前旗', '152631': '内蒙古自治区乌兰察布盟察哈尔右翼中旗', '152632': '内蒙古自治区乌兰察布盟察哈尔右翼后旗', '152634': '内蒙古自治区乌兰察布盟四子王旗', '152700': '内蒙古自治区伊克昭盟', '152701': '内蒙古自治区伊克昭盟东胜市', '152722': '内蒙古自治区伊克昭盟达拉特旗', '152723': '内蒙古自治区伊克昭盟准格尔旗', '152724': '内蒙古自治区伊克昭盟鄂托克前旗', '152725': '内蒙古自治区伊克昭盟鄂托克旗', '152726': '内蒙古自治区伊克昭盟杭锦旗', '152727': '内蒙古自治区伊克昭盟乌审旗', '152728': '内蒙古自治区伊克昭盟伊金霍洛旗', '152800': '内蒙古自治区巴彦淖尔盟', '152801': '内蒙古自治区巴彦淖尔盟临河市', '152822': '内蒙古自治区巴彦淖尔盟五原县', '152823': '内蒙古自治区巴彦淖尔盟磴口县', '152824': '内蒙古自治区巴彦淖尔盟乌拉特前旗', '152825': '内蒙古自治区巴彦淖尔盟乌拉特中旗', '152826': '内蒙古自治区巴彦淖尔盟乌拉特后旗', '152827': '内蒙古自治区巴彦淖尔盟杭锦后旗', '152900': '内蒙古自治区阿拉善盟', '152921': '内蒙古自治区阿拉善盟阿拉善左旗', '152922': '内蒙古自治区阿拉善盟阿拉善右旗', '152923': '内蒙古自治区阿拉善盟额济纳旗', '210000': '辽宁省', '210100': '辽宁省沈阳市', '210101': '辽宁省沈阳市市辖区', '210102': '辽宁省沈阳市和平区', '210103': '辽宁省沈阳市沈河区', '210104': '辽宁省沈阳市大东区', '210105': '辽宁省沈阳市皇姑区', '210106': '辽宁省沈阳市铁西区', '210111': '辽宁省沈阳市苏家屯区', '210112': '辽宁省沈阳市东陵区', '210113': '辽宁省沈阳市新城子区', '210114': '辽宁省沈阳市于洪区', '210122': '辽宁省沈阳市辽中县', '210123': '辽宁省沈阳市康平县', '210124': '辽宁省沈阳市法库县', '210181': '辽宁省沈阳市新民市', '210200': '辽宁省大连市', '210201': '辽宁省大连市市辖区', '210202': '辽宁省大连市中山区', '210203': '辽宁省大连市西岗区', '210204': '辽宁省大连市沙河口区', '210211': '辽宁省大连市甘井子区', '210212': '辽宁省大连市旅顺口区', '210213': '辽宁省大连市金州区', '210224': '辽宁省大连市长海县', '210281': '辽宁省大连市瓦房店市', '210282': '辽宁省大连市普兰店市', '210283': '辽宁省大连市庄河市', '210300': '辽宁省鞍山市', '210301': '辽宁省鞍山市市辖区', '210302': '辽宁省鞍山市铁东区', '210303': '辽宁省鞍山市铁西区', '210304': '辽宁省鞍山市立山区', '210311': '辽宁省鞍山市千山区', '210321': '辽宁省鞍山市台安县', '210323': '辽宁省鞍山市岫岩满族自治县', '210381': '辽宁省鞍山市海城市', '210400': '辽宁省抚顺市', '210401': '辽宁省抚顺市市辖区', '210402': '辽宁省抚顺市新抚区', '210403': '辽宁省抚顺市露天区', '210404': '辽宁省抚顺市望花区', '210411': '辽宁省抚顺市顺城区', '210421': '辽宁省抚顺市抚顺县', '210422': '辽宁省抚顺市新宾满族自治县', '210423': '辽宁省抚顺市清原满族自治县', '210500': '辽宁省本溪市', '210501': '辽宁省本溪市市辖区', '210502': '辽宁省本溪市平山区', '210503': '辽宁省本溪市溪湖区', '210504': '辽宁省本溪市明山区', '210505': '辽宁省本溪市南芬区', '210521': '辽宁省本溪市本溪满族自治县', '210522': '辽宁省本溪市桓仁满族自治县', '210600': '辽宁省丹东市', '210601': '辽宁省丹东市市辖区', '210602': '辽宁省丹东市元宝区', '210603': '辽宁省丹东市振兴区', '210604': '辽宁省丹东市振安区', '210624': '辽宁省丹东市宽甸满族自治县', '210681': '辽宁省丹东市东港市', '210682': '辽宁省丹东市凤城市', '210700': '辽宁省锦州市', '210701': '辽宁省锦州市市辖区', '210702': '辽宁省锦州市古塔区', '210703': '辽宁省锦州市凌河区', '210711': '辽宁省锦州市太和区', '210726': '辽宁省锦州市黑山县', '210727': '辽宁省锦州市义县', '210781': '辽宁省锦州市凌海市', '210782': '辽宁省锦州市北宁市', '210800': '辽宁省营口市', '210801': '辽宁省营口市市辖区', '210802': '辽宁省营口市站前区', '210803': '辽宁省营口市西市区', '210804': '辽宁省营口市鲅鱼圈区', '210811': '辽宁省营口市老边区', '210881': '辽宁省营口市盖州市', '210882': '辽宁省营口市大石桥市', '210900': '辽宁省阜新市', '210901': '辽宁省阜新市市辖区', '210902': '辽宁省阜新市海州区', '210903': '辽宁省阜新市新邱区', '210904': '辽宁省阜新市太平区', '210905': '辽宁省阜新市清河门区', '210911': '辽宁省阜新市细河区', '210921': '辽宁省阜新市阜新蒙古族自治县', '210922': '辽宁省阜新市彰武县', '211000': '辽宁省辽阳市', '211001': '辽宁省辽阳市市辖区', '211002': '辽宁省辽阳市白塔区', '211003': '辽宁省辽阳市文圣区', '211004': '辽宁省辽阳市宏伟区', '211005': '辽宁省辽阳市弓长岭区', '211011': '辽宁省辽阳市太子河区', '211021': '辽宁省辽阳市辽阳县', '211081': '辽宁省辽阳市灯塔市', '211100': '辽宁省盘锦市', '211101': '辽宁省盘锦市市辖区', '211102': '辽宁省盘锦市双台子区', '211103': '辽宁省盘锦市兴隆台区', '211121': '辽宁省盘锦市大洼县', '211122': '辽宁省盘锦市盘山县', '211200': '辽宁省铁岭市', '211201': '辽宁省铁岭市市辖区', '211202': '辽宁省铁岭市银州区', '211204': '辽宁省铁岭市清河区', '211221': '辽宁省铁岭市铁岭县', '211223': '辽宁省铁岭市西丰县', '211224': '辽宁省铁岭市昌图县', '211281': '辽宁省铁岭市铁法市', '211282': '辽宁省铁岭市开原市', '211300': '辽宁省朝阳市', '211301': '辽宁省朝阳市市辖区', '211302': '辽宁省朝阳市双塔区', '211303': '辽宁省朝阳市龙城区', '211321': '辽宁省朝阳市朝阳县', '211322': '辽宁省朝阳市建平县', '211324': '辽宁省朝阳市喀喇沁左翼蒙古族自治县', '211381': '辽宁省朝阳市北票市', '211382': '辽宁省朝阳市凌源市', '211400': '辽宁省葫芦岛市', '211401': '辽宁省葫芦岛市市辖区', '211402': '辽宁省葫芦岛市连山区', '211403': '辽宁省葫芦岛市龙港区', '211404': '辽宁省葫芦岛市南票区', '211421': '辽宁省葫芦岛市绥中县', '211422': '辽宁省葫芦岛市建昌县', '211481': '辽宁省葫芦岛市兴城市', '220000': '吉林省', '220100': '吉林省长春市', '220101': '吉林省长春市市辖区', '220102': '吉林省长春市南关区', '220103': '吉林省长春市宽城区', '220104': '吉林省长春市朝阳区', '220105': '吉林省长春市二道区', '220106': '吉林省长春市绿园区', '220112': '吉林省长春市双阳区', '220122': '吉林省长春市农安县', '220181': '吉林省长春市九台市', '220182': '吉林省长春市榆树市', '220183': '吉林省长春市德惠市', '220200': '吉林省吉林市', '220201': '吉林省吉林市市辖区', '220202': '吉林省吉林市昌邑区', '220203': '吉林省吉林市龙潭区', '220204': '吉林省吉林市船营区', '220211': '吉林省吉林市丰满区', '220221': '吉林省吉林市永吉县', '220281': '吉林省吉林市蛟河市', '220282': '吉林省吉林市桦甸市', '220283': '吉林省吉林市舒兰市', '220284': '吉林省吉林市磐石市', '220300': '吉林省四平市', '220301': '吉林省四平市市辖区', '220302': '吉林省四平市铁西区', '220303': '吉林省四平市铁东区', '220322': '吉林省四平市梨树县', '220323': '吉林省四平市伊通满族自治县', '220381': '吉林省四平市公主岭市', '220382': '吉林省四平市双辽市', '220400': '吉林省辽源市', '220401': '吉林省辽源市市辖区', '220402': '吉林省辽源市龙山区', '220403': '吉林省辽源市西安区', '220421': '吉林省辽源市东丰县', '220422': '吉林省辽源市东辽县', '220500': '吉林省通化市', '220501': '吉林省通化市市辖区', '220502': '吉林省通化市东昌区', '220503': '吉林省通化市二道江区', '220521': '吉林省通化市通化县', '220523': '吉林省通化市辉南县', '220524': '吉林省通化市柳河县', '220581': '吉林省通化市梅河口市', '220582': '吉林省通化市集安市', '220600': '吉林省白山市', '220601': '吉林省白山市市辖区', '220602': '吉林省白山市八道江区', '220621': '吉林省白山市抚松县', '220622': '吉林省白山市靖宇县', '220623': '吉林省白山市长白朝鲜族自治县', '220625': '吉林省白山市江源县', '220681': '吉林省白山市临江市', '220700': '吉林省松原市', '220701': '吉林省松原市市辖区', '220702': '吉林省松原市宁江区', '220721': '吉林省松原市前郭尔罗斯蒙古族自治县', '220722': '吉林省松原市长岭县', '220723': '吉林省松原市乾安县', '220724': '吉林省松原市扶余县', '220800': '吉林省白城市', '220801': '吉林省白城市市辖区', '220802': '吉林省白城市洮北区', '220821': '吉林省白城市镇赉县', '220822': '吉林省白城市通榆县', '220881': '吉林省白城市洮南市', '220882': '吉林省白城市大安市', '222400': '吉林省延边朝鲜族自治州', '222401': '吉林省延边朝鲜族自治州延吉市', '222402': '吉林省延边朝鲜族自治州图们市', '222403': '吉林省延边朝鲜族自治州敦化市', '222404': '吉林省延边朝鲜族自治州珲春市', '222405': '吉林省延边朝鲜族自治州龙井市', '222406': '吉林省延边朝鲜族自治州和龙市', '222424': '吉林省延边朝鲜族自治州汪清县', '222426': '吉林省延边朝鲜族自治州安图县', '230000': '黑龙江省', '230100': '黑龙江省哈尔滨市', '230101': '黑龙江省哈尔滨市市辖区', '230102': '黑龙江省哈尔滨市道里区', '230103': '黑龙江省哈尔滨市南岗区', '230104': '黑龙江省哈尔滨市道外区', '230105': '黑龙江省哈尔滨市太平区', '230106': '黑龙江省哈尔滨市香坊区', '230107': '黑龙江省哈尔滨市动力区', '230108': '黑龙江省哈尔滨市平房区', '230121': '黑龙江省哈尔滨市呼兰县', '230123': '黑龙江省哈尔滨市依兰县', '230124': '黑龙江省哈尔滨市方正县', '230125': '黑龙江省哈尔滨市宾县', '230126': '黑龙江省哈尔滨市巴彦县', '230127': '黑龙江省哈尔滨市木兰县', '230128': '黑龙江省哈尔滨市通河县', '230129': '黑龙江省哈尔滨市延寿县', '230181': '黑龙江省哈尔滨市阿城市', '230182': '黑龙江省哈尔滨市双城市', '230183': '黑龙江省哈尔滨市尚志市', '230184': '黑龙江省哈尔滨市五常市', '230200': '黑龙江省齐齐哈尔市', '230201': '黑龙江省齐齐哈尔市市辖区', '230202': '黑龙江省齐齐哈尔市龙沙区', '230203': '黑龙江省齐齐哈尔市建华区', '230204': '黑龙江省齐齐哈尔市铁锋区', '230205': '黑龙江省齐齐哈尔市昂昂溪区', '230206': '黑龙江省齐齐哈尔市富拉尔基区', '230207': '黑龙江省齐齐哈尔市碾子山区', '230208': '黑龙江省齐齐哈尔市梅里斯达斡尔族区', '230221': '黑龙江省齐齐哈尔市龙江县', '230223': '黑龙江省齐齐哈尔市依安县', '230224': '黑龙江省齐齐哈尔市泰来县', '230225': '黑龙江省齐齐哈尔市甘南县', '230227': '黑龙江省齐齐哈尔市富裕县', '230229': '黑龙江省齐齐哈尔市克山县', '230230': '黑龙江省齐齐哈尔市克东县', '230231': '黑龙江省齐齐哈尔市拜泉县', '230281': '黑龙江省齐齐哈尔市讷河市', '230300': '黑龙江省鸡西市', '230301': '黑龙江省鸡西市市辖区', '230302': '黑龙江省鸡西市鸡冠区', '230303': '黑龙江省鸡西市恒山区', '230304': '黑龙江省鸡西市滴道区', '230305': '黑龙江省鸡西市梨树区', '230306': '黑龙江省鸡西市城子河区', '230307': '黑龙江省鸡西市麻山区', '230321': '黑龙江省鸡西市鸡东县', '230381': '黑龙江省鸡西市虎林市', '230382': '黑龙江省鸡西市密山市', '230400': '黑龙江省鹤岗市', '230401': '黑龙江省鹤岗市市辖区', '230402': '黑龙江省鹤岗市向阳区', '230403': '黑龙江省鹤岗市工农区', '230404': '黑龙江省鹤岗市南山区', '230405': '黑龙江省鹤岗市兴安区', '230406': '黑龙江省鹤岗市东山区', '230407': '黑龙江省鹤岗市兴山区', '230421': '黑龙江省鹤岗市萝北县', '230422': '黑龙江省鹤岗市绥滨县', '230500': '黑龙江省双鸭山市', '230501': '黑龙江省双鸭山市市辖区', '230502': '黑龙江省双鸭山市尖山区', '230503': '黑龙江省双鸭山市岭东区', '230505': '黑龙江省双鸭山市四方台区', '230506': '黑龙江省双鸭山市宝山区', '230521': '黑龙江省双鸭山市集贤县', '230522': '黑龙江省双鸭山市友谊县', '230523': '黑龙江省双鸭山市宝清县', '230524': '黑龙江省双鸭山市饶河县', '230600': '黑龙江省大庆市', '230601': '黑龙江省大庆市市辖区', '230602': '黑龙江省大庆市萨尔图区', '230603': '黑龙江省大庆市龙凤区', '230604': '黑龙江省大庆市让胡路区', '230605': '黑龙江省大庆市红岗区', '230606': '黑龙江省大庆市大同区', '230621': '黑龙江省大庆市肇州县', '230622': '黑龙江省大庆市肇源县', '230623': '黑龙江省大庆市林甸县', '230624': '黑龙江省大庆市杜尔伯特蒙古族自治县', '230700': '黑龙江省伊春市', '230701': '黑龙江省伊春市市辖区', '230702': '黑龙江省伊春市伊春区', '230703': '黑龙江省伊春市南岔区', '230704': '黑龙江省伊春市友好区', '230705': '黑龙江省伊春市西林区', '230706': '黑龙江省伊春市翠峦区', '230707': '黑龙江省伊春市新青区', '230708': '黑龙江省伊春市美溪区', '230709': '黑龙江省伊春市金山屯区', '230710': '黑龙江省伊春市五营区', '230711': '黑龙江省伊春市乌马河区', '230712': '黑龙江省伊春市汤旺河区', '230713': '黑龙江省伊春市带岭区', '230714': '黑龙江省伊春市乌伊岭区', '230715': '黑龙江省伊春市红星区', '230716': '黑龙江省伊春市上甘岭区', '230722': '黑龙江省伊春市嘉荫县', '230781': '黑龙江省伊春市铁力市', '230800': '黑龙江省佳木斯市', '230801': '黑龙江省佳木斯市市辖区', '230802': '黑龙江省佳木斯市永红区', '230803': '黑龙江省佳木斯市向阳区', '230804': '黑龙江省佳木斯市前进区', '230805': '黑龙江省佳木斯市东风区', '230811': '黑龙江省佳木斯市郊区', '230822': '黑龙江省佳木斯市桦南县', '230826': '黑龙江省佳木斯市桦川县', '230828': '黑龙江省佳木斯市汤原县', '230833': '黑龙江省佳木斯市抚远县', '230881': '黑龙江省佳木斯市同江市', '230882': '黑龙江省佳木斯市富锦市', '230900': '黑龙江省七台河市', '230901': '黑龙江省七台河市市辖区', '230902': '黑龙江省七台河市新兴区', '230903': '黑龙江省七台河市桃山区', '230904': '黑龙江省七台河市茄子河区', '230921': '黑龙江省七台河市勃利县', '231000': '黑龙江省牡丹江市', '231001': '黑龙江省牡丹江市市辖区', '231002': '黑龙江省牡丹江市东安区', '231003': '黑龙江省牡丹江市阳明区', '231004': '黑龙江省牡丹江市爱民区', '231005': '黑龙江省牡丹江市西安区', '231024': '黑龙江省牡丹江市东宁县', '231025': '黑龙江省牡丹江市林口县', '231081': '黑龙江省牡丹江市绥芬河市', '231083': '黑龙江省牡丹江市海林市', '231084': '黑龙江省牡丹江市宁安市', '231085': '黑龙江省牡丹江市穆棱市', '231100': '黑龙江省黑河市', '231101': '黑龙江省黑河市市辖区', '231102': '黑龙江省黑河市爱辉区', '231121': '黑龙江省黑河市嫩江县', '231123': '黑龙江省黑河市逊克县', '231124': '黑龙江省黑河市孙吴县', '231181': '黑龙江省黑河市北安市', '231182': '黑龙江省黑河市五大连池市', '232300': '黑龙江省绥化地区', '232301': '黑龙江省绥化地区绥化市', '232302': '黑龙江省绥化地区安达市', '232303': '黑龙江省绥化地区肇东市', '232304': '黑龙江省绥化地区海伦市', '232324': '黑龙江省绥化地区望奎县', '232325': '黑龙江省绥化地区兰西县', '232326': '黑龙江省绥化地区青冈县', '232330': '黑龙江省绥化地区庆安县', '232331': '黑龙江省绥化地区明水县', '232332': '黑龙江省绥化地区绥棱县', '232700': '黑龙江省大兴安岭地区', '232721': '黑龙江省大兴安岭地区呼玛县', '232722': '黑龙江省大兴安岭地区塔河县', '232723': '黑龙江省大兴安岭地区漠河县', '310000': '上海市', '310100': '上海市市辖区', '310101': '上海市黄浦区', '310102': '上海市南市区', '310103': '上海市卢湾区', '310104': '上海市徐汇区', '310105': '上海市长宁区', '310106': '上海市静安区', '310107': '上海市普陀区', '310108': '上海市闸北区', '310109': '上海市虹口区', '310110': '上海市杨浦区', '310112': '上海市闵行区', '310113': '上海市宝山区', '310114': '上海市嘉定区', '310115': '上海市浦东新区', '310116': '上海市金山区', '310117': '上海市松江区', '310200': '上海市县', '310225': '上海市南汇县', '310226': '上海市奉贤县', '310229': '上海市青浦县', '310230': '上海市崇明县', '320000': '江苏省', '320100': '江苏省南京市', '320101': '江苏省南京市市辖区', '320102': '江苏省南京市玄武区', '320103': '江苏省南京市白下区', '320104': '江苏省南京市秦淮区', '320105': '江苏省南京市建邺区', '320106': '江苏省南京市鼓楼区', '320107': '江苏省南京市下关区', '320111': '江苏省南京市浦口区', '320112': '江苏省南京市大厂区', '320113': '江苏省南京市栖霞区', '320114': '江苏省南京市雨花台区', '320121': '江苏省南京市江宁县', '320122': '江苏省南京市江浦县', '320123': '江苏省南京市六合县', '320124': '江苏省南京市溧水县', '320125': '江苏省南京市高淳县', '320200': '江苏省无锡市', '320201': '江苏省无锡市市辖区', '320202': '江苏省无锡市崇安区', '320203': '江苏省无锡市南长区', '320204': '江苏省无锡市北塘区', '320211': '江苏省无锡市郊区', '320281': '江苏省无锡市江阴市', '320282': '江苏省无锡市宜兴市', '320283': '江苏省无锡市锡山市', '320300': '江苏省徐州市', '320301': '江苏省徐州市市辖区', '320302': '江苏省徐州市鼓楼区', '320303': '江苏省徐州市云龙区', '320304': '江苏省徐州市九里区', '320305': '江苏省徐州市贾汪区', '320311': '江苏省徐州市泉山区', '320321': '江苏省徐州市丰县', '320322': '江苏省徐州市沛县', '320323': '江苏省徐州市铜山县', '320324': '江苏省徐州市睢宁县', '320381': '江苏省徐州市新沂市', '320382': '江苏省徐州市邳州市', '320400': '江苏省常州市', '320401': '江苏省常州市市辖区', '320402': '江苏省常州市天宁区', '320404': '江苏省常州市钟楼区', '320405': '江苏省常州市戚墅堰区', '320411': '江苏省常州市郊区', '320481': '江苏省常州市溧阳市', '320482': '江苏省常州市金坛市', '320483': '江苏省常州市武进市', '320500': '江苏省苏州市', '320501': '江苏省苏州市市辖区', '320502': '江苏省苏州市沧浪区', '320503': '江苏省苏州市平江区', '320504': '江苏省苏州市金阊区', '320511': '江苏省苏州市郊区', '320581': '江苏省苏州市常熟市', '320582': '江苏省苏州市张家港市', '320583': '江苏省苏州市昆山市', '320584': '江苏省苏州市吴江市', '320585': '江苏省苏州市太仓市', '320586': '江苏省苏州市吴县市', '320600': '江苏省南通市', '320601': '江苏省南通市市辖区', '320602': '江苏省南通市崇川区', '320611': '江苏省南通市港闸区', '320621': '江苏省南通市海安县', '320623': '江苏省南通市如东县', '320681': '江苏省南通市启东市', '320682': '江苏省南通市如皋市', '320683': '江苏省南通市通州市', '320684': '江苏省南通市海门市', '320700': '江苏省连云港市', '320701': '江苏省连云港市市辖区', '320703': '江苏省连云港市连云区', '320704': '江苏省连云港市云台区', '320705': '江苏省连云港市新浦区', '320706': '江苏省连云港市海州区', '320721': '江苏省连云港市赣榆县', '320722': '江苏省连云港市东海县', '320723': '江苏省连云港市灌云县', '320724': '江苏省连云港市灌南县', '320800': '江苏省淮阴市', '320801': '江苏省淮阴市市辖区', '320802': '江苏省淮阴市清河区', '320811': '江苏省淮阴市清浦区', '320821': '江苏省淮阴市淮阴县', '320826': '江苏省淮阴市涟水县', '320829': '江苏省淮阴市洪泽县', '320830': '江苏省淮阴市盱眙县', '320831': '江苏省淮阴市金湖县', '320882': '江苏省淮阴市淮安市', '320900': '江苏省盐城市', '320901': '江苏省盐城市市辖区', '320902': '江苏省盐城市城区', '320921': '江苏省盐城市响水县', '320922': '江苏省盐城市滨海县', '320923': '江苏省盐城市阜宁县', '320924': '江苏省盐城市射阳县', '320925': '江苏省盐城市建湖县', '320928': '江苏省盐城市盐都县', '320981': '江苏省盐城市东台市', '320982': '江苏省盐城市大丰市', '321000': '江苏省扬州市', '321001': '江苏省扬州市市辖区', '321002': '江苏省扬州市广陵区', '321011': '江苏省扬州市郊区', '321023': '江苏省扬州市宝应县', '321027': '江苏省扬州市邗江县', '321081': '江苏省扬州市仪征市', '321084': '江苏省扬州市高邮市', '321088': '江苏省扬州市江都市', '321100': '江苏省镇江市', '321101': '江苏省镇江市市辖区', '321102': '江苏省镇江市京口区', '321111': '江苏省镇江市润州区', '321121': '江苏省镇江市丹徒县', '321181': '江苏省镇江市丹阳市', '321182': '江苏省镇江市扬中市', '321183': '江苏省镇江市句容市', '321200': '江苏省泰州市', '321201': '江苏省泰州市市辖区', '321202': '江苏省泰州市海陵区', '321203': '江苏省泰州市高港区', '321281': '江苏省泰州市兴化市', '321282': '江苏省泰州市靖江市', '321283': '江苏省泰州市泰兴市', '321284': '江苏省泰州市姜堰市', '321300': '江苏省宿迁市', '321301': '江苏省宿迁市市辖区', '321302': '江苏省宿迁市宿城区', '321321': '江苏省宿迁市宿豫县', '321322': '江苏省宿迁市沭阳县', '321323': '江苏省宿迁市泗阳县', '321324': '江苏省宿迁市泗洪县', '330000': '浙江省', '330100': '浙江省杭州市', '330101': '浙江省杭州市市辖区', '330102': '浙江省杭州市上城区', '330103': '浙江省杭州市下城区', '330104': '浙江省杭州市江干区', '330105': '浙江省杭州市拱墅区', '330106': '浙江省杭州市西湖区', '330108': '浙江省杭州市滨江区', '330122': '浙江省杭州市桐庐县', '330127': '浙江省杭州市淳安县', '330181': '浙江省杭州市萧山市', '330182': '浙江省杭州市建德市', '330183': '浙江省杭州市富阳市', '330184': '浙江省杭州市余杭市', '330185': '浙江省杭州市临安市', '330200': '浙江省宁波市', '330201': '浙江省宁波市市辖区', '330203': '浙江省宁波市海曙区', '330204': '浙江省宁波市江东区', '330205': '浙江省宁波市江北区', '330206': '浙江省宁波市北仑区', '330211': '浙江省宁波市镇海区', '330225': '浙江省宁波市象山县', '330226': '浙江省宁波市宁海县', '330227': '浙江省宁波市鄞县', '330281': '浙江省宁波市余姚市', '330282': '浙江省宁波市慈溪市', '330283': '浙江省宁波市奉化市', '330300': '浙江省温州市', '330301': '浙江省温州市市辖区', '330302': '浙江省温州市鹿城区', '330303': '浙江省温州市龙湾区', '330304': '浙江省温州市瓯海区', '330322': '浙江省温州市洞头县', '330324': '浙江省温州市永嘉县', '330326': '浙江省温州市平阳县', '330327': '浙江省温州市苍南县', '330328': '浙江省温州市文成县', '330329': '浙江省温州市泰顺县', '330381': '浙江省温州市瑞安市', '330382': '浙江省温州市乐清市', '330400': '浙江省嘉兴市', '330401': '浙江省嘉兴市市辖区', '330402': '浙江省嘉兴市秀城区', '330411': '浙江省嘉兴市郊区', '330421': '浙江省嘉兴市嘉善县', '330424': '浙江省嘉兴市海盐县', '330481': '浙江省嘉兴市海宁市', '330482': '浙江省嘉兴市平湖市', '330483': '浙江省嘉兴市桐乡市', '330500': '浙江省湖州市', '330501': '浙江省湖州市市辖区', '330521': '浙江省湖州市德清县', '330522': '浙江省湖州市长兴县', '330523': '浙江省湖州市安吉县', '330600': '浙江省绍兴市', '330601': '浙江省绍兴市市辖区', '330602': '浙江省绍兴市越城区', '330621': '浙江省绍兴市绍兴县', '330624': '浙江省绍兴市新昌县', '330681': '浙江省绍兴市诸暨市', '330682': '浙江省绍兴市上虞市', '330683': '浙江省绍兴市嵊州市', '330700': '浙江省金华市', '330701': '浙江省金华市市辖区', '330702': '浙江省金华市婺城区', '330721': '浙江省金华市金华县', '330723': '浙江省金华市武义县', '330726': '浙江省金华市浦江县', '330727': '浙江省金华市磐安县', '330781': '浙江省金华市兰溪市', '330782': '浙江省金华市义乌市', '330783': '浙江省金华市东阳市', '330784': '浙江省金华市永康市', '330800': '浙江省衢州市', '330801': '浙江省衢州市市辖区', '330802': '浙江省衢州市柯城区', '330821': '浙江省衢州市衢县', '330822': '浙江省衢州市常山县', '330824': '浙江省衢州市开化县', '330825': '浙江省衢州市龙游县', '330881': '浙江省衢州市江山市', '330900': '浙江省舟山市', '330901': '浙江省舟山市市辖区', '330902': '浙江省舟山市定海区', '330903': '浙江省舟山市普陀区', '330921': '浙江省舟山市岱山县', '330922': '浙江省舟山市嵊泗县', '331000': '浙江省台州市', '331001': '浙江省台州市市辖区', '331002': '浙江省台州市椒江区', '331003': '浙江省台州市黄岩区', '331004': '浙江省台州市路桥区', '331021': '浙江省台州市玉环县', '331022': '浙江省台州市三门县', '331023': '浙江省台州市天台县', '331024': '浙江省台州市仙居县', '331081': '浙江省台州市温岭市', '331082': '浙江省台州市临海市', '332500': '浙江省丽水地区', '332501': '浙江省丽水地区丽水市', '332502': '浙江省丽水地区龙泉市', '332522': '浙江省丽水地区青田县', '332523': '浙江省丽水地区云和县', '332525': '浙江省丽水地区庆元县', '332526': '浙江省丽水地区缙云县', '332527': '浙江省丽水地区遂昌县', '332528': '浙江省丽水地区松阳县', '332529': '浙江省丽水地区景宁畲族自治县', '340000': '安徽省', '340100': '安徽省合肥市', '340101': '安徽省合肥市市辖区', '340102': '安徽省合肥市东市区', '340103': '安徽省合肥市中市区', '340104': '安徽省合肥市西市区', '340111': '安徽省合肥市郊区', '340121': '安徽省合肥市长丰县', '340122': '安徽省合肥市肥东县', '340123': '安徽省合肥市肥西县', '340200': '安徽省芜湖市', '340201': '安徽省芜湖市市辖区', '340202': '安徽省芜湖市镜湖区', '340203': '安徽省芜湖市马塘区', '340204': '安徽省芜湖市新芜区', '340207': '安徽省芜湖市鸠江区', '340221': '安徽省芜湖市芜湖县', '340222': '安徽省芜湖市繁昌县', '340223': '安徽省芜湖市南陵县', '340300': '安徽省蚌埠市', '340301': '安徽省蚌埠市市辖区', '340302': '安徽省蚌埠市东市区', '340303': '安徽省蚌埠市中市区', '340304': '安徽省蚌埠市西市区', '340311': '安徽省蚌埠市郊区', '340321': '安徽省蚌埠市怀远县', '340322': '安徽省蚌埠市五河县', '340323': '安徽省蚌埠市固镇县', '340400': '安徽省淮南市', '340401': '安徽省淮南市市辖区', '340402': '安徽省淮南市大通区', '340403': '安徽省淮南市田家庵区', '340404': '安徽省淮南市谢家集区', '340405': '安徽省淮南市八公山区', '340406': '安徽省淮南市潘集区', '340421': '安徽省淮南市凤台县', '340500': '安徽省马鞍山市', '340501': '安徽省马鞍山市市辖区', '340502': '安徽省马鞍山市金家庄区', '340503': '安徽省马鞍山市花山区', '340504': '安徽省马鞍山市雨山区', '340505': '安徽省马鞍山市向山区', '340521': '安徽省马鞍山市当涂县', '340600': '安徽省淮北市', '340601': '安徽省淮北市市辖区', '340602': '安徽省淮北市杜集区', '340603': '安徽省淮北市相山区', '340604': '安徽省淮北市烈山区', '340621': '安徽省淮北市濉溪县', '340700': '安徽省铜陵市', '340701': '安徽省铜陵市市辖区', '340702': '安徽省铜陵市铜官山区', '340703': '安徽省铜陵市狮子山区', '340711': '安徽省铜陵市郊区', '340721': '安徽省铜陵市铜陵县', '340800': '安徽省安庆市', '340801': '安徽省安庆市市辖区', '340802': '安徽省安庆市迎江区', '340803': '安徽省安庆市大观区', '340811': '安徽省安庆市郊区', '340822': '安徽省安庆市怀宁县', '340823': '安徽省安庆市枞阳县', '340824': '安徽省安庆市潜山县', '340825': '安徽省安庆市太湖县', '340826': '安徽省安庆市宿松县', '340827': '安徽省安庆市望江县', '340828': '安徽省安庆市岳西县', '340881': '安徽省安庆市桐城市', '341000': '安徽省黄山市', '341001': '安徽省黄山市市辖区', '341002': '安徽省黄山市屯溪区', '341003': '安徽省黄山市黄山区', '341004': '安徽省黄山市徽州区', '341021': '安徽省黄山市歙县', '341022': '安徽省黄山市休宁县', '341023': '安徽省黄山市黟县', '341024': '安徽省黄山市祁门县', '341100': '安徽省滁州市', '341101': '安徽省滁州市市辖区', '341102': '安徽省滁州市琅琊区', '341103': '安徽省滁州市南谯区', '341122': '安徽省滁州市来安县', '341124': '安徽省滁州市全椒县', '341125': '安徽省滁州市定远县', '341126': '安徽省滁州市凤阳县', '341181': '安徽省滁州市天长市', '341182': '安徽省滁州市明光市', '341200': '安徽省阜阳市', '341201': '安徽省阜阳市市辖区', '341202': '安徽省阜阳市颍州区', '341203': '安徽省阜阳市颍东区', '341204': '安徽省阜阳市颍泉区', '341221': '安徽省阜阳市临泉县', '341222': '安徽省阜阳市太和县', '341223': '安徽省阜阳市涡阳县', '341224': '安徽省阜阳市蒙城县', '341225': '安徽省阜阳市阜南县', '341226': '安徽省阜阳市颍上县', '341227': '安徽省阜阳市利辛县', '341281': '安徽省阜阳市亳州市', '341282': '安徽省阜阳市界首市', '341300': '安徽省宿州市', '341301': '安徽省宿州市市辖区', '341302': '安徽省宿州市甬桥区', '341321': '安徽省宿州市砀山县', '341322': '安徽省宿州市萧县', '341323': '安徽省宿州市灵璧县', '341324': '安徽省宿州市泗县', '342400': '安徽省六安地区', '342401': '安徽省六安地区六安市', '342422': '安徽省六安地区寿县', '342423': '安徽省六安地区霍邱县', '342425': '安徽省六安地区舒城县', '342426': '安徽省六安地区金寨县', '342427': '安徽省六安地区霍山县', '342500': '安徽省宣城地区', '342501': '安徽省宣城地区宣州市', '342502': '安徽省宣城地区宁国市', '342522': '安徽省宣城地区郎溪县', '342523': '安徽省宣城地区广德县', '342529': '安徽省宣城地区泾县', '342530': '安徽省宣城地区旌德县', '342531': '安徽省宣城地区绩溪县', '342600': '安徽省巢湖地区', '342601': '安徽省巢湖地区巢湖市', '342622': '安徽省巢湖地区庐江县', '342623': '安徽省巢湖地区无为县', '342625': '安徽省巢湖地区含山县', '342626': '安徽省巢湖地区和县', '342900': '安徽省池州地区', '342901': '安徽省池州地区贵池市', '342921': '安徽省池州地区东至县', '342922': '安徽省池州地区石台县', '342923': '安徽省池州地区青阳县', '350000': '福建省', '350100': '福建省福州市', '350101': '福建省福州市市辖区', '350102': '福建省福州市鼓楼区', '350103': '福建省福州市台江区', '350104': '福建省福州市仓山区', '350105': '福建省福州市马尾区', '350111': '福建省福州市晋安区', '350121': '福建省福州市闽侯县', '350122': '福建省福州市连江县', '350123': '福建省福州市罗源县', '350124': '福建省福州市闽清县', '350125': '福建省福州市永泰县', '350128': '福建省福州市平潭县', '350181': '福建省福州市福清市', '350182': '福建省福州市长乐市', '350200': '福建省厦门市', '350201': '福建省厦门市市辖区', '350202': '福建省厦门市鼓浪屿区', '350203': '福建省厦门市思明区', '350204': '福建省厦门市开元区', '350205': '福建省厦门市杏林区', '350206': '福建省厦门市湖里区', '350211': '福建省厦门市集美区', '350212': '福建省厦门市同安区', '350300': '福建省莆田市', '350301': '福建省莆田市市辖区', '350302': '福建省莆田市城厢区', '350303': '福建省莆田市涵江区', '350321': '福建省莆田市莆田县', '350322': '福建省莆田市仙游县', '350400': '福建省三明市', '350401': '福建省三明市市辖区', '350402': '福建省三明市梅列区', '350403': '福建省三明市三元区', '350421': '福建省三明市明溪县', '350423': '福建省三明市清流县', '350424': '福建省三明市宁化县', '350425': '福建省三明市大田县', '350426': '福建省三明市尤溪县', '350427': '福建省三明市沙县', '350428': '福建省三明市将乐县', '350429': '福建省三明市泰宁县', '350430': '福建省三明市建宁县', '350481': '福建省三明市永安市', '350500': '福建省泉州市', '350501': '福建省泉州市市辖区', '350502': '福建省泉州市鲤城区', '350503': '福建省泉州市丰泽区', '350504': '福建省泉州市洛江区', '350521': '福建省泉州市惠安县', '350524': '福建省泉州市安溪县', '350525': '福建省泉州市永春县', '350526': '福建省泉州市德化县', '350527': '福建省泉州市金门县', '350581': '福建省泉州市石狮市', '350582': '福建省泉州市晋江市', '350583': '福建省泉州市南安市', '350600': '福建省漳州市', '350601': '福建省漳州市市辖区', '350602': '福建省漳州市芗城区', '350603': '福建省漳州市龙文区', '350622': '福建省漳州市云霄县', '350623': '福建省漳州市漳浦县', '350624': '福建省漳州市诏安县', '350625': '福建省漳州市长泰县', '350626': '福建省漳州市东山县', '350627': '福建省漳州市南靖县', '350628': '福建省漳州市平和县', '350629': '福建省漳州市华安县', '350681': '福建省漳州市龙海市', '350700': '福建省南平市', '350701': '福建省南平市市辖区', '350702': '福建省南平市延平区', '350721': '福建省南平市顺昌县', '350722': '福建省南平市浦城县', '350723': '福建省南平市光泽县', '350724': '福建省南平市松溪县', '350725': '福建省南平市政和县', '350781': '福建省南平市邵武市', '350782': '福建省南平市武夷山市', '350783': '福建省南平市建瓯市', '350784': '福建省南平市建阳市', '350800': '福建省龙岩市', '350801': '福建省龙岩市市辖区', '350802': '福建省龙岩市新罗区', '350821': '福建省龙岩市长汀县', '350822': '福建省龙岩市永定县', '350823': '福建省龙岩市上杭县', '350824': '福建省龙岩市武平县', '350825': '福建省龙岩市连城县', '350881': '福建省龙岩市漳平市', '352200': '福建省宁德地区', '352201': '福建省宁德地区宁德市', '352202': '福建省宁德地区福安市', '352203': '福建省宁德地区福鼎市', '352225': '福建省宁德地区霞浦县', '352227': '福建省宁德地区古田县', '352228': '福建省宁德地区屏南县', '352229': '福建省宁德地区寿宁县', '352230': '福建省宁德地区周宁县', '352231': '福建省宁德地区柘荣县', '360000': '江西省', '360100': '江西省南昌市', '360101': '江西省南昌市市辖区', '360102': '江西省南昌市东湖区', '360103': '江西省南昌市西湖区', '360104': '江西省南昌市青云谱区', '360105': '江西省南昌市湾里区', '360111': '江西省南昌市郊区', '360121': '江西省南昌市南昌县', '360122': '江西省南昌市新建县', '360123': '江西省南昌市安义县', '360124': '江西省南昌市进贤县', '360200': '江西省景德镇市', '360201': '江西省景德镇市市辖区', '360202': '江西省景德镇市昌江区', '360203': '江西省景德镇市珠山区', '360222': '江西省景德镇市浮梁县', '360281': '江西省景德镇市乐平市', '360300': '江西省萍乡市', '360301': '江西省萍乡市市辖区', '360302': '江西省萍乡市安源区', '360313': '江西省萍乡市湘东区', '360321': '江西省萍乡市莲花县', '360322': '江西省萍乡市上栗县', '360323': '江西省萍乡市芦溪县', '360400': '江西省九江市', '360401': '江西省九江市市辖区', '360402': '江西省九江市庐山区', '360403': '江西省九江市浔阳区', '360421': '江西省九江市九江县', '360423': '江西省九江市武宁县', '360424': '江西省九江市修水县', '360425': '江西省九江市永修县', '360426': '江西省九江市德安县', '360427': '江西省九江市星子县', '360428': '江西省九江市都昌县', '360429': '江西省九江市湖口县', '360430': '江西省九江市彭泽县', '360481': '江西省九江市瑞昌市', '360500': '江西省新余市', '360501': '江西省新余市市辖区', '360502': '江西省新余市渝水区', '360521': '江西省新余市分宜县', '360600': '江西省鹰潭市', '360601': '江西省鹰潭市市辖区', '360602': '江西省鹰潭市月湖区', '360622': '江西省鹰潭市余江县', '360681': '江西省鹰潭市贵溪市', '360700': '江西省赣州市', '360701': '江西省赣州市市辖区', '360702': '江西省赣州市章贡区', '360721': '江西省赣州市赣县', '360722': '江西省赣州市信丰县', '360723': '江西省赣州市大余县', '360724': '江西省赣州市上犹县', '360725': '江西省赣州市崇义县', '360726': '江西省赣州市安远县', '360727': '江西省赣州市龙南县', '360728': '江西省赣州市定南县', '360729': '江西省赣州市全南县', '360730': '江西省赣州市宁都县', '360731': '江西省赣州市于都县', '360732': '江西省赣州市兴国县', '360733': '江西省赣州市会昌县', '360734': '江西省赣州市寻乌县', '360735': '江西省赣州市石城县', '360781': '江西省赣州市瑞金市', '360782': '江西省赣州市南康市', '362200': '江西省宜春地区', '362201': '江西省宜春地区宜春市', '362202': '江西省宜春地区丰城市', '362203': '江西省宜春地区樟树市', '362204': '江西省宜春地区高安市', '362226': '江西省宜春地区奉新县', '362227': '江西省宜春地区万载县', '362228': '江西省宜春地区上高县', '362229': '江西省宜春地区宜丰县', '362232': '江西省宜春地区靖安县', '362233': '江西省宜春地区铜鼓县', '362300': '江西省上饶地区', '362301': '江西省上饶地区上饶市', '362302': '江西省上饶地区德兴市', '362321': '江西省上饶地区上饶县', '362322': '江西省上饶地区广丰县', '362323': '江西省上饶地区玉山县', '362324': '江西省上饶地区铅山县', '362325': '江西省上饶地区横峰县', '362326': '江西省上饶地区弋阳县', '362329': '江西省上饶地区余干县', '362330': '江西省上饶地区波阳县', '362331': '江西省上饶地区万年县', '362334': '江西省上饶地区婺源县', '362400': '江西省吉安地区', '362401': '江西省吉安地区吉安市', '362402': '江西省吉安地区井冈山市', '362421': '江西省吉安地区吉安县', '362422': '江西省吉安地区吉水县', '362423': '江西省吉安地区峡江县', '362424': '江西省吉安地区新干县', '362425': '江西省吉安地区永丰县', '362426': '江西省吉安地区泰和县', '362427': '江西省吉安地区遂川县', '362428': '江西省吉安地区万安县', '362429': '江西省吉安地区安福县', '362430': '江西省吉安地区永新县', '362432': '江西省吉安地区宁冈县', '362500': '江西省抚州地区', '362502': '江西省抚州地区临川市', '362522': '江西省抚州地区南城县', '362523': '江西省抚州地区黎川县', '362524': '江西省抚州地区南丰县', '362525': '江西省抚州地区崇仁县', '362526': '江西省抚州地区乐安县', '362527': '江西省抚州地区宜黄县', '362528': '江西省抚州地区金溪县', '362529': '江西省抚州地区资溪县', '362531': '江西省抚州地区东乡县', '362532': '江西省抚州地区广昌县', '370000': '山东省', '370100': '山东省济南市', '370101': '山东省济南市市辖区', '370102': '山东省济南市历下区', '370103': '山东省济南市市中区', '370104': '山东省济南市槐荫区', '370105': '山东省济南市天桥区', '370112': '山东省济南市历城区', '370123': '山东省济南市长清县', '370124': '山东省济南市平阴县', '370125': '山东省济南市济阳县', '370126': '山东省济南市商河县', '370181': '山东省济南市章丘市', '370200': '山东省青岛市', '370201': '山东省青岛市市辖区', '370202': '山东省青岛市市南区', '370203': '山东省青岛市市北区', '370205': '山东省青岛市四方区', '370211': '山东省青岛市黄岛区', '370212': '山东省青岛市崂山区', '370213': '山东省青岛市李沧区', '370214': '山东省青岛市城阳区', '370281': '山东省青岛市胶州市', '370282': '山东省青岛市即墨市', '370283': '山东省青岛市平度市', '370284': '山东省青岛市胶南市', '370285': '山东省青岛市莱西市', '370300': '山东省淄博市', '370301': '山东省淄博市市辖区', '370302': '山东省淄博市淄川区', '370303': '山东省淄博市张店区', '370304': '山东省淄博市博山区', '370305': '山东省淄博市临淄区', '370306': '山东省淄博市周村区', '370321': '山东省淄博市桓台县', '370322': '山东省淄博市高青县', '370323': '山东省淄博市沂源县', '370400': '山东省枣庄市', '370401': '山东省枣庄市市辖区', '370402': '山东省枣庄市市中区', '370403': '山东省枣庄市薛城区', '370404': '山东省枣庄市峄城区', '370405': '山东省枣庄市台儿庄区', '370406': '山东省枣庄市山亭区', '370481': '山东省枣庄市滕州市', '370500': '山东省东营市', '370501': '山东省东营市市辖区', '370502': '山东省东营市东营区', '370503': '山东省东营市河口区', '370521': '山东省东营市垦利县', '370522': '山东省东营市利津县', '370523': '山东省东营市广饶县', '370600': '山东省烟台市', '370601': '山东省烟台市市辖区', '370602': '山东省烟台市芝罘区', '370611': '山东省烟台市福山区', '370612': '山东省烟台市牟平区', '370613': '山东省烟台市莱山区', '370634': '山东省烟台市长岛县', '370681': '山东省烟台市龙口市', '370682': '山东省烟台市莱阳市', '370683': '山东省烟台市莱州市', '370684': '山东省烟台市蓬莱市', '370685': '山东省烟台市招远市', '370686': '山东省烟台市栖霞市', '370687': '山东省烟台市海阳市', '370700': '山东省潍坊市', '370701': '山东省潍坊市市辖区', '370702': '山东省潍坊市潍城区', '370703': '山东省潍坊市寒亭区', '370704': '山东省潍坊市坊子区', '370705': '山东省潍坊市奎文区', '370724': '山东省潍坊市临朐县', '370725': '山东省潍坊市昌乐县', '370781': '山东省潍坊市青州市', '370782': '山东省潍坊市诸城市', '370783': '山东省潍坊市寿光市', '370784': '山东省潍坊市安丘市', '370785': '山东省潍坊市高密市', '370786': '山东省潍坊市昌邑市', '370800': '山东省济宁市', '370801': '山东省济宁市市辖区', '370802': '山东省济宁市市中区', '370811': '山东省济宁市任城区', '370826': '山东省济宁市微山县', '370827': '山东省济宁市鱼台县', '370828': '山东省济宁市金乡县', '370829': '山东省济宁市嘉祥县', '370830': '山东省济宁市汶上县', '370831': '山东省济宁市泗水县', '370832': '山东省济宁市梁山县', '370881': '山东省济宁市曲阜市', '370882': '山东省济宁市兖州市', '370883': '山东省济宁市邹城市', '370900': '山东省泰安市', '370901': '山东省泰安市市辖区', '370902': '山东省泰安市泰山区', '370911': '山东省泰安市郊区', '370921': '山东省泰安市宁阳县', '370923': '山东省泰安市东平县', '370982': '山东省泰安市新泰市', '370983': '山东省泰安市肥城市', '371000': '山东省威海市', '371001': '山东省威海市市辖区', '371002': '山东省威海市环翠区', '371081': '山东省威海市文登市', '371082': '山东省威海市荣成市', '371083': '山东省威海市乳山市', '371100': '山东省日照市', '371101': '山东省日照市市辖区', '371102': '山东省日照市东港区', '371121': '山东省日照市五莲县', '371122': '山东省日照市莒县', '371200': '山东省莱芜市', '371201': '山东省莱芜市市辖区', '371202': '山东省莱芜市莱城区', '371203': '山东省莱芜市钢城区', '371300': '山东省临沂市', '371301': '山东省临沂市市辖区', '371302': '山东省临沂市兰山区', '371311': '山东省临沂市罗庄区', '371312': '山东省临沂市河东区', '371321': '山东省临沂市沂南县', '371322': '山东省临沂市郯城县', '371323': '山东省临沂市沂水县', '371324': '山东省临沂市苍山县', '371325': '山东省临沂市费县', '371326': '山东省临沂市平邑县', '371327': '山东省临沂市莒南县', '371328': '山东省临沂市蒙阴县', '371329': '山东省临沂市临沭县', '371400': '山东省德州市', '371401': '山东省德州市市辖区', '371402': '山东省德州市德城区', '371421': '山东省德州市陵县', '371422': '山东省德州市宁津县', '371423': '山东省德州市庆云县', '371424': '山东省德州市临邑县', '371425': '山东省德州市齐河县', '371426': '山东省德州市平原县', '371427': '山东省德州市夏津县', '371428': '山东省德州市武城县', '371481': '山东省德州市乐陵市', '371482': '山东省德州市禹城市', '371500': '山东省聊城市', '371501': '山东省聊城市市辖区', '371502': '山东省聊城市东昌府区', '371521': '山东省聊城市阳谷县', '371522': '山东省聊城市莘县', '371523': '山东省聊城市茌平县', '371524': '山东省聊城市东阿县', '371525': '山东省聊城市冠县', '371526': '山东省聊城市高唐县', '371581': '山东省聊城市临清市', '372300': '山东省滨州地区', '372301': '山东省滨州地区滨州市', '372321': '山东省滨州地区惠民县', '372323': '山东省滨州地区阳信县', '372324': '山东省滨州地区无棣县', '372325': '山东省滨州地区沾化县', '372328': '山东省滨州地区博兴县', '372330': '山东省滨州地区邹平县', '372900': '山东省菏泽地区', '372901': '山东省菏泽地区菏泽市', '372922': '山东省菏泽地区曹县', '372923': '山东省菏泽地区定陶县', '372924': '山东省菏泽地区成武县', '372925': '山东省菏泽地区单县', '372926': '山东省菏泽地区巨野县', '372928': '山东省菏泽地区郓城县', '372929': '山东省菏泽地区鄄城县', '372930': '山东省菏泽地区东明县', '410000': '河南省', '410100': '河南省郑州市', '410101': '河南省郑州市市辖区', '410102': '河南省郑州市中原区', '410103': '河南省郑州市二七区', '410104': '河南省郑州市管城回族区', '410105': '河南省郑州市金水区', '410106': '河南省郑州市上街区', '410108': '河南省郑州市邙山区', '410122': '河南省郑州市中牟县', '410181': '河南省郑州市巩义市', '410182': '河南省郑州市荥阳市', '410183': '河南省郑州市新密市', '410184': '河南省郑州市新郑市', '410185': '河南省郑州市登封市', '410200': '河南省开封市', '410201': '河南省开封市市辖区', '410202': '河南省开封市龙亭区', '410203': '河南省开封市顺河回族区', '410204': '河南省开封市鼓楼区', '410205': '河南省开封市南关区', '410211': '河南省开封市郊区', '410221': '河南省开封市杞县', '410222': '河南省开封市通许县', '410223': '河南省开封市尉氏县', '410224': '河南省开封市开封县', '410225': '河南省开封市兰考县', '410300': '河南省洛阳市', '410301': '河南省洛阳市市辖区', '410302': '河南省洛阳市老城区', '410303': '河南省洛阳市西工区', '410304': '河南省洛阳市廛河回族区', '410305': '河南省洛阳市涧西区', '410306': '河南省洛阳市吉利区', '410311': '河南省洛阳市郊区', '410322': '河南省洛阳市孟津县', '410323': '河南省洛阳市新安县', '410324': '河南省洛阳市栾川县', '410325': '河南省洛阳市嵩县', '410326': '河南省洛阳市汝阳县', '410327': '河南省洛阳市宜阳县', '410328': '河南省洛阳市洛宁县', '410329': '河南省洛阳市伊川县', '410381': '河南省洛阳市偃师市', '410400': '河南省平顶山市', '410401': '河南省平顶山市市辖区', '410402': '河南省平顶山市新华区', '410403': '河南省平顶山市卫东区', '410404': '河南省平顶山市石龙区', '410411': '河南省平顶山市湛河区', '410421': '河南省平顶山市宝丰县', '410422': '河南省平顶山市叶县', '410423': '河南省平顶山市鲁山县', '410425': '河南省平顶山市郏县', '410481': '河南省平顶山市舞钢市', '410482': '河南省平顶山市汝州市', '410500': '河南省安阳市', '410501': '河南省安阳市市辖区', '410502': '河南省安阳市文峰区', '410503': '河南省安阳市北关区', '410504': '河南省安阳市铁西区', '410511': '河南省安阳市郊区', '410522': '河南省安阳市安阳县', '410523': '河南省安阳市汤阴县', '410526': '河南省安阳市滑县', '410527': '河南省安阳市内黄县', '410581': '河南省安阳市林州市', '410600': '河南省鹤壁市', '410601': '河南省鹤壁市市辖区', '410602': '河南省鹤壁市鹤山区', '410603': '河南省鹤壁市山城区', '410611': '河南省鹤壁市郊区', '410621': '河南省鹤壁市浚县', '410622': '河南省鹤壁市淇县', '410700': '河南省新乡市', '410701': '河南省新乡市市辖区', '410702': '河南省新乡市红旗区', '410703': '河南省新乡市新华区', '410704': '河南省新乡市北站区', '410711': '河南省新乡市郊区', '410721': '河南省新乡市新乡县', '410724': '河南省新乡市获嘉县', '410725': '河南省新乡市原阳县', '410726': '河南省新乡市延津县', '410727': '河南省新乡市封丘县', '410728': '河南省新乡市长垣县', '410781': '河南省新乡市卫辉市', '410782': '河南省新乡市辉县市', '410800': '河南省焦作市', '410801': '河南省焦作市市辖区', '410802': '河南省焦作市解放区', '410803': '河南省焦作市中站区', '410804': '河南省焦作市马村区', '410811': '河南省焦作市山阳区', '410821': '河南省焦作市修武县', '410822': '河南省焦作市博爱县', '410823': '河南省焦作市武陟县', '410825': '河南省焦作市温县', '410881': '河南省焦作市济源市', '410882': '河南省焦作市沁阳市', '410883': '河南省焦作市孟州市', '410900': '河南省濮阳市', '410901': '河南省濮阳市市辖区', '410902': '河南省濮阳市市区', '410922': '河南省濮阳市清丰县', '410923': '河南省濮阳市南乐县', '410926': '河南省濮阳市范县', '410927': '河南省濮阳市台前县', '410928': '河南省濮阳市濮阳县', '411000': '河南省许昌市', '411001': '河南省许昌市市辖区', '411002': '河南省许昌市魏都区', '411023': '河南省许昌市许昌县', '411024': '河南省许昌市鄢陵县', '411025': '河南省许昌市襄城县', '411081': '河南省许昌市禹州市', '411082': '河南省许昌市长葛市', '411100': '河南省漯河市', '411101': '河南省漯河市市辖区', '411102': '河南省漯河市源汇区', '411121': '河南省漯河市舞阳县', '411122': '河南省漯河市临颍县', '411123': '河南省漯河市郾城县', '411200': '河南省三门峡市', '411201': '河南省三门峡市市辖区', '411202': '河南省三门峡市湖滨区', '411221': '河南省三门峡市渑池县', '411222': '河南省三门峡市陕县', '411224': '河南省三门峡市卢氏县', '411281': '河南省三门峡市义马市', '411282': '河南省三门峡市灵宝市', '411300': '河南省南阳市', '411301': '河南省南阳市市辖区', '411302': '河南省南阳市宛城区', '411303': '河南省南阳市卧龙区', '411321': '河南省南阳市南召县', '411322': '河南省南阳市方城县', '411323': '河南省南阳市西峡县', '411324': '河南省南阳市镇平县', '411325': '河南省南阳市内乡县', '411326': '河南省南阳市淅川县', '411327': '河南省南阳市社旗县', '411328': '河南省南阳市唐河县', '411329': '河南省南阳市新野县', '411330': '河南省南阳市桐柏县', '411381': '河南省南阳市邓州市', '411400': '河南省商丘市', '411401': '河南省商丘市市辖区', '411402': '河南省商丘市梁园区', '411403': '河南省商丘市睢阳区', '411421': '河南省商丘市民权县', '411422': '河南省商丘市睢县', '411423': '河南省商丘市宁陵县', '411424': '河南省商丘市柘城县', '411425': '河南省商丘市虞城县', '411426': '河南省商丘市夏邑县', '411481': '河南省商丘市永城市', '411500': '河南省信阳市', '411501': '河南省信阳市市辖区', '411502': '河南省信阳市师河区', '411503': '河南省信阳市平桥区', '411521': '河南省信阳市罗山县', '411522': '河南省信阳市光山县', '411523': '河南省信阳市新县', '411524': '河南省信阳市商城县', '411525': '河南省信阳市固始县', '411526': '河南省信阳市潢川县', '411527': '河南省信阳市淮滨县', '411528': '河南省信阳市息县', '412700': '河南省周口地区', '412701': '河南省周口地区周口市', '412702': '河南省周口地区项城市', '412721': '河南省周口地区扶沟县', '412722': '河南省周口地区西华县', '412723': '河南省周口地区商水县', '412724': '河南省周口地区太康县', '412725': '河南省周口地区鹿邑县', '412726': '河南省周口地区郸城县', '412727': '河南省周口地区淮阳县', '412728': '河南省周口地区沈丘县', '412800': '河南省驻马店地区', '412801': '河南省驻马店地区驻马店市', '412821': '河南省驻马店地区确山县', '412822': '河南省驻马店地区泌阳县', '412823': '河南省驻马店地区遂平县', '412824': '河南省驻马店地区西平县', '412825': '河南省驻马店地区上蔡县', '412826': '河南省驻马店地区汝南县', '412827': '河南省驻马店地区平舆县', '412828': '河南省驻马店地区新蔡县', '412829': '河南省驻马店地区正阳县', '420000': '湖北省', '420100': '湖北省武汉市', '420101': '湖北省武汉市市辖区', '420102': '湖北省武汉市江岸区', '420103': '湖北省武汉市江汉区', '420104': '湖北省武汉市乔口区', '420105': '湖北省武汉市汉阳区', '420106': '湖北省武汉市武昌区', '420107': '湖北省武汉市青山区', '420111': '湖北省武汉市洪山区', '420112': '湖北省武汉市东西湖区', '420113': '湖北省武汉市汉南区', '420114': '湖北省武汉市蔡甸区', '420115': '湖北省武汉市江夏区', '420116': '湖北省武汉市黄陂区', '420117': '湖北省武汉市新洲区', '420200': '湖北省黄石市', '420201': '湖北省黄石市市辖区', '420202': '湖北省黄石市黄石港区', '420203': '湖北省黄石市石灰窑区', '420204': '湖北省黄石市下陆区', '420205': '湖北省黄石市铁山区', '420222': '湖北省黄石市阳新县', '420281': '湖北省黄石市大冶市', '420300': '湖北省十堰市', '420301': '湖北省十堰市市辖区', '420302': '湖北省十堰市茅箭区', '420303': '湖北省十堰市张湾区', '420321': '湖北省十堰市郧县', '420322': '湖北省十堰市郧西县', '420323': '湖北省十堰市竹山县', '420324': '湖北省十堰市竹溪县', '420325': '湖北省十堰市房县', '420381': '湖北省十堰市丹江口市', '420500': '湖北省宜昌市', '420501': '湖北省宜昌市市辖区', '420502': '湖北省宜昌市西陵区', '420503': '湖北省宜昌市伍家岗区', '420504': '湖北省宜昌市点军区', '420505': '湖北省宜昌市虎亭区', '420521': '湖北省宜昌市宜昌县', '420525': '湖北省宜昌市远安县', '420526': '湖北省宜昌市兴山县', '420527': '湖北省宜昌市秭归县', '420528': '湖北省宜昌市长阳土家族自治县', '420529': '湖北省宜昌市五峰土家族自治县', '420581': '湖北省宜昌市宜都市', '420582': '湖北省宜昌市当阳市', '420583': '湖北省宜昌市枝江市', '420600': '湖北省襄樊市', '420601': '湖北省襄樊市市辖区', '420602': '湖北省襄樊市襄城区', '420606': '湖北省襄樊市樊城区', '420621': '湖北省襄樊市襄阳县', '420624': '湖北省襄樊市南漳县', '420625': '湖北省襄樊市谷城县', '420626': '湖北省襄樊市保康县', '420682': '湖北省襄樊市老河口市', '420683': '湖北省襄樊市枣阳市', '420684': '湖北省襄樊市宜城市', '420700': '湖北省鄂州市', '420701': '湖北省鄂州市市辖区', '420702': '湖北省鄂州市梁子湖区', '420703': '湖北省鄂州市华容区', '420704': '湖北省鄂州市鄂城区', '420800': '湖北省荆门市', '420801': '湖北省荆门市市辖区', '420802': '湖北省荆门市东宝区', '420821': '湖北省荆门市京山县', '420822': '湖北省荆门市沙洋县', '420881': '湖北省荆门市钟祥市', '420900': '湖北省孝感市', '420901': '湖北省孝感市市辖区', '420902': '湖北省孝感市孝南区', '420921': '湖北省孝感市孝昌县', '420922': '湖北省孝感市大悟县', '420923': '湖北省孝感市云梦县', '420981': '湖北省孝感市应城市', '420982': '湖北省孝感市安陆市', '420983': '湖北省孝感市广水市', '420984': '湖北省孝感市汉川市', '421000': '湖北省荆州市', '421001': '湖北省荆州市市辖区', '421002': '湖北省荆州市沙市区', '421003': '湖北省荆州市荆州区', '421022': '湖北省荆州市公安县', '421023': '湖北省荆州市监利县', '421024': '湖北省荆州市江陵县', '421081': '湖北省荆州市石首市', '421083': '湖北省荆州市洪湖市', '421087': '湖北省荆州市松滋市', '421100': '湖北省黄冈市', '421101': '湖北省黄冈市市辖区', '421102': '湖北省黄冈市黄州区', '421121': '湖北省黄冈市团风县', '421122': '湖北省黄冈市红安县', '421123': '湖北省黄冈市罗田县', '421124': '湖北省黄冈市英山县', '421125': '湖北省黄冈市浠水县', '421126': '湖北省黄冈市蕲春县', '421127': '湖北省黄冈市黄梅县', '421181': '湖北省黄冈市麻城市', '421182': '湖北省黄冈市武穴市', '421200': '湖北省咸宁市', '421201': '湖北省咸宁市市辖区', '421202': '湖北省咸宁市咸安区', '421221': '湖北省咸宁市嘉鱼县', '421222': '湖北省咸宁市通城县', '421223': '湖北省咸宁市崇阳县', '421224': '湖北省咸宁市通山县', '422800': '湖北省施土家族苗族自治州', '422801': '湖北省恩施土家族苗族自治州恩施县', '422802': '湖北省恩施土家族苗族自治州利川市', '422822': '湖北省恩施土家族苗族自治州建始县', '422823': '湖北省恩施土家族苗族自治州巴东县', '422825': '湖北省恩施土家族苗族自治州宣恩县', '422826': '湖北省恩施土家族苗族自治州咸丰县', '422827': '湖北省恩施土家族苗族自治州来凤县', '422828': '湖北省恩施土家族苗族自治州鹤峰县', '429000': '湖北省省直辖县级行政单位', '429001': '湖北省随州市', '429004': '湖北省仙桃市', '429005': '湖北省潜江市', '429006': '湖北省天门市', '429021': '湖北省神农架林区', '430000': '湖南省', '430100': '湖南省长沙市', '430101': '湖南省长沙市市辖区', '430102': '湖南省长沙市芙蓉区', '430103': '湖南省长沙市天心区', '430104': '湖南省长沙市岳麓区', '430105': '湖南省长沙市开福区', '430111': '湖南省长沙市雨花区', '430121': '湖南省长沙市长沙县', '430122': '湖南省长沙市望城县', '430124': '湖南省长沙市宁乡县', '430181': '湖南省长沙市浏阳市', '430200': '湖南省株洲市', '430201': '湖南省株洲市市辖区', '430202': '湖南省株洲市荷塘区', '430203': '湖南省株洲市芦淞区', '430204': '湖南省株洲市石峰区', '430211': '湖南省株洲市天元区', '430221': '湖南省株洲市株洲县', '430223': '湖南省株洲市攸县', '430224': '湖南省株洲市茶陵县', '430225': '湖南省株洲市炎陵县', '430281': '湖南省株洲市醴陵市', '430300': '湖南省湘潭市', '430301': '湖南省湘潭市市辖区', '430302': '湖南省湘潭市雨湖区', '430304': '湖南省湘潭市岳塘区', '430321': '湖南省湘潭市湘潭县', '430381': '湖南省湘潭市湘乡市', '430382': '湖南省湘潭市韶山市', '430400': '湖南省衡阳市', '430401': '湖南省衡阳市市辖区', '430402': '湖南省衡阳市江东区', '430403': '湖南省衡阳市城南区', '430404': '湖南省衡阳市城北区', '430411': '湖南省衡阳市郊区', '430412': '湖南省衡阳市南岳区', '430421': '湖南省衡阳市衡阳县', '430422': '湖南省衡阳市衡南县', '430423': '湖南省衡阳市衡山县', '430424': '湖南省衡阳市衡东县', '430426': '湖南省衡阳市祁东县', '430481': '湖南省衡阳市耒阳市', '430482': '湖南省衡阳市常宁市', '430500': '湖南省邵阳市', '430501': '湖南省邵阳市市辖区', '430502': '湖南省邵阳市双清区', '430503': '湖南省邵阳市大祥区', '430511': '湖南省邵阳市北塔区', '430521': '湖南省邵阳市邵东县', '430522': '湖南省邵阳市新邵县', '430523': '湖南省邵阳市邵阳县', '430524': '湖南省邵阳市隆回县', '430525': '湖南省邵阳市洞口县', '430527': '湖南省邵阳市绥宁县', '430528': '湖南省邵阳市新宁县', '430529': '湖南省邵阳市城步苗族自治县', '430581': '湖南省邵阳市武冈市', '430600': '湖南省岳阳市', '430601': '湖南省岳阳市市辖区', '430602': '湖南省岳阳市岳阳楼区', '430603': '湖南省岳阳市云溪区', '430611': '湖南省岳阳市君山区', '430621': '湖南省岳阳市岳阳县', '430623': '湖南省岳阳市华容县', '430624': '湖南省岳阳市湘阴县', '430626': '湖南省岳阳市平江县', '430681': '湖南省岳阳市汨罗市', '430682': '湖南省岳阳市临湘市', '430700': '湖南省常德市', '430701': '湖南省常德市市辖区', '430702': '湖南省常德市武陵区', '430703': '湖南省常德市鼎城区', '430721': '湖南省常德市安乡县', '430722': '湖南省常德市汉寿县', '430723': '湖南省常德市澧县', '430724': '湖南省常德市临澧县', '430725': '湖南省常德市桃源县', '430726': '湖南省常德市石门县', '430781': '湖南省常德市津市市', '430800': '湖南省张家界市', '430801': '湖南省张家界市市辖区', '430802': '湖南省张家界市永定区', '430811': '湖南省张家界市武陵源区', '430821': '湖南省张家界市慈利县', '430822': '湖南省张家界市桑植县', '430900': '湖南省益阳市', '430901': '湖南省益阳市市辖区', '430902': '湖南省益阳市资阳区', '430903': '湖南省益阳市赫山区', '430921': '湖南省益阳市南县', '430922': '湖南省益阳市桃江县', '430923': '湖南省益阳市安化县', '430981': '湖南省益阳市沅江市', '431000': '湖南省郴州市', '431001': '湖南省郴州市市辖区', '431002': '湖南省郴州市北湖区', '431003': '湖南省郴州市苏仙区', '431021': '湖南省郴州市桂阳县', '431022': '湖南省郴州市宜章县', '431023': '湖南省郴州市永兴县', '431024': '湖南省郴州市嘉禾县', '431025': '湖南省郴州市临武县', '431026': '湖南省郴州市汝城县', '431027': '湖南省郴州市桂东县', '431028': '湖南省郴州市安仁县', '431081': '湖南省郴州市资兴市', '431100': '湖南省永州市', '431101': '湖南省永州市市辖区', '431102': '湖南省永州市芝山区', '431103': '湖南省永州市冷水滩区', '431121': '湖南省永州市祁阳县', '431122': '湖南省永州市东安县', '431123': '湖南省永州市双牌县', '431124': '湖南省永州市道县', '431125': '湖南省永州市江永县', '431126': '湖南省永州市宁远县', '431127': '湖南省永州市蓝山县', '431128': '湖南省永州市新田县', '431129': '湖南省永州市江华瑶族自治县', '431200': '湖南省怀化市', '431201': '湖南省怀化市市辖区', '431202': '湖南省怀化市鹤城区', '431221': '湖南省怀化市中方县', '431222': '湖南省怀化市沅陵县', '431223': '湖南省怀化市辰溪县', '431224': '湖南省怀化市溆浦县', '431225': '湖南省怀化市会同县', '431226': '湖南省怀化市麻阳苗族自治县', '431227': '湖南省怀化市新晃侗族自治县', '431228': '湖南省怀化市芷江侗族自治县', '431229': '湖南省怀化市靖州苗族侗族自治县', '431230': '湖南省怀化市通道侗族自治县', '431281': '湖南省怀化市洪江市', '432500': '湖南省娄底地区', '432501': '湖南省娄底地区娄底市', '432502': '湖南省娄底地区冷水江市', '432503': '湖南省娄底地区涟源市', '432522': '湖南省娄底地区双峰县', '432524': '湖南省娄底地区新化县', '433000': '湖南省怀化市', '433001': '湖南省怀化市', '433100': '湖南省湘西土家族苗族自治州', '433101': '湖南省湘西土家族苗族自治州吉首市', '433122': '湖南省湘西土家族苗族自治州泸溪县', '433123': '湖南省湘西土家族苗族自治州凤凰县', '433124': '湖南省湘西土家族苗族自治州花垣县', '433125': '湖南省湘西土家族苗族自治州保靖县', '433126': '湖南省湘西土家族苗族自治州古丈县', '433127': '湖南省湘西土家族苗族自治州永顺县', '433130': '湖南省湘西土家族苗族自治州龙山县', '440000': '广东省', '440100': '广东省广州市', '440101': '广东省广州市市辖区', '440102': '广东省广州市东山区', '440103': '广东省广州市荔湾区', '440104': '广东省广州市越秀区', '440105': '广东省广州市海珠区', '440106': '广东省广州市天河区', '440107': '广东省广州市芳村区', '440111': '广东省广州市白云区', '440112': '广东省广州市黄埔区', '440181': '广东省广州市番禺市', '440182': '广东省广州市花都市', '440183': '广东省广州市增城市', '440184': '广东省广州市从化市', '440200': '广东省韶关市', '440201': '广东省韶关市市辖区', '440202': '广东省韶关市北江区', '440203': '广东省韶关市武江区', '440204': '广东省韶关市浈江区', '440221': '广东省韶关市曲江县', '440222': '广东省韶关市始兴县', '440224': '广东省韶关市仁化县', '440229': '广东省韶关市翁源县', '440232': '广东省韶关市乳源瑶族自治县', '440233': '广东省韶关市新丰县', '440281': '广东省韶关市乐昌市', '440282': '广东省韶关市南雄市', '440300': '广东省深圳市', '440301': '广东省深圳市市辖区', '440303': '广东省深圳市罗湖区', '440304': '广东省深圳市福田区', '440305': '广东省深圳市南山区', '440306': '广东省深圳市宝安区', '440307': '广东省深圳市龙岗区', '440308': '广东省深圳市盐田区', '440400': '广东省珠海市', '440401': '广东省珠海市市辖区', '440402': '广东省珠海市香洲区', '440421': '广东省珠海市斗门县', '440500': '广东省汕头市', '440501': '广东省汕头市市辖区', '440506': '广东省汕头市达濠区', '440507': '广东省汕头市龙湖区', '440508': '广东省汕头市金园区', '440509': '广东省汕头市升平区', '440510': '广东省汕头市河浦区', '440523': '广东省汕头市南澳县', '440582': '广东省汕头市潮阳市', '440583': '广东省汕头市澄海市', '440600': '广东省佛山市', '440601': '广东省佛山市市辖区', '440602': '广东省佛山市城区', '440603': '广东省佛山市石湾区', '440681': '广东省佛山市顺德市', '440682': '广东省佛山市南海市', '440683': '广东省佛山市三水市', '440684': '广东省佛山市高明市', '440700': '广东省江门市', '440701': '广东省江门市市辖区', '440703': '广东省江门市蓬江区', '440704': '广东省江门市江海区', '440781': '广东省江门市台山市', '440782': '广东省江门市新会市', '440783': '广东省江门市开平市', '440784': '广东省江门市鹤山市', '440785': '广东省江门市恩平市', '440800': '广东省湛江市', '440801': '广东省湛江市市辖区', '440802': '广东省湛江市赤坎区', '440803': '广东省湛江市霞山区', '440804': '广东省湛江市坡头区', '440811': '广东省湛江市麻章区', '440823': '广东省湛江市遂溪县', '440825': '广东省湛江市徐闻县', '440881': '广东省湛江市廉江市', '440882': '广东省湛江市雷州市', '440883': '广东省湛江市吴川市', '440900': '广东省茂名市', '440901': '广东省茂名市市辖区', '440902': '广东省茂名市茂南区', '440923': '广东省茂名市电白县', '440981': '广东省茂名市高州市', '440982': '广东省茂名市化州市', '440983': '广东省茂名市信宜市', '441200': '广东省肇庆市', '441201': '广东省肇庆市市辖区', '441202': '广东省肇庆市端州区', '441203': '广东省肇庆市鼎湖区', '441223': '广东省肇庆市广宁县', '441224': '广东省肇庆市怀集县', '441225': '广东省肇庆市封开县', '441226': '广东省肇庆市德庆县', '441283': '广东省肇庆市高要市', '441284': '广东省肇庆市四会市', '441300': '广东省惠州市', '441301': '广东省惠州市市辖区', '441302': '广东省惠州市惠城区', '441322': '广东省惠州市博罗县', '441323': '广东省惠州市惠东县', '441324': '广东省惠州市龙门县', '441381': '广东省惠州市惠阳市', '441400': '广东省梅州市', '441401': '广东省梅州市市辖区', '441402': '广东省梅州市梅江区', '441421': '广东省梅州市梅县', '441422': '广东省梅州市大埔县', '441423': '广东省梅州市丰顺县', '441424': '广东省梅州市五华县', '441426': '广东省梅州市平远县', '441427': '广东省梅州市蕉岭县', '441481': '广东省梅州市兴宁市', '441500': '广东省汕尾市', '441501': '广东省汕尾市市辖区', '441502': '广东省汕尾市城区', '441521': '广东省汕尾市海丰县', '441523': '广东省汕尾市陆河县', '441581': '广东省汕尾市陆丰市', '441600': '广东省河源市', '441601': '广东省河源市市辖区', '441602': '广东省河源市源城区', '441621': '广东省河源市紫金县', '441622': '广东省河源市龙川县', '441623': '广东省河源市连平县', '441624': '广东省河源市和平县', '441625': '广东省河源市东源县', '441700': '广东省阳江市', '441701': '广东省阳江市市辖区', '441702': '广东省阳江市江城区', '441721': '广东省阳江市阳西县', '441723': '广东省阳江市阳东县', '441781': '广东省阳江市阳春市', '441800': '广东省清远市', '441801': '广东省清远市市辖区', '441802': '广东省清远市清城区', '441821': '广东省清远市佛冈县', '441823': '广东省清远市阳山县', '441825': '广东省清远市连山壮族瑶族自治县', '441826': '广东省清远市连南瑶族自治县', '441827': '广东省清远市清新县', '441881': '广东省清远市英德市', '441882': '广东省清远市连州市', '441900': '广东省东莞市', '441901': '广东省东莞市市辖区', '442000': '广东省中山市', '442001': '广东省中山市市辖区', '445100': '广东省潮州市', '445101': '广东省潮州市市辖区', '445102': '广东省潮州市湘桥区', '445121': '广东省潮州市潮安县', '445122': '广东省潮州市饶平县', '445200': '广东省揭阳市', '445201': '广东省揭阳市市辖区', '445202': '广东省揭阳市榕城区', '445221': '广东省揭阳市揭东县', '445222': '广东省揭阳市揭西县', '445224': '广东省揭阳市惠来县', '445281': '广东省揭阳市普宁市', '445300': '广东省云浮市', '445301': '广东省云浮市市辖区', '445302': '广东省云浮市云城区', '445321': '广东省云浮市新兴县', '445322': '广东省云浮市郁南县', '445323': '广东省云浮市云安县', '445381': '广东省云浮市罗定市', '450000': '广西壮族自治区', '450100': '广西壮族自治区南宁市', '450101': '广西壮族自治区南宁市市辖区', '450102': '广西壮族自治区南宁市兴宁区', '450103': '广西壮族自治区南宁市新城区', '450104': '广西壮族自治区南宁市城北区', '450105': '广西壮族自治区南宁市江南区', '450106': '广西壮族自治区南宁市永新区', '450111': '广西壮族自治区南宁市市郊区', '450121': '广西壮族自治区南宁市邕宁县', '450122': '广西壮族自治区南宁市武鸣县', '450200': '广西壮族自治区柳州市', '450201': '广西壮族自治区柳州市市辖区', '450202': '广西壮族自治区柳州市城中区', '450203': '广西壮族自治区柳州市鱼峰区', '450204': '广西壮族自治区柳州市柳南区', '450205': '广西壮族自治区柳州市柳北区', '450211': '广西壮族自治区柳州市市郊区', '450221': '广西壮族自治区柳州市柳江县', '450222': '广西壮族自治区柳州市柳城县', '450300': '广西壮族自治区桂林市', '450301': '广西壮族自治区桂林市市辖区', '450302': '广西壮族自治区桂林市秀峰区', '450303': '广西壮族自治区桂林市叠彩区', '450304': '广西壮族自治区桂林市象山区', '450305': '广西壮族自治区桂林市七星区', '450311': '广西壮族自治区桂林市雁山区', '450321': '广西壮族自治区桂林市阳朔县', '450322': '广西壮族自治区桂林市临桂县', '450323': '广西壮族自治区桂林市灵川县', '450324': '广西壮族自治区桂林市全州县', '450325': '广西壮族自治区桂林市兴安县', '450326': '广西壮族自治区桂林市永福县', '450327': '广西壮族自治区桂林市灌阳县', '450328': '广西壮族自治区桂林市龙胜各族自治县', '450329': '广西壮族自治区桂林市资源县', '450330': '广西壮族自治区桂林市平乐县', '450331': '广西壮族自治区桂林市荔浦县', '450332': '广西壮族自治区桂林市恭城瑶族自治县', '450400': '广西壮族自治区梧州市', '450401': '广西壮族自治区梧州市市辖区', '450403': '广西壮族自治区梧州市万秀区', '450404': '广西壮族自治区梧州市蝶山区', '450411': '广西壮族自治区梧州市市郊区', '450421': '广西壮族自治区梧州市苍梧县', '450422': '广西壮族自治区梧州市藤县', '450423': '广西壮族自治区梧州市蒙山县', '450481': '广西壮族自治区梧州市岑溪市', '450500': '广西壮族自治区北海市', '450501': '广西壮族自治区北海市市辖区', '450502': '广西壮族自治区北海市海城区', '450503': '广西壮族自治区北海市银海区', '450512': '广西壮族自治区北海市铁山港区', '450521': '广西壮族自治区北海市合浦县', '450600': '广西壮族自治区防城港市', '450601': '广西壮族自治区防城港市市辖区', '450602': '广西壮族自治区防城港市港口区', '450603': '广西壮族自治区防城港市防城区', '450621': '广西壮族自治区防城港市上思县', '450681': '广西壮族自治区防城港市东兴市', '450700': '广西壮族自治区钦州市', '450701': '广西壮族自治区钦州市市辖区', '450702': '广西壮族自治区钦州市钦南区', '450703': '广西壮族自治区钦州市钦北区', '450721': '广西壮族自治区钦州市灵山县', '450722': '广西壮族自治区钦州市浦北县', '450800': '广西壮族自治区贵港市', '450801': '广西壮族自治区贵港市市辖区', '450802': '广西壮族自治区贵港市港北区', '450803': '广西壮族自治区贵港市港南区', '450821': '广西壮族自治区贵港市平南县', '450881': '广西壮族自治区贵港市桂平市', '450900': '广西壮族自治区玉林市', '450901': '广西壮族自治区玉林市市辖区', '450902': '广西壮族自治区玉林市玉州区', '450921': '广西壮族自治区玉林市容县', '450922': '广西壮族自治区玉林市陆川县', '450923': '广西壮族自治区玉林市博白县', '450924': '广西壮族自治区玉林市兴业县', '450981': '广西壮族自治区玉林市北流市', '452100': '广西壮族自治区南宁地区', '452101': '广西壮族自治区南宁地区凭祥市', '452122': '广西壮族自治区南宁地区横县', '452123': '广西壮族自治区南宁地区宾阳县', '452124': '广西壮族自治区南宁地区上林县', '452126': '广西壮族自治区南宁地区隆安县', '452127': '广西壮族自治区南宁地区马山县', '452128': '广西壮族自治区南宁地区扶绥县', '452129': '广西壮族自治区南宁地区崇左县', '452130': '广西壮族自治区南宁地区大新县', '452131': '广西壮族自治区南宁地区天等县', '452132': '广西壮族自治区南宁地区宁明县', '452133': '广西壮族自治区南宁地区龙州县', '452200': '广西壮族自治区柳州地区', '452201': '广西壮族自治区柳州地区合山市', '452223': '广西壮族自治区柳州地区鹿寨县', '452224': '广西壮族自治区柳州地区象州县', '452225': '广西壮族自治区柳州地区武宣县', '452226': '广西壮族自治区柳州地区来宾县', '452227': '广西壮族自治区柳州地区融安县', '452228': '广西壮族自治区柳州地区三江侗族自治县', '452229': '广西壮族自治区柳州地区融水苗族自治县', '452230': '广西壮族自治区柳州地区金秀瑶族自治县', '452231': '广西壮族自治区柳州地区忻城县', '452400': '广西壮族自治区贺州地区', '452402': '广西壮族自治区贺州地区贺州市', '452424': '广西壮族自治区贺州地区昭平县', '452427': '广西壮族自治区贺州地区钟山县', '452428': '广西壮族自治区贺州地区富川瑶族自治县', '452600': '广西壮族自治区百色地区', '452601': '广西壮族自治区百色地区百色市', '452622': '广西壮族自治区百色地区田阳县', '452623': '广西壮族自治区百色地区田东县', '452624': '广西壮族自治区百色地区平果县', '452625': '广西壮族自治区百色地区德保县', '452626': '广西壮族自治区百色地区靖西县', '452627': '广西壮族自治区百色地区那坡县', '452628': '广西壮族自治区百色地区凌云县', '452629': '广西壮族自治区百色地区乐业县', '452630': '广西壮族自治区百色地区田林县', '452631': '广西壮族自治区百色地区隆林各族自治县', '452632': '广西壮族自治区百色地区西林县', '452700': '广西壮族自治区河池地区', '452701': '广西壮族自治区河池地区河池市', '452702': '广西壮族自治区河池地区宜州市', '452723': '广西壮族自治区河池地区罗城仫佬族自治县', '452724': '广西壮族自治区河池地区环江毛南族自治县', '452725': '广西壮族自治区河池地区南丹县', '452726': '广西壮族自治区河池地区天峨县', '452727': '广西壮族自治区河池地区凤山县', '452728': '广西壮族自治区河池地区东兰县', '452729': '广西壮族自治区河池地区巴马瑶族自治县', '452730': '广西壮族自治区河池地区都安瑶族自治县', '452731': '广西壮族自治区河池地区大化瑶族自治县', '460000': '海南省', '460001': '海南省三亚市通什市', '460002': '海南省三亚市琼海市', '460003': '海南省三亚市儋州市', '460004': '海南省三亚市琼山市', '460005': '海南省三亚市文昌市', '460006': '海南省三亚市万宁市', '460007': '海南省三亚市东方市', '460025': '海南省三亚市定安县', '460026': '海南省三亚市屯昌县', '460027': '海南省三亚市澄迈县', '460028': '海南省三亚市临高县', '460030': '海南省三亚市白沙黎族自治县', '460031': '海南省三亚市昌江黎族自治县', '460033': '海南省三亚市乐东黎族自治县', '460034': '海南省三亚市陵水黎族自治县', '460035': '海南省三亚市保亭黎族苗族自治县', '460036': '海南省三亚市琼中黎族苗族自治县', '460037': '海南省西沙群岛', '460038': '海南省南沙群岛', '460039': '海南省中沙群岛的岛礁及其海域', '460100': '海南省海口市', '460101': '海南省海口市市辖区', '460102': '海南省海口市振东区', '460103': '海南省海口市新华区', '460104': '海南省海口市秀英区', '460200': '海南省三亚市', '460201': '海南省三亚市市辖区', '500000': '重庆市', '500100': '重庆市市辖区', '500101': '重庆市万州区', '500102': '重庆市涪陵区', '500103': '重庆市渝中区', '500104': '重庆市大渡口区', '500105': '重庆市江北区', '500106': '重庆市沙坪坝区', '500107': '重庆市九龙坡区', '500108': '重庆市南岸区', '500109': '重庆市北碚区', '500110': '重庆市万盛区', '500111': '重庆市双桥区', '500112': '重庆市渝北区', '500113': '重庆市巴南区', '500200': '重庆市县', '500221': '重庆市长寿县', '500222': '重庆市綦江县', '500223': '重庆市潼南县', '500224': '重庆市铜梁县', '500225': '重庆市大足县', '500226': '重庆市荣昌县', '500227': '重庆市璧山县', '500228': '重庆市梁平县', '500229': '重庆市城口县', '500230': '重庆市丰都县', '500231': '重庆市垫江县', '500232': '重庆市武隆县', '500233': '重庆市忠县', '500234': '重庆市开县', '500235': '重庆市云阳县', '500236': '重庆市奉节县', '500237': '重庆市巫山县', '500238': '重庆市巫溪县', '500239': '重庆市黔江土家族苗族自治县', '500240': '重庆市石柱土家族自治县', '500241': '重庆市秀山土家族苗族自治县', '500242': '重庆市酉阳土家族苗族自治县', '500243': '重庆市彭水苗族土家族自治县', '500300': '重庆市(市)', '500381': '重庆市江津市', '500382': '重庆市合川市', '500383': '重庆市永川市', '500384': '重庆市南川市', '510000': '四川省', '510100': '四川省成都市', '510101': '四川省成都市市辖区', '510104': '四川省成都市锦江区', '510105': '四川省成都市青羊区', '510106': '四川省成都市金牛区', '510107': '四川省成都市武侯区', '510108': '四川省成都市成华区', '510112': '四川省成都市龙泉驿区', '510113': '四川省成都市青白江区', '510121': '四川省成都市金堂县', '510122': '四川省成都市双流县', '510123': '四川省成都市温江县', '510124': '四川省成都市郫县', '510125': '四川省成都市新都县', '510129': '四川省成都市大邑县', '510131': '四川省成都市蒲江县', '510132': '四川省成都市新津县', '510181': '四川省成都市都江堰市', '510182': '四川省成都市彭州市', '510183': '四川省成都市邛崃市', '510184': '四川省成都市崇州市', '510300': '四川省自贡市', '510301': '四川省自贡市市辖区', '510302': '四川省自贡市自流井区', '510303': '四川省自贡市贡井区', '510304': '四川省自贡市大安区', '510311': '四川省自贡市沿滩区', '510321': '四川省自贡市荣县', '510322': '四川省自贡市富顺县', '510400': '四川省攀枝花市', '510401': '四川省攀枝花市市辖区', '510402': '四川省攀枝花市东区', '510403': '四川省攀枝花市西区', '510411': '四川省攀枝花市仁和区', '510421': '四川省攀枝花市米易县', '510422': '四川省攀枝花市盐边县', '510500': '四川省泸州市', '510501': '四川省泸州市市辖区', '510502': '四川省泸州市江阳区', '510503': '四川省泸州市纳溪区', '510504': '四川省泸州市龙马潭区', '510521': '四川省泸州市泸县', '510522': '四川省泸州市合江县', '510524': '四川省泸州市叙永县', '510525': '四川省泸州市古蔺县', '510600': '四川省德阳市', '510601': '四川省德阳市市辖区', '510603': '四川省德阳市旌阳区', '510623': '四川省德阳市中江县', '510626': '四川省德阳市罗江县', '510681': '四川省德阳市广汉市', '510682': '四川省德阳市什邡市', '510683': '四川省德阳市绵竹市', '510700': '四川省绵阳市', '510701': '四川省绵阳市市辖区', '510703': '四川省绵阳市涪城区', '510704': '四川省绵阳市游仙区', '510722': '四川省绵阳市三台县', '510723': '四川省绵阳市盐亭县', '510724': '四川省绵阳市安县', '510725': '四川省绵阳市梓潼县', '510726': '四川省绵阳市北川县', '510727': '四川省绵阳市平武县', '510781': '四川省绵阳市江油市', '510800': '四川省广元市', '510801': '四川省广元市市辖区', '510802': '四川省广元市市中区', '510811': '四川省广元市元坝区', '510812': '四川省广元市朝天区', '510821': '四川省广元市旺苍县', '510822': '四川省广元市青川县', '510823': '四川省广元市剑阁县', '510824': '四川省广元市苍溪县', '510900': '四川省遂宁市', '510901': '四川省遂宁市市辖区', '510902': '四川省遂宁市市中区', '510921': '四川省遂宁市蓬溪县', '510922': '四川省遂宁市射洪县', '510923': '四川省遂宁市大英县', '511000': '四川省内江市', '511001': '四川省内江市市辖区', '511002': '四川省内江市市中区', '511011': '四川省内江市东兴区', '511024': '四川省内江市威远县', '511025': '四川省内江市资中县', '511028': '四川省内江市隆昌县', '511100': '四川省乐山市', '511101': '四川省乐山市市辖区', '511102': '四川省乐山市市中区', '511111': '四川省乐山市沙湾区', '511112': '四川省乐山市五通桥区', '511113': '四川省乐山市金口河区', '511123': '四川省乐山市犍为县', '511124': '四川省乐山市井研县', '511126': '四川省乐山市夹江县', '511129': '四川省乐山市沐川县', '511132': '四川省乐山市峨边彝族自治县', '511133': '四川省乐山市马边彝族自治县', '511181': '四川省乐山市峨眉山市', '511300': '四川省南充市', '511301': '四川省南充市市辖区', '511302': '四川省南充市顺庆区', '511303': '四川省南充市高坪区', '511304': '四川省南充市嘉陵区', '511321': '四川省南充市南部县', '511322': '四川省南充市营山县', '511323': '四川省南充市蓬安县', '511324': '四川省南充市仪陇县', '511325': '四川省南充市西充县', '511381': '四川省南充市阆中市', '511500': '四川省宜宾市', '511501': '四川省宜宾市市辖区', '511502': '四川省宜宾市翠屏区', '511521': '四川省宜宾市宜宾县', '511522': '四川省宜宾市南溪县', '511523': '四川省宜宾市江安县', '511524': '四川省宜宾市长宁县', '511525': '四川省宜宾市高县', '511526': '四川省宜宾市珙县', '511527': '四川省宜宾市筠连县', '511528': '四川省宜宾市兴文县', '511529': '四川省宜宾市屏山县', '511600': '四川省广安市', '511601': '四川省广安市市辖区', '511602': '四川省广安市广安区', '511621': '四川省广安市岳池县', '511622': '四川省广安市武胜县', '511623': '四川省广安市邻水县', '511681': '四川省广安市华蓥市', '513000': '四川省达川地区', '513001': '四川省达川地区达川市', '513002': '四川省达川地区万源市', '513021': '四川省达川地区达县', '513022': '四川省达川地区宣汉县', '513023': '四川省达川地区开江县', '513029': '四川省达川地区大竹县', '513030': '四川省达川地区渠县', '513100': '四川省雅安地区', '513101': '四川省雅安地区雅安市', '513122': '四川省雅安地区名山县', '513123': '四川省雅安地区荥经县', '513124': '四川省雅安地区汉源县', '513125': '四川省雅安地区石棉县', '513126': '四川省雅安地区天全县', '513127': '四川省雅安地区芦山县', '513128': '四川省雅安地区宝兴县', '513200': '四川省阿坝藏族羌族自治州', '513221': '四川省阿坝藏族羌族自治州汶川县', '513222': '四川省阿坝藏族羌族自治州理县', '513223': '四川省阿坝藏族羌族自治州茂县', '513224': '四川省阿坝藏族羌族自治州松潘县', '513225': '四川省阿坝藏族羌族自治州九寨沟县', '513226': '四川省阿坝藏族羌族自治州金川县', '513227': '四川省阿坝藏族羌族自治州小金县', '513228': '四川省阿坝藏族羌族自治州黑水县', '513229': '四川省阿坝藏族羌族自治州马尔康县', '513230': '四川省阿坝藏族羌族自治州壤塘县', '513231': '四川省阿坝藏族羌族自治州阿坝县', '513232': '四川省阿坝藏族羌族自治州若尔盖县', '513233': '四川省阿坝藏族羌族自治州红原县', '513300': '四川省甘孜藏族自治州', '513321': '四川省甘孜藏族自治州康定县', '513322': '四川省甘孜藏族自治州泸定县', '513323': '四川省甘孜藏族自治州丹巴县', '513324': '四川省甘孜藏族自治州九龙县', '513325': '四川省甘孜藏族自治州雅江县', '513326': '四川省甘孜藏族自治州道孚县', '513327': '四川省甘孜藏族自治州炉霍县', '513328': '四川省甘孜藏族自治州甘孜县', '513329': '四川省甘孜藏族自治州新龙县', '513330': '四川省甘孜藏族自治州德格县', '513331': '四川省甘孜藏族自治州白玉县', '513332': '四川省甘孜藏族自治州石渠县', '513333': '四川省甘孜藏族自治州色达县', '513334': '四川省甘孜藏族自治州理塘县', '513335': '四川省甘孜藏族自治州巴塘县', '513336': '四川省甘孜藏族自治州乡城县', '513337': '四川省甘孜藏族自治州稻城县', '513338': '四川省甘孜藏族自治州得荣县', '513400': '四川省凉山彝族自治州', '513401': '四川省凉山彝族自治州西昌市', '513422': '四川省凉山彝族自治州木里藏族自治县', '513423': '四川省凉山彝族自治州盐源县', '513424': '四川省凉山彝族自治州德昌县', '513425': '四川省凉山彝族自治州会理县', '513426': '四川省凉山彝族自治州会东县', '513427': '四川省凉山彝族自治州宁南县', '513428': '四川省凉山彝族自治州普格县', '513429': '四川省凉山彝族自治州布拖县', '513430': '四川省凉山彝族自治州金阳县', '513431': '四川省凉山彝族自治州昭觉县', '513432': '四川省凉山彝族自治州喜德县', '513433': '四川省凉山彝族自治州冕宁县', '513434': '四川省凉山彝族自治州越西县', '513435': '四川省凉山彝族自治州甘洛县', '513436': '四川省凉山彝族自治州美姑县', '513437': '四川省凉山彝族自治州雷波县', '513700': '四川省巴中地区', '513701': '四川省巴中地区巴中市', '513721': '四川省巴中地区通江县', '513722': '四川省巴中地区南江县', '513723': '四川省巴中地区平昌县', '513800': '四川省眉山地区', '513821': '四川省眉山地区眉山县', '513822': '四川省眉山地区仁寿县', '513823': '四川省眉山地区彭山县', '513824': '四川省眉山地区洪雅县', '513825': '四川省眉山地区丹棱县', '513826': '四川省眉山地区青神县', '513900': '四川省眉山地区资阳地区', '513901': '四川省眉山地区资阳市', '513902': '四川省眉山地区简阳市', '513921': '四川省眉山地区安岳县', '513922': '四川省眉山地区乐至县', '520000': '贵州省', '520100': '贵州省贵阳市', '520101': '贵州省贵阳市市辖区', '520102': '贵州省贵阳市南明区', '520103': '贵州省贵阳市云岩区', '520111': '贵州省贵阳市花溪区', '520112': '贵州省贵阳市乌当区', '520113': '贵州省贵阳市白云区', '520121': '贵州省贵阳市开阳县', '520122': '贵州省贵阳市息烽县', '520123': '贵州省贵阳市修文县', '520181': '贵州省贵阳市清镇市', '520200': '贵州省六盘水市', '520201': '贵州省六盘水市钟山区', '520202': '贵州省六盘水市盘县特区', '520203': '贵州省六盘水市六枝特区', '520221': '贵州省六盘水市水城县', '520300': '贵州省遵义市', '520301': '贵州省遵义市市辖区', '520302': '贵州省遵义市红花岗区', '520321': '贵州省遵义市遵义县', '520322': '贵州省遵义市桐梓县', '520323': '贵州省遵义市绥阳县', '520324': '贵州省遵义市正安县', '520325': '贵州省遵义市道真仡佬族苗族自治县', '520326': '贵州省遵义市务川仡佬族苗族自治县', '520327': '贵州省遵义市凤冈县', '520328': '贵州省遵义市湄潭县', '520329': '贵州省遵义市余庆县', '520330': '贵州省遵义市习水县', '520381': '贵州省遵义市赤水市', '520382': '贵州省遵义市仁怀市', '522200': '贵州省铜仁地区', '522201': '贵州省铜仁地区铜仁市', '522222': '贵州省铜仁地区江口县', '522223': '贵州省铜仁地区玉屏侗族自治县', '522224': '贵州省铜仁地区石阡县', '522225': '贵州省铜仁地区思南县', '522226': '贵州省铜仁地区印江土家族苗族自治县', '522227': '贵州省铜仁地区德江县', '522228': '贵州省铜仁地区沿河土家族自治县', '522229': '贵州省铜仁地区松桃苗族自治县', '522230': '贵州省铜仁地区万山特区', '522300': '贵州省黔西南布依族苗族自治州', '522301': '贵州省黔西南布依族苗族自治州兴义市', '522322': '贵州省黔西南布依族苗族自治州兴仁县', '522323': '贵州省黔西南布依族苗族自治州普安县', '522324': '贵州省黔西南布依族苗族自治州晴隆县', '522325': '贵州省黔西南布依族苗族自治州贞丰县', '522326': '贵州省黔西南布依族苗族自治州望谟县', '522327': '贵州省黔西南布依族苗族自治州册亨县', '522328': '贵州省黔西南布依族苗族自治州安龙县', '522400': '贵州省毕节地区', '522401': '贵州省毕节地区毕节市', '522422': '贵州省毕节地区大方县', '522423': '贵州省毕节地区黔西县', '522424': '贵州省毕节地区金沙县', '522425': '贵州省毕节地区织金县', '522426': '贵州省毕节地区纳雍县', '522427': '贵州省毕节地区威宁彝族回族苗族自治县', '522428': '贵州省毕节地区赫章县', '522500': '贵州省安顺地区', '522501': '贵州省安顺地区安顺市', '522526': '贵州省安顺地区平坝县', '522527': '贵州省安顺地区普定县', '522528': '贵州省安顺地区关岭布依族苗族自治县', '522529': '贵州省安顺地区镇宁布依族苗族自治县', '522530': '贵州省安顺地区紫云苗族布依族自治县', '522600': '贵州省黔东南苗族侗族自治州', '522601': '贵州省黔东南苗族侗族自治州凯里市', '522622': '贵州省黔东南苗族侗族自治州黄平县', '522623': '贵州省黔东南苗族侗族自治州施秉县', '522624': '贵州省黔东南苗族侗族自治州三穗县', '522625': '贵州省黔东南苗族侗族自治州镇远县', '522626': '贵州省黔东南苗族侗族自治州岑巩县', '522627': '贵州省黔东南苗族侗族自治州天柱县', '522628': '贵州省黔东南苗族侗族自治州锦屏县', '522629': '贵州省黔东南苗族侗族自治州剑河县', '522630': '贵州省黔东南苗族侗族自治州台江县', '522631': '贵州省黔东南苗族侗族自治州黎平县', '522632': '贵州省黔东南苗族侗族自治州榕江县', '522633': '贵州省黔东南苗族侗族自治州从江县', '522634': '贵州省黔东南苗族侗族自治州雷山县', '522635': '贵州省黔东南苗族侗族自治州麻江县', '522636': '贵州省黔东南苗族侗族自治州丹寨县', '522700': '贵州省黔南布依族苗族自治州', '522701': '贵州省黔南布依族苗族自治州都匀市', '522702': '贵州省黔南布依族苗族自治州福泉市', '522722': '贵州省黔南布依族苗族自治州荔波县', '522723': '贵州省黔南布依族苗族自治州贵定县', '522725': '贵州省黔南布依族苗族自治州瓮安县', '522726': '贵州省黔南布依族苗族自治州独山县', '522727': '贵州省黔南布依族苗族自治州平塘县', '522728': '贵州省黔南布依族苗族自治州罗甸县', '522729': '贵州省黔南布依族苗族自治州长顺县', '522730': '贵州省黔南布依族苗族自治州龙里县', '522731': '贵州省黔南布依族苗族自治州惠水县', '522732': '贵州省黔南布依族苗族自治州三都水族自治县', '530000': '云南省', '530100': '云南省昆明市', '530101': '云南省昆明市市辖区', '530102': '云南省昆明市五华区', '530103': '云南省昆明市盘龙区', '530111': '云南省昆明市官渡区', '530112': '云南省昆明市西山区', '530113': '云南省昆明市东川区', '530121': '云南省昆明市呈贡县', '530122': '云南省昆明市晋宁县', '530124': '云南省昆明市富民县', '530125': '云南省昆明市宜良县', '530126': '云南省昆明市石林彝族自治县', '530127': '云南省昆明市嵩明县', '530128': '云南省昆明市禄劝彝族苗族自治县', '530129': '云南省昆明市寻甸回族彝族自治县', '530181': '云南省昆明市安宁市', '530300': '云南省曲靖市', '530301': '云南省曲靖市市辖区', '530302': '云南省曲靖市麒麟区', '530321': '云南省曲靖市马龙县', '530322': '云南省曲靖市陆良县', '530323': '云南省曲靖市师宗县', '530324': '云南省曲靖市罗平县', '530325': '云南省曲靖市富源县', '530326': '云南省曲靖市会泽县', '530328': '云南省曲靖市沾益县', '530381': '云南省曲靖市宣威市', '530400': '云南省玉溪市', '530401': '云南省玉溪市市辖区', '530402': '云南省玉溪市红塔区', '530421': '云南省玉溪市江川县', '530422': '云南省玉溪市澄江县', '530423': '云南省玉溪市通海县', '530424': '云南省玉溪市华宁县', '530425': '云南省玉溪市易门县', '530426': '云南省玉溪市峨山彝族自治县', '530427': '云南省玉溪市新平彝族傣族自治县', '530428': '云南省玉溪市元江哈尼族彝族傣族自治县', '532100': '云南省昭通地区', '532101': '云南省昭通地区昭通市', '532122': '云南省昭通地区鲁甸县', '532123': '云南省昭通地区巧家县', '532124': '云南省昭通地区盐津县', '532125': '云南省昭通地区大关县', '532126': '云南省昭通地区永善县', '532127': '云南省昭通地区绥江县', '532128': '云南省昭通地区镇雄县', '532129': '云南省昭通地区彝良县', '532130': '云南省昭通地区威信县', '532131': '云南省昭通地区水富县', '532300': '云南省楚雄彝族自治州', '532301': '云南省楚雄彝族自治州楚雄市', '532322': '云南省楚雄彝族自治州双柏县', '532323': '云南省楚雄彝族自治州牟定县', '532324': '云南省楚雄彝族自治州南华县', '532325': '云南省楚雄彝族自治州姚安县', '532326': '云南省楚雄彝族自治州大姚县', '532327': '云南省楚雄彝族自治州永仁县', '532328': '云南省楚雄彝族自治州元谋县', '532329': '云南省楚雄彝族自治州武定县', '532331': '云南省楚雄彝族自治州禄丰县', '532500': '云南省红河哈尼族彝族自治州', '532501': '云南省红河哈尼族彝族自治州个旧市', '532502': '云南省红河哈尼族彝族自治州开远市', '532522': '云南省红河哈尼族彝族自治州蒙自县', '532523': '云南省红河哈尼族彝族自治州屏边苗族自治县', '532524': '云南省红河哈尼族彝族自治州建水县', '532525': '云南省红河哈尼族彝族自治州石屏县', '532526': '云南省红河哈尼族彝族自治州弥勒县', '532527': '云南省红河哈尼族彝族自治州泸西县', '532528': '云南省红河哈尼族彝族自治州元阳县', '532529': '云南省红河哈尼族彝族自治州红河县', '532530': '云南省红河哈尼族彝族自治州金平苗族瑶族傣族自治县', '532531': '云南省红河哈尼族彝族自治州绿春县', '532532': '云南省红河哈尼族彝族自治州河口瑶族自治县', '532600': '云南省文山壮族苗族自治州', '532621': '云南省文山壮族苗族自治州文山县', '532622': '云南省文山壮族苗族自治州砚山县', '532623': '云南省文山壮族苗族自治州西畴县', '532624': '云南省文山壮族苗族自治州麻栗坡县', '532625': '云南省文山壮族苗族自治州马关县', '532626': '云南省文山壮族苗族自治州丘北县', '532627': '云南省文山壮族苗族自治州广南县', '532628': '云南省文山壮族苗族自治州富宁县', '532700': '云南省思茅地区', '532701': '云南省思茅地区思茅市', '532722': '云南省思茅地区普洱哈尼族彝族自治县', '532723': '云南省思茅地区墨江哈尼族自治县', '532724': '云南省思茅地区景东彝族自治县', '532725': '云南省思茅地区景谷傣族彝族自治县', '532726': '云南省思茅地区镇沅彝族哈尼族拉祜族自治县', '532727': '云南省思茅地区江城哈尼族彝族自治县', '532728': '云南省思茅地区孟连傣族拉祜族佤族自治县', '532729': '云南省思茅地区澜沧拉祜族自治县', '532730': '云南省思茅地区西盟佤族自治县', '532800': '云南省西双版纳傣族自治州', '532801': '云南省西双版纳傣族自治州景洪市', '532822': '云南省西双版纳傣族自治州勐海县', '532823': '云南省西双版纳傣族自治州勐腊县', '532900': '云南省大理白族自治州', '532901': '云南省大理白族自治州大理市', '532922': '云南省大理白族自治州漾濞彝族自治县', '532923': '云南省大理白族自治州祥云县', '532924': '云南省大理白族自治州宾川县', '532925': '云南省大理白族自治州弥渡县', '532926': '云南省大理白族自治州南涧彝族自治县', '532927': '云南省大理白族自治州巍山彝族回族自治县', '532928': '云南省大理白族自治州永平县', '532929': '云南省大理白族自治州云龙县', '532930': '云南省大理白族自治州洱源县', '532931': '云南省大理白族自治州剑川县', '532932': '云南省大理白族自治州鹤庆县', '533000': '云南省保山地区', '533001': '云南省保山地区保山市', '533022': '云南省保山地区施甸县', '533023': '云南省保山地区腾冲县', '533024': '云南省保山地区龙陵县', '533025': '云南省保山地区昌宁县', '533100': '云南省德宏傣族景颇族自治州', '533101': '云南省德宏傣族景颇族自治州畹町市', '533102': '云南省德宏傣族景颇族自治州瑞丽市', '533103': '云南省德宏傣族景颇族自治州潞西市', '533122': '云南省德宏傣族景颇族自治州梁河县', '533123': '云南省德宏傣族景颇族自治州盈江县', '533124': '云南省德宏傣族景颇族自治州陇川县', '533200': '云南省丽江地区', '533221': '云南省丽江地区丽江纳西族自治县', '533222': '云南省丽江地区永胜县', '533223': '云南省丽江地区华坪县', '533224': '云南省丽江地区宁蒗彝族自治县', '533300': '云南省怒江傈僳族自治州', '533321': '云南省怒江傈僳族自治州泸水县', '533323': '云南省怒江傈僳族自治州福贡县', '533324': '云南省怒江傈僳族自治州贡山独龙族怒族自治县', '533325': '云南省怒江傈僳族自治州兰坪白族普米族自治县', '533400': '云南省迪庆藏族自治州', '533421': '云南省迪庆藏族自治州中甸县', '533422': '云南省迪庆藏族自治州德钦县', '533423': '云南省迪庆藏族自治州维西傈僳族自治县', '533500': '云南省临沧地区', '533521': '云南省临沧地区临沧县', '533522': '云南省临沧地区凤庆县', '533523': '云南省临沧地区云县', '533524': '云南省临沧地区永德县', '533525': '云南省临沧地区镇康县', '533526': '云南省临沧地区双江拉祜族佤族布朗族傣族自治县', '533527': '云南省临沧地区耿马傣族佤族自治县', '533528': '云南省临沧地区沧源佤族自治县', '540000': '西藏自治区', '540100': '西藏自治区拉萨市', '540101': '西藏自治区拉萨市市辖区', '540102': '西藏自治区拉萨市城关区', '540121': '西藏自治区拉萨市林周县', '540122': '西藏自治区拉萨市当雄县', '540123': '西藏自治区拉萨市尼木县', '540124': '西藏自治区拉萨市曲水县', '540125': '西藏自治区拉萨市堆龙德庆县', '540126': '西藏自治区拉萨市达孜县', '540127': '西藏自治区拉萨市墨竹工卡县', '542100': '西藏自治区昌都地区', '542121': '西藏自治区昌都地区昌都县', '542122': '西藏自治区昌都地区江达县', '542123': '西藏自治区昌都地区贡觉县', '542124': '西藏自治区昌都地区类乌齐县', '542125': '西藏自治区昌都地区丁青县', '542126': '西藏自治区昌都地区察雅县', '542127': '西藏自治区昌都地区八宿县', '542128': '西藏自治区昌都地区左贡县', '542129': '西藏自治区昌都地区芒康县', '542132': '西藏自治区昌都地区洛隆县', '542133': '西藏自治区昌都地区边坝县', '542134': '西藏自治区昌都地区盐井县', '542135': '西藏自治区昌都地区碧土县', '542136': '西藏自治区昌都地区妥坝县', '542137': '西藏自治区昌都地区生达县', '542200': '西藏自治区山南地区', '542221': '西藏自治区山南地区乃东县', '542222': '西藏自治区山南地区扎囊县', '542223': '西藏自治区山南地区贡嘎县', '542224': '西藏自治区山南地区桑日县', '542225': '西藏自治区山南地区琼结县', '542226': '西藏自治区山南地区曲松县', '542227': '西藏自治区山南地区措美县', '542228': '西藏自治区山南地区洛扎县', '542229': '西藏自治区山南地区加查县', '542231': '西藏自治区山南地区隆子县', '542232': '西藏自治区山南地区错那县', '542233': '西藏自治区山南地区浪卡子县', '542300': '西藏自治区日喀则地区', '542301': '西藏自治区日喀则地区日喀则市', '542322': '西藏自治区日喀则地区南木林县', '542323': '西藏自治区日喀则地区江孜县', '542324': '西藏自治区日喀则地区定日县', '542325': '西藏自治区日喀则地区萨迦县', '542326': '西藏自治区日喀则地区拉孜县', '542327': '西藏自治区日喀则地区昂仁县', '542328': '西藏自治区日喀则地区谢通门县', '542329': '西藏自治区日喀则地区白朗县', '542330': '西藏自治区日喀则地区仁布县', '542331': '西藏自治区日喀则地区康马县', '542332': '西藏自治区日喀则地区定结县', '542333': '西藏自治区日喀则地区仲巴县', '542334': '西藏自治区日喀则地区亚东县', '542335': '西藏自治区日喀则地区吉隆县', '542336': '西藏自治区日喀则地区聂拉木县', '542337': '西藏自治区日喀则地区萨嘎县', '542338': '西藏自治区日喀则地区岗巴县', '542400': '西藏自治区那曲地区', '542421': '西藏自治区那曲地区那曲县', '542422': '西藏自治区那曲地区嘉黎县', '542423': '西藏自治区那曲地区比如县', '542424': '西藏自治区那曲地区聂荣县', '542425': '西藏自治区那曲地区安多县', '542426': '西藏自治区那曲地区申扎县', '542427': '西藏自治区那曲地区索县', '542428': '西藏自治区那曲地区班戈县', '542429': '西藏自治区那曲地区巴青县', '542430': '西藏自治区那曲地区尼玛县', '542500': '西藏自治区阿里地区', '542521': '西藏自治区阿里地区普兰县', '542522': '西藏自治区阿里地区札达县', '542523': '西藏自治区阿里地区噶尔县', '542524': '西藏自治区阿里地区日土县', '542525': '西藏自治区阿里地区革吉县', '542526': '西藏自治区阿里地区改则县', '542527': '西藏自治区阿里地区措勤县', '542528': '西藏自治区阿里地区隆格尔县', '542600': '西藏自治区林芝地区', '542621': '西藏自治区林芝地区林芝县', '542622': '西藏自治区林芝地区工布江达县', '542623': '西藏自治区林芝地区米林县', '542624': '西藏自治区林芝地区墨脱县', '542625': '西藏自治区林芝地区波密县', '542626': '西藏自治区林芝地区察隅县', '542627': '西藏自治区林芝地区朗县', '610000': '陕西省', '610100': '陕西省西安市', '610101': '陕西省西安市市辖区', '610102': '陕西省西安市新城区', '610103': '陕西省西安市碑林区', '610104': '陕西省西安市莲湖区', '610111': '陕西省西安市灞桥区', '610112': '陕西省西安市未央区', '610113': '陕西省西安市雁塔区', '610114': '陕西省西安市阎良区', '610115': '陕西省西安市临潼区', '610121': '陕西省西安市长安县', '610122': '陕西省西安市蓝田县', '610124': '陕西省西安市周至县', '610125': '陕西省西安市户县', '610126': '陕西省西安市高陵县', '610200': '陕西省铜川市', '610201': '陕西省铜川市市辖区', '610202': '陕西省铜川市城区', '610203': '陕西省铜川市郊区', '610221': '陕西省铜川市耀县', '610222': '陕西省铜川市宜君县', '610300': '陕西省宝鸡市', '610301': '陕西省宝鸡市市辖区', '610302': '陕西省宝鸡市渭滨区', '610303': '陕西省宝鸡市金台区', '610321': '陕西省宝鸡市宝鸡县', '610322': '陕西省宝鸡市凤翔县', '610323': '陕西省宝鸡市岐山县', '610324': '陕西省宝鸡市扶风县', '610326': '陕西省宝鸡市眉县', '610327': '陕西省宝鸡市陇县', '610328': '陕西省宝鸡市千阳县', '610329': '陕西省宝鸡市麟游县', '610330': '陕西省宝鸡市凤县', '610331': '陕西省宝鸡市太白县', '610400': '陕西省咸阳市', '610401': '陕西省咸阳市市辖区', '610402': '陕西省咸阳市秦都区', '610403': '陕西省咸阳市杨陵区', '610404': '陕西省咸阳市渭城区', '610422': '陕西省咸阳市三原县', '610423': '陕西省咸阳市泾阳县', '610424': '陕西省咸阳市乾县', '610425': '陕西省咸阳市礼泉县', '610426': '陕西省咸阳市永寿县', '610427': '陕西省咸阳市彬县', '610428': '陕西省咸阳市长武县', '610429': '陕西省咸阳市旬邑县', '610430': '陕西省咸阳市淳化县', '610431': '陕西省咸阳市武功县', '610481': '陕西省咸阳市兴平市', '610500': '陕西省渭南市', '610501': '陕西省渭南市市辖区', '610502': '陕西省渭南市临渭区', '610521': '陕西省渭南市华县', '610522': '陕西省渭南市潼关县', '610523': '陕西省渭南市大荔县', '610524': '陕西省渭南市合阳县', '610525': '陕西省渭南市澄城县', '610526': '陕西省渭南市蒲城县', '610527': '陕西省渭南市白水县', '610528': '陕西省渭南市富平县', '610581': '陕西省渭南市韩城市', '610582': '陕西省渭南市华阴市', '610600': '陕西省延安市', '610601': '陕西省延安市市辖区', '610602': '陕西省延安市宝塔区', '610621': '陕西省延安市延长县', '610622': '陕西省延安市延川县', '610623': '陕西省延安市子长县', '610624': '陕西省延安市安塞县', '610625': '陕西省延安市志丹县', '610626': '陕西省延安市吴旗县', '610627': '陕西省延安市甘泉县', '610628': '陕西省延安市富县', '610629': '陕西省延安市洛川县', '610630': '陕西省延安市宜川县', '610631': '陕西省延安市黄龙县', '610632': '陕西省延安市黄陵县', '610700': '陕西省汉中市', '610701': '陕西省汉中市市辖区', '610702': '陕西省汉中市汉台区', '610721': '陕西省汉中市南郑县', '610722': '陕西省汉中市城固县', '610723': '陕西省汉中市洋县', '610724': '陕西省汉中市西乡县', '610725': '陕西省汉中市勉县', '610726': '陕西省汉中市宁强县', '610727': '陕西省汉中市略阳县', '610728': '陕西省汉中市镇巴县', '610729': '陕西省汉中市留坝县', '610730': '陕西省汉中市佛坪县', '612400': '陕西省安康地区', '612401': '陕西省安康地区安康市', '612422': '陕西省安康地区汉阴县', '612423': '陕西省安康地区石泉县', '612424': '陕西省安康地区宁陕县', '612425': '陕西省安康地区紫阳县', '612426': '陕西省安康地区岚皋县', '612427': '陕西省安康地区平利县', '612428': '陕西省安康地区镇坪县', '612429': '陕西省安康地区旬阳县', '612430': '陕西省安康地区白河县', '612500': '陕西省商洛地区', '612501': '陕西省商洛地区商州市', '612522': '陕西省商洛地区洛南县', '612523': '陕西省商洛地区丹凤县', '612524': '陕西省商洛地区商南县', '612525': '陕西省商洛地区山阳县', '612526': '陕西省商洛地区镇安县', '612527': '陕西省商洛地区柞水县', '612700': '陕西省榆林地区', '612701': '陕西省榆林地区榆林市', '612722': '陕西省榆林地区神木县', '612723': '陕西省榆林地区府谷县', '612724': '陕西省榆林地区横山县', '612725': '陕西省榆林地区靖边县', '612726': '陕西省榆林地区定边县', '612727': '陕西省榆林地区绥德县', '612728': '陕西省榆林地区米脂县', '612729': '陕西省榆林地区佳县', '612730': '陕西省榆林地区吴堡县', '612731': '陕西省榆林地区清涧县', '612732': '陕西省榆林地区子洲县', '620000': '甘肃省', '620100': '甘肃省兰州市', '620101': '甘肃省兰州市市辖区', '620102': '甘肃省兰州市城关区', '620103': '甘肃省兰州市七里河区', '620104': '甘肃省兰州市西固区', '620105': '甘肃省兰州市安宁区', '620111': '甘肃省兰州市红古区', '620121': '甘肃省兰州市永登县', '620122': '甘肃省兰州市皋兰县', '620123': '甘肃省兰州市榆中县', '620200': '甘肃省嘉峪关市', '620201': '甘肃省嘉峪关市市辖区', '620300': '甘肃省嘉峪关市金昌市', '620301': '甘肃省嘉峪关市市辖区', '620302': '甘肃省嘉峪关市金川区', '620321': '甘肃省嘉峪关市永昌县', '620400': '甘肃省白银市', '620401': '甘肃省白银市市辖区', '620402': '甘肃省白银市白银区', '620403': '甘肃省白银市平川区', '620421': '甘肃省白银市靖远县', '620422': '甘肃省白银市会宁县', '620423': '甘肃省白银市景泰县', '620500': '甘肃省天水市', '620501': '甘肃省天水市市辖区', '620502': '甘肃省天水市秦城区', '620503': '甘肃省天水市北道区', '620521': '甘肃省天水市清水县', '620522': '甘肃省天水市秦安县', '620523': '甘肃省天水市甘谷县', '620524': '甘肃省天水市武山县', '620525': '甘肃省天水市张家川回族自治县', '622100': '甘肃省酒泉地区', '622101': '甘肃省酒泉地区玉门市', '622102': '甘肃省酒泉地区酒泉市', '622103': '甘肃省酒泉地区敦煌市', '622123': '甘肃省酒泉地区金塔县', '622124': '甘肃省酒泉地区肃北蒙古族自治县', '622125': '甘肃省酒泉地区阿克塞哈萨克族自治县', '622126': '甘肃省酒泉地区安西县', '622200': '甘肃省张掖地区', '622201': '甘肃省张掖地区张掖市', '622222': '甘肃省张掖地区肃南裕固族自治县', '622223': '甘肃省张掖地区民乐县', '622224': '甘肃省张掖地区临泽县', '622225': '甘肃省张掖地区高台县', '622226': '甘肃省张掖地区山丹县', '622300': '甘肃省武威地区', '622301': '甘肃省武威地区武威市', '622322': '甘肃省武威地区民勤县', '622323': '甘肃省武威地区古浪县', '622326': '甘肃省武威地区天祝藏族自治县', '622400': '甘肃省定西地区', '622421': '甘肃省定西地区定西县', '622424': '甘肃省定西地区通渭县', '622425': '甘肃省定西地区陇西县', '622426': '甘肃省定西地区渭源县', '622427': '甘肃省定西地区临洮县', '622428': '甘肃省定西地区漳县', '622429': '甘肃省定西地区岷县', '622600': '甘肃省陇南地区', '622621': '甘肃省陇南地区武都县', '622623': '甘肃省陇南地区宕昌县', '622624': '甘肃省陇南地区成县', '622625': '甘肃省陇南地区康县', '622626': '甘肃省陇南地区文县', '622627': '甘肃省陇南地区西和县', '622628': '甘肃省陇南地区礼县', '622629': '甘肃省陇南地区两当县', '622630': '甘肃省陇南地区徽县', '622700': '甘肃省平凉地区', '622701': '甘肃省平凉地区平凉市', '622722': '甘肃省平凉地区泾川县', '622723': '甘肃省平凉地区灵台县', '622724': '甘肃省平凉地区崇信县', '622725': '甘肃省平凉地区华亭县', '622726': '甘肃省平凉地区庄浪县', '622727': '甘肃省平凉地区静宁县', '622800': '甘肃省庆阳地区', '622801': '甘肃省庆阳地区西峰市', '622821': '甘肃省庆阳地区庆阳县', '622822': '甘肃省庆阳地区环县', '622823': '甘肃省庆阳地区华池县', '622824': '甘肃省庆阳地区合水县', '622825': '甘肃省庆阳地区正宁县', '622826': '甘肃省庆阳地区宁县', '622827': '甘肃省庆阳地区镇原县', '622900': '甘肃省临夏回族自治州', '622901': '甘肃省临夏回族自治州临夏市', '622921': '甘肃省临夏回族自治州临夏县', '622922': '甘肃省临夏回族自治州康乐县', '622923': '甘肃省临夏回族自治州永靖县', '622924': '甘肃省临夏回族自治州广河县', '622925': '甘肃省临夏回族自治州和政县', '622926': '甘肃省临夏回族自治州东乡族自治县', '622927': '甘肃省临夏回族自治州积石山保安族东乡族撒拉族自治县', '623000': '甘肃省甘南藏族自治州', '623001': '甘肃省甘南藏族自治州合作市', '623021': '甘肃省甘南藏族自治州临潭县', '623022': '甘肃省甘南藏族自治州卓尼县', '623023': '甘肃省甘南藏族自治州舟曲县', '623024': '甘肃省甘南藏族自治州迭部县', '623025': '甘肃省甘南藏族自治州玛曲县', '623026': '甘肃省甘南藏族自治州碌曲县', '623027': '甘肃省甘南藏族自治州夏河县', '630000': '青海省', '630100': '青海省西宁市', '630101': '青海省西宁市市辖区', '630102': '青海省西宁市城东区', '630103': '青海省西宁市城中区', '630104': '青海省西宁市城西区', '630105': '青海省西宁市城北区', '630121': '青海省西宁市大通回族土族自治县', '632100': '青海省海东地区', '632121': '青海省海东地区平安县', '632122': '青海省海东地区民和回族土族自治县', '632123': '青海省海东地区乐都县', '632124': '青海省海东地区湟中县', '632125': '青海省海东地区湟源县', '632126': '青海省海东地区互助土族自治县', '632127': '青海省海东地区化隆回族自治县', '632128': '青海省海东地区循化撒拉族自治县', '632200': '青海省海北藏族自治州', '632221': '青海省海北藏族自治州门源回族自治县', '632222': '青海省海北藏族自治州祁连县', '632223': '青海省海北藏族自治州海晏县', '632224': '青海省海北藏族自治州刚察县', '632300': '青海省黄南藏族自治州', '632321': '青海省黄南藏族自治州同仁县', '632322': '青海省黄南藏族自治州尖扎县', '632323': '青海省黄南藏族自治州泽库县', '632324': '青海省黄南藏族自治州河南蒙古族自治县', '632500': '青海省海南藏族自治州', '632521': '青海省海南藏族自治州共和县', '632522': '青海省海南藏族自治州同德县', '632523': '青海省海南藏族自治州贵德县', '632524': '青海省海南藏族自治州兴海县', '632525': '青海省海南藏族自治州贵南县', '632600': '青海省果洛藏族自治州', '632621': '青海省果洛藏族自治州玛沁县', '632622': '青海省果洛藏族自治州班玛县', '632623': '青海省果洛藏族自治州甘德县', '632624': '青海省果洛藏族自治州达日县', '632625': '青海省果洛藏族自治州久治县', '632626': '青海省果洛藏族自治州玛多县', '632700': '青海省玉树藏族自治州', '632721': '青海省玉树藏族自治州玉树县', '632722': '青海省玉树藏族自治州杂多县', '632723': '青海省玉树藏族自治州称多县', '632724': '青海省玉树藏族自治州治多县', '632725': '青海省玉树藏族自治州囊谦县', '632726': '青海省玉树藏族自治州曲麻莱县', '632800': '青海省海西蒙古族藏族自治州', '632801': '青海省海西蒙古族藏族自治州格尔木市', '632802': '青海省海西蒙古族藏族自治州德令哈市', '632821': '青海省海西蒙古族藏族自治州乌兰县', '632822': '青海省海西蒙古族藏族自治州都兰县', '632823': '青海省海西蒙古族藏族自治州天峻县', '640000': '宁夏回族自治区', '640100': '宁夏回族自治区银川市', '640101': '宁夏回族自治区银川市市辖区', '640102': '宁夏回族自治区银川市城区', '640103': '宁夏回族自治区银川市新城区', '640111': '宁夏回族自治区银川市郊区', '640121': '宁夏回族自治区银川市永宁县', '640122': '宁夏回族自治区银川市贺兰县', '640200': '宁夏回族自治区石嘴山市', '640201': '宁夏回族自治区石嘴山市市辖区', '640202': '宁夏回族自治区石嘴山市大武口区', '640203': '宁夏回族自治区石嘴山市石嘴山区', '640204': '宁夏回族自治区石嘴山市石炭井区', '640221': '宁夏回族自治区石嘴山市平罗县', '640222': '宁夏回族自治区石嘴山市陶乐县', '640223': '宁夏回族自治区石嘴山市惠农县', '640300': '宁夏回族自治区吴忠市', '640301': '宁夏回族自治区吴忠市市辖区', '640302': '宁夏回族自治区吴忠市利通区', '640321': '宁夏回族自治区吴忠市中卫县', '640322': '宁夏回族自治区吴忠市中宁县', '640323': '宁夏回族自治区吴忠市盐池县', '640324': '宁夏回族自治区吴忠市同心县', '640381': '宁夏回族自治区吴忠市青铜峡市', '640382': '宁夏回族自治区吴忠市灵武市', '642200': '宁夏回族自治区固原地区', '642221': '宁夏回族自治区固原地区固原县', '642222': '宁夏回族自治区固原地区海原县', '642223': '宁夏回族自治区固原地区西吉县', '642224': '宁夏回族自治区固原地区隆德县', '642225': '宁夏回族自治区固原地区泾源县', '642226': '宁夏回族自治区固原地区彭阳县', '650000': '新疆维吾尔自治区', '650100': '新疆维吾尔族自治区乌鲁木齐市', '650101': '新疆维吾尔族自治区乌鲁木齐市市辖区', '650102': '新疆维吾尔族自治区乌鲁木齐市天山区', '650103': '新疆维吾尔族自治区乌鲁木齐市沙依巴克区', '650104': '新疆维吾尔族自治区乌鲁木齐市新市区', '650105': '新疆维吾尔族自治区乌鲁木齐市水磨沟区', '650106': '新疆维吾尔族自治区乌鲁木齐市头屯河区', '650107': '新疆维吾尔族自治区乌鲁木齐市南山矿区', '650108': '新疆维吾尔族自治区乌鲁木齐市东山区', '650121': '新疆维吾尔族自治区乌鲁木齐市乌鲁木齐县', '650200': '新疆维吾尔族自治区克拉玛依市', '650201': '新疆维吾尔族自治区克拉玛依市市辖区', '650202': '新疆维吾尔族自治区克拉玛依市独山子区', '650203': '新疆维吾尔族自治区克拉玛依市克拉玛依区', '650204': '新疆维吾尔族自治区克拉玛依市白碱滩区', '650205': '新疆维吾尔族自治区克拉玛依市乌尔禾区', '652100': '新疆维吾尔族自治区吐鲁番地区', '652101': '新疆维吾尔族自治区吐鲁番地区吐鲁番市', '652122': '新疆维吾尔族自治区吐鲁番地区鄯善县', '652123': '新疆维吾尔族自治区吐鲁番地区托克逊县', '652200': '新疆维吾尔族自治区哈密地区', '652201': '新疆维吾尔族自治区哈密地区哈密市', '652222': '新疆维吾尔族自治区哈密地区巴里坤哈萨克自治县', '652223': '新疆维吾尔族自治区哈密地区伊吾县', '652300': '新疆维吾尔族自治区昌吉回族自治州', '652301': '新疆维吾尔族自治区昌吉回族自治州昌吉市', '652302': '新疆维吾尔族自治区昌吉回族自治州阜康市', '652303': '新疆维吾尔族自治区昌吉回族自治州米泉市', '652323': '新疆维吾尔族自治区昌吉回族自治州呼图壁县', '652324': '新疆维吾尔族自治区昌吉回族自治州玛纳斯县', '652325': '新疆维吾尔族自治区昌吉回族自治州奇台县', '652327': '新疆维吾尔族自治区昌吉回族自治州吉木萨尔县', '652328': '新疆维吾尔族自治区昌吉回族自治州木垒哈萨克自治县', '652700': '新疆维吾尔族自治区博尔塔拉蒙古自治州', '652701': '新疆维吾尔族自治区博尔塔拉蒙古自治州博乐市', '652722': '新疆维吾尔族自治区博尔塔拉蒙古自治州精河县', '652723': '新疆维吾尔族自治区博尔塔拉蒙古自治州温泉县', '652800': '新疆维吾尔族自治区巴音郭楞蒙古自治州', '652801': '新疆维吾尔族自治区巴音郭楞蒙古自治州库尔勒市', '652822': '新疆维吾尔族自治区巴音郭楞蒙古自治州轮台县', '652823': '新疆维吾尔族自治区巴音郭楞蒙古自治州尉犁县', '652824': '新疆维吾尔族自治区巴音郭楞蒙古自治州若羌县', '652825': '新疆维吾尔族自治区巴音郭楞蒙古自治州且末县', '652826': '新疆维吾尔族自治区巴音郭楞蒙古自治州焉耆回族自治县', '652827': '新疆维吾尔族自治区巴音郭楞蒙古自治州和静县', '652828': '新疆维吾尔族自治区巴音郭楞蒙古自治州和硕县', '652829': '新疆维吾尔族自治区巴音郭楞蒙古自治州博湖县', '652900': '新疆维吾尔族自治区阿克苏地区', '652901': '新疆维吾尔族自治区阿克苏地区阿克苏市', '652922': '新疆维吾尔族自治区阿克苏地区温宿县', '652923': '新疆维吾尔族自治区阿克苏地区库车县', '652924': '新疆维吾尔族自治区阿克苏地区沙雅县', '652925': '新疆维吾尔族自治区阿克苏地区新和县', '652926': '新疆维吾尔族自治区阿克苏地区拜城县', '652927': '新疆维吾尔族自治区阿克苏地区乌什县', '652928': '新疆维吾尔族自治区阿克苏地区阿瓦提县', '652929': '新疆维吾尔族自治区阿克苏地区柯坪县', '653000': '新疆维吾尔族自治区克孜勒苏柯尔克孜自治州', '653001': '新疆维吾尔族自治区克孜勒苏柯尔克孜自治州阿图什市', '653022': '新疆维吾尔族自治区克孜勒苏柯尔克孜自治州阿克陶县', '653023': '新疆维吾尔族自治区克孜勒苏柯尔克孜自治州阿合奇县', '653024': '新疆维吾尔族自治区克孜勒苏柯尔克孜自治州乌恰县', '653100': '新疆维吾尔族自治区喀什地区', '653101': '新疆维吾尔族自治区喀什地区喀什市', '653121': '新疆维吾尔族自治区喀什地区疏附县', '653122': '新疆维吾尔族自治区喀什地区疏勒县', '653123': '新疆维吾尔族自治区喀什地区英吉沙县', '653124': '新疆维吾尔族自治区喀什地区泽普县', '653125': '新疆维吾尔族自治区喀什地区莎车县', '653126': '新疆维吾尔族自治区喀什地区叶城县', '653127': '新疆维吾尔族自治区喀什地区麦盖提县', '653128': '新疆维吾尔族自治区喀什地区岳普湖县', '653129': '新疆维吾尔族自治区喀什地区伽师县', '653130': '新疆维吾尔族自治区喀什地区巴楚县', '653131': '新疆维吾尔族自治区喀什地区塔什库尔干塔吉克自治县', '653200': '新疆维吾尔族自治区和田地区', '653201': '新疆维吾尔族自治区和田地区和田市', '653221': '新疆维吾尔族自治区和田地区和田县', '653222': '新疆维吾尔族自治区和田地区墨玉县', '653223': '新疆维吾尔族自治区和田地区皮山县', '653224': '新疆维吾尔族自治区和田地区洛浦县', '653225': '新疆维吾尔族自治区和田地区策勒县', '653226': '新疆维吾尔族自治区和田地区于田县', '653227': '新疆维吾尔族自治区和田地区民丰县', '654000': '新疆维吾尔族自治区伊犁哈萨克自治州', '654001': '新疆维吾尔族自治区伊犁哈萨克自治州奎屯市', '654100': '新疆维吾尔族自治区伊犁哈萨克自治州伊犁地区', '654101': '新疆维吾尔族自治区伊犁哈萨克自治州伊宁市', '654121': '新疆维吾尔族自治区伊犁哈萨克自治州伊宁县', '654122': '新疆自治区伊犁哈萨克自治州察布查尔锡伯自治县', '654123': '新疆维吾尔族自治区伊犁哈萨克自治州霍城县', '654124': '新疆维吾尔族自治区伊犁哈萨克自治州巩留县', '654125': '新疆维吾尔族自治区伊犁哈萨克自治州新源县', '654126': '新疆维吾尔族自治区伊犁哈萨克自治州昭苏县', '654127': '新疆维吾尔族自治区伊犁哈萨克自治州特克斯县', '654128': '新疆维吾尔族自治区伊犁哈萨克自治州尼勒克县', '654200': '新疆维吾尔族自治区塔城地区', '654201': '新疆维吾尔族自治区塔城地区塔城市', '654202': '新疆维吾尔族自治区塔城地区乌苏市', '654221': '新疆维吾尔族自治区塔城地区额敏县', '654223': '新疆维吾尔族自治区塔城地区沙湾县', '654224': '新疆维吾尔族自治区塔城地区托里县', '654225': '新疆维吾尔族自治区塔城地区裕民县', '654226': '新疆维吾尔族自治区塔城地区和布克赛尔蒙古自治县', '654300': '新疆维吾尔族自治区阿勒泰地区', '654301': '新疆维吾尔族自治区阿勒泰地区阿勒泰市', '654321': '新疆维吾尔族自治区阿勒泰地区布尔津县', '654322': '新疆维吾尔族自治区阿勒泰地区富蕴县', '654323': '新疆维吾尔族自治区阿勒泰地区福海县', '654324': '新疆维吾尔族自治区阿勒泰地区哈巴河县', '654325': '新疆维吾尔族自治区阿勒泰地区青河县', '654326': '新疆维吾尔族自治区阿勒泰地区吉木乃县', '659000': '新疆维吾尔族自治区直辖县级行政单位', '659001': '新疆维吾尔族自治区石河子市'}
  /* --------------------
    身份证类库
    -------------------- */
  var IDValidatorUtil = {
    checkArg: function (id) {
      var argType = (typeof id)
      switch (argType) {
        case 'number':
          // long number not allowed
          id = id.toString()
          if (id.length > 15) {
            this.error('长数字存在精度问题，请使用字符串传值！')
            return false
          }
          break
        case 'string':
          break
        default:
          return false
      }
      id = id.toUpperCase()
      var code = null
      if (id.length === 18) {
        // 18位
        code = {
          body: id.slice(0, 17),
          checkBit: id.slice(-1),
          type: 18
        }
      } else if (id.length === 15) {
        // 15位
        code = {
          body: id,
          type: 15
        }
      } else {
        return false
      }
      return code
    },
    // 地址码检查
    checkAddr: function (addr, GB2260) {
      var addrInfo = this.getAddrInfo(addr, GB2260)
      return (addrInfo === false ? 0 : true)
    },
    // 取得地址码信息
    getAddrInfo: function (addr, GB2260) {
      GB2260 = GB2260 || null
      // 查询GB/T2260,没有引入GB2260时略过
      if (GB2260 === null) {
        return addr
      }
      if (!GB2260.hasOwnProperty(addr)) {
        // 考虑标准不全的情况，搜索不到时向上搜索
        var tmpAddr
        tmpAddr = addr.slice(0, 4) + '00'
        if (!GB2260.hasOwnProperty(tmpAddr)) {
          tmpAddr = addr.slice(0, 2) + '0000'
          if (!GB2260.hasOwnProperty(tmpAddr)) {
            return false
          } else {
            return GB2260[tmpAddr] + '未知地区'
          }
        } else {
          return GB2260[tmpAddr] + '未知地区'
        }
      } else {
        return GB2260[addr]
      }
    },
    // 生日码检查
    checkBirth: function (birth) {
      /* eslint-disable */
      var year
      /* eslint-enable */
      var month
      var day
      if (birth.length === 8) {
        year = parseInt(birth.slice(0, 4), 10)
        month = parseInt(birth.slice(4, 6), 10)
        day = parseInt(birth.slice(-2), 10)
      } else if (birth.length === 6) {
        year = parseInt('19' + birth.slice(0, 2), 10)
        month = parseInt(birth.slice(2, 4), 10)
        day = parseInt(birth.slice(-2), 10)
      } else {
        return false
      }
      // TODO 是否需要判断年份
      /*
      if(year < 1800) return false
      */
      // TODO 按月份检测
      if (month > 12 || month === 0 || day > 31 || day === 0) {
        return false
      }
      return true
    },
    // 顺序码检查
    checkOrder: function (order) {
      // 暂无需检测

      return true
    },
    // 加权
    weight: function (t) {
      return Math.pow(2, t - 1) % 11
    },
    // 随机整数
    rand: function (max, min) {
      min = min || 1
      return Math.round(Math.random() * (max - min)) + min
    },
    // 数字补位
    str_pad: function (str, len, chr, right) {
      str = str.toString()
      len = len || 2
      chr = chr || '0'
      right = right || false
      if (str.length >= len) {
        return str
      } else {
        for (var i = 0, j = len - str.length; i < j; i++) {
          if (right) {
            str = str + chr
          } else {
            str = chr + str
          }
        }
        return str
      }
    },
    // 抛错
    error: function (msg) {
      var e = new Error()
      e.message = 'IDValidator: ' + msg
      throw e
    }
  }
  /* --------------------
    身份证操作
    -------------------- */
  var validator = function () {
    var s = this
    this.cache = {}
    // 号码是否合法
    s.isValid = function (id) {
      var code = IDValidatorUtil.checkArg(id)
      if (code === false) {
        return false
      }
      // 查询cache
      if (this.cache.hasOwnProperty(id) && typeof this.cache[id].valid !== 'undefined') {
        return this.cache[id].valid
      } else {
        if (!this.cache.hasOwnProperty(id)) {
          this.cache[id] = {}
        }
      }

      var addr = code.body.slice(0, 6)
      var birth = (code.type === 18 ? code.body.slice(6, 14) : code.body
        .slice(6, 12))
      var order = code.body.slice(-3)

      if (!(IDValidatorUtil.checkAddr(addr, GB2260) && IDValidatorUtil.checkBirth(birth) && IDValidatorUtil.checkOrder(order))) {
        this.cache[id].valid = false
        return false
      }

      // 15位不含校验码，到此已结束
      if (code.type === 15) {
        this.cache[id].valid = true
        return true
      }

      /*  校验位部分  */

      // 位置加权
      var posWeight = []
      for (var i = 18; i > 1; i--) {
        var wei = IDValidatorUtil.weight(i)
        posWeight[i] = wei
      }

      // 累加body部分与位置加权的积
      var bodySum = 0
      var bodyArr = code.body.split('')
      for (var j = 0; j < bodyArr.length; j++) {
        bodySum += (parseInt(bodyArr[j], 10) * posWeight[18 - j])
      }

      // 得出校验码
      var checkBit = 12 - (bodySum % 11)
      if (checkBit === 10) {
        checkBit = 'X'
      } else if (checkBit > 10) {
        checkBit = checkBit % 11
      }
      checkBit = (typeof checkBit === 'number' ? checkBit.toString() : checkBit)

      // 检查校验码
      if (checkBit !== code.checkBit) {
        this.cache[id].valid = false
        return false
      } else {
        this.cache[id].valid = true
        return true
      }
    }

    // 分析详细信息
    s.getInfo = function (id) {
      // 号码必须有效
      if (this.isValid(id) === false) {
        return false
      }
      // TODO 复用此部分
      var code = IDValidatorUtil.checkArg(id)

      // 查询cache
      // 到此时通过isValid已经有了cache记录
      if (typeof this.cache[id].info !== 'undefined') {
        return this.cache[id].info
      }

      var addr = code.body.slice(0, 6)
      var birth = (code.type === 18 ? code.body.slice(6, 14) : code.body
        .slice(6, 12))
      var order = code.body.slice(-3)

      var info = {}
      info.addrCode = addr
      if (GB2260 !== null) {
        info.addr = IDValidatorUtil.getAddrInfo(addr, GB2260)
      }
      info.birth = (code.type === 18 ? (([birth.slice(0, 4), birth.slice(4, 6), birth.slice(-2)]).join('-')) : ([
        '19' + birth.slice(0, 2), birth.slice(2, 4),
        birth.slice(-2)]).join('-'))
      info.sex = (order % 2 === 0 ? 0 : 1)
      info.length = code.type
      if (code.type === 18) {
        info.checkBit = code.checkBit
      }
      // 记录cache
      this.cache[id].info = info
      return info
    }
    // 仿造一个号
    s.makeID = function (isFifteen) {
      // 地址码
      var addr = null
      if (GB2260 !== null) {
        var loopCnt = 0
        while (addr === null) {
          // 防止死循环
          if (loopCnt > 10) {
            addr = 110101
            break
          }
          var prov = IDValidatorUtil.str_pad(IDValidatorUtil.rand(50), 2, '0')
          var city = IDValidatorUtil.str_pad(IDValidatorUtil.rand(20), 2, '0')
          var area = IDValidatorUtil.str_pad(IDValidatorUtil.rand(20), 2, '0')
          var addrTest = [prov, city, area].join('')
          if (GB2260[addrTest]) {
            addr = addrTest
            break
          }
        }
      } else {
        addr = 110101
      }

      // 出生年
      var yr = IDValidatorUtil.str_pad(IDValidatorUtil.rand(99, 50), 2, '0')
      var mo = IDValidatorUtil.str_pad(IDValidatorUtil.rand(12, 1), 2, '0')
      var da = IDValidatorUtil.str_pad(IDValidatorUtil.rand(28, 1), 2, '0')
      if (isFifteen) {
        return addr + yr + mo + da + IDValidatorUtil.str_pad(IDValidatorUtil.rand(999, 1), 3, '1')
      }

      yr = '19' + yr
      var body = addr + yr + mo + da + IDValidatorUtil.str_pad(IDValidatorUtil.rand(999, 1), 3, '1')

      // 位置加权
      var posWeight = []
      for (var i = 18; i > 1; i--) {
        var wei = IDValidatorUtil.weight(i)
        posWeight[i] = wei
      }

      // 累加body部分与位置加权的积
      var bodySum = 0
      var bodyArr = body.split('')
      for (var j = 0; j < bodyArr.length; j++) {
        bodySum += (parseInt(bodyArr[j], 10) * posWeight[18 - j])
      }

      // 得出校验码
      var checkBit = 12 - (bodySum % 11)
      if (checkBit === 10) {
        checkBit = 'X'
      } else if (checkBit > 10) {
        checkBit = checkBit % 11
      }
      checkBit = (typeof checkBit === 'number' ? checkBit.toString() : checkBit)
      return (body + checkBit)
    }
  }
  return validator
})();


// Animate
var Animate = {
  // requestAnimationFrame兼容
  requestAF: window.requestAnimationFrame ||
  window.webkitRequestAnimationFrame ||
  window.mozRequestAnimationFrame ||
  window.oRequestAnimationFrame ||
  window.msRequestAnimationFrame ||
  function (handler) { return window.setTimeout(handler, 1000 / 60) },
  // requestAnimationFrame兼容
  cancelAF: window.cancelAnimationFrame ||
  window.webkitCancelAnimationFrame ||
  window.mozCancelAnimationFrame ||
  window.oCancelAnimationFrame ||
  window.msCancelAnimationFrame ||
  function (handler) { return window.clearTimeout(handler) },
  // 动画执行一次后销毁
  one: function (el, aniname) {
    var animExpr = new RegExp('\\s{0,}' + aniname, 'g')
    if (el.className.match(animExpr)) {
      el.className = el.className.replace(animExpr, '')
    }
    el.className += ' ' + aniname
    if (!el.hasEndEvent) {
      el.addEventListener('webkitAnimationEnd', function (e) {
        el.className = el.className.replace(animExpr, '')
      }, false)
      el.hasEndEvent = true
    }
  },
  fps: function (callback, duration) {
    var fps = 0
    var interval = setInterval(function () {
      fps++
    }, 1)
    setTimeout(function () {
      if (callback) {
        callback(fps)
      }
      clearInterval(interval)
    }, duration || 1000)
  }
  // requestAnimationFrame帧率测试
  /* fps: function (callback, duration) {
    var fps = 0
    function fpstest (timestamp) {
      fps++
      var requestAF = requestAnimationFrame(fpstest)
      console.log(timestamp)
      if (timestamp >= (duration || 1000)) {
        if (callback) {
          callback(fps)
        }
        cancelAnimationFrame(requestAF)
      }
    }
    requestAnimationFrame(fpstest)
  } */
};

//export default Animate


//BaiduMap
(function(window,document,undefined){
	
	window.BaiduMap=function(container,params){
		/*=========================
          Params
          ===========================*/
        var defaults={
        	//定义弹出框样式
			"infoWindowStyle":{
				width:250,
				height:120,
				title:"<h4 style='margin:0 0 5px 0;padding:0.2em 0'>最新签到</h4>",
				enableMessage:true,
				offset:new BMap.Size(0, -20)
			},
			//自定义标记图标
			"markerIcon":null,
			//自定义标记label样式
			"labelStyle":{
				display:"block",
				position:"relative",
				width:"30px",
				height:"30px",
				borderRadius:"50% 50% 50% 0",
				webkitTransform:"rotate(-45deg)",
				webkitTransformOrigin:"center",
				border:"none",
				margin:"-12px 0 0 -7px"
			},
		}
		params=params||{};
		for(var def in defaults){
			if(params[def]===undefined){
				params[def]=defaults[def];
			}
		}
		//Map
		var s=this;
		//Params
		s.params = params;
		//初始化地图控件
		s.map = new BMap.Map(container);
		s.container=document.querySelector("#"+container);
		
		/*=========================
          Method
          ===========================*/
        //标记点击，打开infowWindow
        function addClickHandler(content,marker){
			marker.addEventListener("click",function(e){
				openInfo(content,e)}
			);
		}
		//打开infowWindow
		function openInfo(content,e){
			var p = e.target;
			var point = new BMap.Point(p.getPosition().lng, p.getPosition().lat);
			var infoWindow = new BMap.InfoWindow(content,s.params.infoWindowStyle);  // 创建信息窗口对象 
			s.map.openInfoWindow(infoWindow,point); //开启信息窗口
		}
		//显示地图标记
		s.show=function(markerData){
			s.map.clearOverlays();
			if(!markerData){
				s.map.centerAndZoom("南京", 15);
				return;
			}
			if(arguments.length===2){
				s.map.centerAndZoom(new BMap.Point(arguments[0],arguments[1]), 15);
				return;
			}
			//显示区域
			s.map.centerAndZoom(new BMap.Point(markerData[0][0],markerData[0][1]), 15);
			for(var i=0;i<markerData.length;i++){
				//添加label对象
				if(s.params.labelStyle){
					var myLabel=new BMap.Label(markerData[i][3]);
					s.params.labelStyle.backgroundColor=markerData[i][4];
					myLabel.setStyle(s.params.labelStyle);
				}
				//添加描点
				var marker = new BMap.Marker(new BMap.Point(markerData[i][0],markerData[i][1]));
				if(s.params.markerIcon)marker.setIcon(s.params.markerIcon);
				marker.setLabel(myLabel);
				var content = markerData[i][2];
				s.map.addOverlay(marker);
				//添加点击
				addClickHandler(content,marker);
			}
		}
		//获得gps位置信息
		s.gps=function(featureHandler,feature){
			var geolocation = new BMap.Geolocation();
			geolocation.getCurrentPosition(function(pos){
				if(this.getStatus() == BMAP_STATUS_SUCCESS){
					var point=pos.point,y=point.lng,x=point.lat;
					//这里是坐标point
					if(feature && feature==="point"){
						featureHandler(point);
						return;
					}
					//根据point得到地址
					var gpsPlace = new BMap.Geocoder();
					gpsPlace.getLocation(point, function(result){      
						if (result){
							//执行传入的回调函数
							featureHandler(point,result.address);
						}else{
							alert("获取地址失败"+this.getStatus());
						}
					});
				}else {
					alert("获取坐标失败"+this.getStatus());
				}
			},{enableHighAccuracy: true});
		}
		//根据坐标获得地址
		s.place=function(point,featureHandler){
			alert(point);
			//根据point得到地址
			var gpsPlace = new BMap.Geocoder();
			gpsPlace.getLocation(point, function(result){      
				if (result){
					//执行传入的回调函数
					if(feature && feature==="place"){
						featureHandler(result.address);
					}
				}
			});
		}
		//一键导航
		s.mapGuide=function(guideopts){
			var lng=guideopts.point.lng;
			var lat=guideopts.point.lat;
			var title=guideopts.title;
			var content=guideopts.content;
			window.location.href='http://api.map.baidu.com/marker?location='+lat+','+lng+'&title='+title+'&content='+content+'&output=html';
		}

		//返回地址截图
		s.mapImg=function(mapImgOpt){
			var lng=mapImgOpt.point.lng;
			var lat=mapImgOpt.point.lat;
			var title=mapImgOpt.title;
			var content=mapImgOpt.content;
			var width=mapImgOpt.width;
			var height=mapImgOpt.height;
			
			var imgSrc="http://api.map.baidu.com/staticimage?width="+width+"&height="+height+"&center="+lng+","+lat+"&markers="+lng+","+lat+"&scale=1&zoom=15&markerStyles=-1,http://api.map.baidu.com/images/marker_red.png";
			return imgSrc;
		}
	};
})(window,document,undefined);

//Formcontrols (require object.js)
(function(window,document,undefined){
	window.FormControls=function(params){
		/*================
		Model
		================*/
		var defaults={
			rangeTipClass:"range-tooltip",//滑动条弹出框
			searchClass:"inputbox-search",
			numboxClass:"numbox",//数字框
			switchClass:"switch",//开关控件
			turnClass:"turn",//开关控件
			revealAttr:"[data-input=reveal]",//密码小眼睛
			clearAttr:"[data-input=clear]",//清空按钮
			safelvlClass:"safelvl",//密码安全等级
			inputpreClass:"input-pre"//自动增高控件
		}
		params=params||{};
		for(var def in defaults){
			if(params[def]===undefined){
				params[def]=defaults[def];
			}
		}
		//Formcontrols
		var s=this;
		//Params
		s.params = params;

		/*================
		Method
		================*/
		//自动增高控件，创建pre元素
		s.createPreAfter=function(el){
			var pre=document.createElement("pre");
			var span=document.createElement("span");
			pre.appendChild(span);
			pre.style.width=el.clientWidth+"px";
			el.parentNode.insertBefore(pre,el.nextSibling);
			setTimeout(function() {
				pre.style.width=el.clientWidth+"px";
			}, 100);
		}
		s.update=function(){
			s.detach();
			s.attach();
		}
	    /*================
		Events
		================*/
		s.events=function(detach){
			var action=detach?"removeEventListener":"addEventListener";
			//开关控件
			var switches=document.querySelectorAll("."+s.params.switchClass);
			
			for(var i=0,swi;swi=switches[i++];){
				swi[action]("click",s.onSwitch,false);
			}
			//开关控件
			var turns=document.querySelectorAll("."+s.params.turnClass);
			
			for(var i=0,turn;turn=turns[i++];){
				turn[action]("click",s.onSwitch,false);
			}
			//密码小眼睛
			var reveals=document.querySelectorAll(s.params.revealAttr+" > [type=password] + i");
			for(var j=0,reveal;reveal=reveals[j++];){
				reveal[action]("click",s.onReveal,false);
			}
			//清除按钮框
			var clears=document.querySelectorAll(s.params.clearAttr+" > input");
			var clearIcons=document.querySelectorAll(s.params.clearAttr+"> input+i");
			for(var k=0;k<clears.length;k++){
				clears[k][action]("input",s.onClear,false);
				if(clearIcons[k])clearIcons[k][action]("click",s.onClearIcon,false);
			}
			//安全检测框
			var safes=document.querySelectorAll("."+s.params.safelvlClass);
			for(var l=0,safe;safe=safes[l++];){
				var safeInput=safe.parentNode.querySelector("input[type]");
				safeInput.safe=safe;
				safeInput[action]("input",s.onSafeLvl,false);
			}
			//拖动条
			var ranges=document.querySelectorAll("."+s.params.rangeTipClass+"+input[type=range]");
			for(var m=0,range;range=ranges[m++];){
				range[action]("touchstart",s.onRangeStart,false);
				range[action]("touchmove",s.onRangeMove,false);
				range[action]("input",s.onRangeMove,false);
				range[action]("touchend",s.onRangeEnd,false);
			}
			//数字框
			var numboxs=document.querySelectorAll("."+s.params.numboxClass+" input[type=number]");
			for(var n=0,numbox;numbox=numboxs[n++];){
				numbox.nextElementSibling[action]("click",s.onNumboxPlus,false);
				numbox.previousElementSibling[action]("click",s.onNumboxMinus,false);
			}
			//自动增高控件
			var inputpres=document.querySelectorAll("."+s.params.inputpreClass);
			for(var o=0,inputpre;inputpre=inputpres[o++];){
				if(!inputpre.nextElementSibling || inputpre.nextElementSibling.tagName!="PRE"){
					s.createPreAfter(inputpre);
				}
				inputpre.pre=inputpre.nextElementSibling;
				inputpre.preSpan=inputpre.pre.childNodes[0];
				inputpre[action]("input",s.onInputpre,false);
			}
			//搜索框
			var inputSearchs=document.querySelectorAll("."+s.params.searchClass+" input[type='search']");
			for(var p=0,inputSearch;inputSearch=inputSearchs[p++];){
				inputSearch[action]("blur",s.onBlurSearch,false);
			}
		}
		s.attach=function(event){
			s.events();
		}
		s.detach=function(event){
			s.events(true);
		}
		/*================
		Events Handler
		================*/
		/*开关控件*/
		s.createHiddenInput=function(name){
			var hiddenInput=document.createElement("input");
			hiddenInput.setAttribute("type","hidden");
			hiddenInput.setAttribute("name",name);
			return hiddenInput;
		}
		s.onSwitch=function(e){
			var parentNode=this.parentNode;
			var name=this.getAttribute("data-name");
			var className=this.getAttribute("data-class");
			var onVal=this.getAttribute("data-on-value");
			var offVal=this.getAttribute("data-off-value");

			var hiddenInput=null;
			if(name){
				hiddenInput=this.nextElementSibling && this.nextElementSibling.type=="hidden" && this.nextElementSibling.name==name? this.nextElementSibling : s.createHiddenInput(name);
				if(className)hiddenInput.setAttribute("class",className);
				parentNode.insertBefore(hiddenInput,this.nextSibling);
			}
			
			//切换状态
			if(this.classList.contains("active")){
				this.classList.remove("active");
				if(hiddenInput)hiddenInput.value=offVal||"0";
			}else{
				this.classList.add("active");
				if(hiddenInput)hiddenInput.value=onVal||"1";
			}
		}
		/*密码小眼睛*/
		s.onReveal=function(e){
			var pwdInput=this.parentNode.querySelector("input[type]");
			if(this.classList.contains("active")){
				this.classList.remove("active");
				pwdInput.type="password";
			}else{
				this.classList.add("active");
				pwdInput.type="text";
			}
			pwdInput.focus();
		}
		/*清除按钮框*/
		s.onClear=function(e){
			var clearIcon=this.nextElementSibling;
			if(!clearIcon || clearIcon.tagName!="I")return;
			if(this.value.length>0){
				clearIcon.style.display="block";
			}else{
				clearIcon.style.display="none";
			}
		}
		s.onClearIcon=function(e){
			var txtInput=this.parentNode.querySelector("input[type]");
			this.style.display="none";
			txtInput.value="";
			txtInput.focus();
		}
		/*安全检测框*/
		s.onSafeLvl=function(e){
			var value = this.value
			var lvlField = this.safe
	    var lvl = Object.passwordLvl(value)
	    lvlField.className = lvlField.className.replace(/lvl[0-3]/, 'lvl' + lvl)
		}
		/*拖动条*/
		s.showToolTip=function(tooltip,rangeInput){
			//当前值所占百分比
			var percent=((rangeInput.value-rangeInput.min)/(rangeInput.max-rangeInput.min)).toFixed(2);
			
			//距左的位置
			var dragRange=rangeInput.clientWidth*percent;
			var offsetLeft=rangeInput.offsetLeft+dragRange-10;
			//var currentOffsetLeft=offsetLeft-rangeInput.parentNode.offsetLeft;

			//滑块内部的实际位置
			var currentBallLeft=28*percent;

			//当前值的位置-滑块的位置=小球正中间的位置
			var left=offsetLeft-currentBallLeft;
			tooltip.innerHTML=rangeInput.value;
			tooltip.setAttribute("style","display:block;left:"+left+"px");
		}
		s.rangeTooltip,s.rangeInput;
		s.onRangeStart=function(e){
			s.rangeTooltip=this.previousElementSibling;
			s.rangeInput=this;
			s.showToolTip(s.rangeTooltip,s.rangeInput);
		}
		s.onRangeMove=function(e){
			s.showToolTip(s.rangeTooltip,s.rangeInput);
		}
		s.onRangeEnd=function(e){
			setTimeout(function(){
				s.rangeTooltip.style.display="none";
	        },1000);
		}
		/*数字框*/
		s.numboxSum=function(inputNumber,btnPlus,btnMinus,operate){
			var min=inputNumber.getAttribute("min")||0;
			var max=inputNumber.getAttribute("max")||9999;
			var step=inputNumber.getAttribute("step")||1;

			var result;

			if(operate){//加运算
				btnMinus.disabled=false;
				result=parseInt(inputNumber.value)+parseInt(step);
				if(result>=max){
					result=max;
					btnPlus.disabled=true;
				}
			}else{//减运算
				btnPlus.disabled=false;
				result=inputNumber.value-step;
				if(result<=min){
					result=min;
					btnMinus.disabled=true;
				}
			}
			inputNumber.value=result;
		}
		s.onNumboxPlus=function(e){
			var inputNumber=this.previousElementSibling;
			var btnPlus=this;
			var btnMinus=inputNumber.previousElementSibling;
			s.numboxSum(inputNumber,btnPlus,btnMinus,true);
		}
		s.onNumboxMinus=function(e){
			var inputNumber=this.nextElementSibling;
			var btnPlus=inputNumber.nextElementSibling;
			var btnMinus=this;
			s.numboxSum(inputNumber,btnPlus,btnMinus,false);
		}
		//自动增高控件
		s.onInputpre=function(e){
			var thisEl=e.target;
			var pre=thisEl.pre;
			var preSpan=thisEl.preSpan;
			//计算textarea高度
			preSpan.innerText=this.value;
			this.style.height=pre.clientHeight+"px";
		}
		//搜索框
		s.onBlurSearch=function(e){
			if(e.target.value==""){
				e.target.parentNode.classList.remove("active");
			}else{
				e.target.parentNode.classList.add("active");
			}
		}
		//初始化
		s.init=function(){
			s.attach();
		};
		s.init();
	}
})(window,document,undefined);

//CountValue 文字计数器
(function(window,document,undefined){
	window.CountValue=function(field,params){
		/*================
		Model
		================*/
		var defaults={
			maxLengthAttr:"data-maxlength",
			defaultMaxLength:20
			/*
            Callbacks:
            onInput:function(CountValue)
			onInputOut:function(CountValue)//文字超过限制
			onInputIn:function(CountValue)//文字未超过限制
			*/
		}
		params=params||{};
		for(var def in defaults){
			if(params[def]===undefined){
				params[def]=defaults[def];
			}
		}
		var s=this;
		//Params
		s.params=params;
		//Field(Element)
		s.field=typeof field === "string"?document.querySelector(field):field;
		//Maxlength(Number)
		s.maxLength=s.field.getAttribute(s.params.maxLengthAttr)||s.params.defaultMaxLength;
		/*================
		Method
		================*/
		s.destroy=function(){
			s.detach();
		}
		/*================
		Controller
		================*/
		s.events=function(detach){
			var action=detach?"removeEventListener":"addEventListener";
			s.field[action]("input",s.onInput,false);
		}
		s.attach=function(event){
            s.events();
        }
        s.detach=function(event){
            s.events(true);
        }
        s.onInput=function(e){
        	s.target=e.target;
        	//Callback
			if(s.params.onInput)s.params.onInput(s);
			if(s.maxLength<s.target.value.length && s.params.onInputOut){
				if(s.params.onInputOut)s.params.onInputOut(s);
			}else{
				if(s.params.onInputIn)s.params.onInputIn(s);
			}
        }
        //Init
        s.init=function(){
        	s.attach();
        }
        s.init();
	}
	window.CountValues=function(params){
		/*================
		Model
		================*/
		var defaults={
			fieldClass:"countvalue",
			/*
            Callbacks:
            onInput:function(CountValue)
			onInputOut:function(CountValue)//文字超过限制
			onInputIn:function(CountValue)//文字未超过限制
			*/
		}
		params=params||{};
		for(var def in defaults){
			if(params[def]===undefined){
				params[def]=defaults[def];
			}
		}
		var s=this;
		s.countValues=[];
		//Params
		s.params=params;
        //获得所有元素
        s.update=function(){
        	var elements=document.querySelectorAll("."+s.params.fieldClass);
        	for(var i=0,el;el=elements[i++];){
        		s.countValues[i]=new CountValue(el,s.params);
        	}
        }
        s.update();
        /*================
		Method
		================*/
        s.destroy=function(){
        	for(var i=0;i<s.countvalues.length;i++){
	            s.countValues[i].destroy();
	        }
	        s.countValues=null;
        }
        return s.countValues;
	}
})(window,document,undefined);

// 幂集 如:[1,2],返回[[1],[2],[1,2]]
window.Array.prototype.powerset = function () {
  var ps = [[]]
  for (var i = 0; i < this.length; i++) {
    for (var j = 0, len = ps.length; j < len; j++) {
      ps.push(ps[j].concat(this[i]))
    }
  }
  return ps
}

// 二维数组转为一维数组
window.Array.prototype.toOneColumn = function () {
  var reg = /[\d\.]+\,([\d\.]+)/g // eslint-disable-line
  return this.join(',').replace(reg, '$1').split(',')
}

// 包含，支持传数组包含数组
window.Array.prototype.contains = function (arg) {
  if (toString.call(arg) !== '[object Array]') {
    return this.indexOf(arg) > -1
  }
  return this.filter(function (elem) {
    return arg.indexOf(elem) > -1
  }).length === arg.length
}


// Counter 动态数字
var Counter = function (counter, params) {
  /* ----------------------
  Model
  ---------------------- */
  var defaults = {
    fromAttr: 'data-from',
    toAttr: 'data-to',
    durationAttr: 'data-duration',
    maxMilliSec: 50, // 最快50毫秒执行一次
    maxCountSec: 20 // 平均一秒执行20次
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  // Counter
  var s = this

  // Params
  s.params = params

  // Counter
  s.counter = typeof counter === 'string' ? document.querySelector(counter) : counter

  // From(开始数字)
  s.from = s.counter.getAttribute(s.params.fromAttr) ? s.counter.getAttribute(s.params.fromAttr) : 0
  // To(结束数字)
  s.to = s.counter.getAttribute(s.params.toAttr) ? s.counter.getAttribute(s.params.toAttr) : 0
  // Current(当前数字)
  s.current = s.from
  // Duration(执行秒数)
  s.duration = s.counter.getAttribute(s.params.durationAttr) ? s.counter.getAttribute(s.params.durationAttr) : 5000

  // Diff(差值)
  s.diff = s.to - s.from
  if (s.diff < 0 || isNaN(s.from) || isNaN(s.to)) {
    console.log('请确定开始时间与结束时间是否输入正确！')
    return
  }

  // 每秒需要走完的数字
  var secNum = Math.round(s.diff / (s.duration / 1000))
  // 每次增加的数字
  s.step = 1
  // 毫秒/次
  s.milliSec = Math.round(s.params.maxMilliSec)
  if (secNum > s.params.maxCountSec) { // 如果每秒走完的数字，大于最大每秒执行次数，则要步进加快
    s.step = Math.round(secNum / s.params.maxCountSec)
    s.milliSec = s.params.maxMilliSec // 用最快的速度：50毫秒执行一次
  } else {
    s.step = secNum
    s.milliSec = 1000 / secNum // 1秒执行的次数
  }

  // console.log('从'+s.from+'到'+s.to+'，共'+s.duration/1000+'秒走完，每秒需要增加'+secNum+'，每'+s.milliSec+'毫秒执行一次，一秒执行'+Math.round(1000/s.milliSec)+'次，一次递增：'+s.step+'')

  // Interval
  s.interval
  /* ----------------------
  Method
  ---------------------- */
  s.play = function () {
    s.interval = window.setInterval(function () {
      s.current = parseInt(s.current) + parseInt(s.step)
      s.counter.innerHTML = s.current
      if (s.current >= s.to) {
        s.counter.innerHTML = s.to
        clearInterval(s.interval)
      }
    }, s.milliSec)
  }
}
var Counters = function (params) {
  params = params || {}
  var counterClass = 'counter'
  var s = this
  s.counters = []
  s.update = function () {
    var elements = document.querySelectorAll('.' + counterClass)
    for (var i = 0; i < elements.length; i++) {
      s.counters[i] = new Counter(elements[i], s.params)
    }
  }
  s.update()
  s.play = function () {
    for (var i = 0; i < s.counters.length; i++) {
      s.counters[i].play()
    }
  }
}

;//export {Counter, Counters}


// Clock 时钟控件
var Clock = function (clock, params) {
  var defaults = {
    hourClass: 'clock-hour',
    minuteClass: 'clock-minute',
    time: '', // 格式08:30
    duration: '500',
    delay: '0'
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  // Params
  s.params = params
  // Container
  s.clock = typeof clock === 'string' ? document.querySelector(clock) : clock
  s.hour
  s.minute
  s.time
  s.hourDeg
  s.minuteDeg
  /* -------------------
  Method
  ------------------- */
  s.getHourDeg = function (hour) {
    return hour * 30
  }
  s.getMinuteDeg = function (minute) {
    return minute * 6
  }
  s.update = function () {
    s.hour = s.clock.querySelector('.' + s.params.hourClass)
    s.minute = s.clock.querySelector('.' + s.params.minuteClass)
    if (!s.params.time || !/\d{1,2}:\d{1,2}/.test(s.params.time)) {
      console.log('SeedsUI Warn:时间格式应为xx:xx')
      return
    }
    var hourMinute = s.params.time.split(':')
    s.hourDeg = s.getHourDeg(hourMinute[0])
    s.minuteDeg = s.getMinuteDeg(hourMinute[1])
    // 设置duration和delay
    s.hour.style.webkitTransitionDuration = s.params.duration + 'ms'
    s.hour.style.webkitTransitionDelay = s.params.delay + 'ms'
    s.minute.style.webkitTransitionDuration = s.params.duration + 'ms'
    s.minute.style.webkitTransitionDelay = s.params.delay + 'ms'
  }
  s.update()
  s.play = function () {
    s.hour.style.webkitTransform = 'rotate(' + s.hourDeg + 'deg)'
    s.minute.style.webkitTransform = 'rotate(' + s.minuteDeg + 'deg)'
  }
}
var Clocks = function (params) {
  params = params || {}
  var clockAttr = 'data-clock'
  var s = this
  s.clocks = []
  var elements = document.querySelectorAll('[' + clockAttr + ']')
  s.update = function () {
    for (var i = 0; i < elements.length; i++) {
      params.time = elements[i].getAttribute(clockAttr)
      s.clocks[i] = new Clock(elements[i], params)
    }
  }
  s.update()
  s.play = function () {
    for (var i = 0; i < s.clocks.length; i++) {
      s.clocks[i].play()
    }
  }
}

;//export {Clocks, Clock}


//Aside 侧边栏
(function(window,document,undefined){
    window.Aside=function(container,params){
        /*=========================
          Model
          ===========================*/
        var defaults={
            wrapperClass:"aside-wrapper",

            asideContainerClass:"aside-page",
            sectionClass:"page",

            sides:{"left":null,"right":null},
            
            threshold:{"left":60,"right":60},

            duration:300,
            isClickMaskHide:true,
            isDrag:false,
            /*callbacks
            onStart:function(Aside)
            onShowed:function(Aside)
            onHid:function(Aside)
            onClickMask:function(Aside)
            */
        }
        params=params||{};
        for(var def in defaults){
            if(params[def]===undefined){
                params[def]=defaults[def];
            }
        }
        //AsideContainer
        var s=this;
        //Params
        s.params=params;
        //Container
        s.container=typeof container=="string"?document.querySelector(container):container;
        if(!s.container){
            console.log("SeedsUI Error：未找到Aside的DOM对象，请检查传入参数是否正确");
            return;
        }
        //Wrapper
        s.wrapper=s.container.querySelector("."+s.params.wrapperClass);
        //Section
        s.section=s.container.querySelector("."+s.params.sectionClass);
        //Mask
        s.createMask=function(){
            var mask=document.createElement("div");
            mask.setAttribute("class","mask");
            return mask;
        }
        s.mask=s.createMask();
        s.section.appendChild(s.mask);
        //Aside
        s.sides={"left":null,"right":null},s.position=null;
        s.update=function(){
            if(s.params.sides["left"])s.updateAside("left");
            if(s.params.sides["right"])s.updateAside("right");
        }
        s.updateAside=function(pos){
            //属性设置
            s.sides[pos]=typeof s.params.sides[pos]=="string"?s.wrapper.querySelector(s.params.sides[pos]):s.params.sides[pos];
            if(!s.sides[pos])return;
            var aside=s.sides[pos];
            //data-position
            aside.setAttribute("data-position",pos);
            //data-transition
            aside.transition=aside.getAttribute("data-transition")||"";
            //width
            aside.width=aside.clientWidth;
            if(pos=="right")aside.width=-aside.width;
            //动画设置
            switch(aside.transition){
                case "overlay":
                aside.showTransform='translate3d(0,0,0)',
                aside.hideTransform='translate3d('+-aside.width+'px,0,0)',
                aside.elTransform=aside;
                break;

                case "push":
                aside.showTransform='translate3d('+aside.width+'px,0,0)',
                aside.hideTransform='translate3d(0,0,0)',
                aside.elTransform=s.wrapper;
                break;
            }
        }
        s.update();
        s.updateActiveEl=function(aside){
            if(aside.transition=="overlay"){
                s.activeEl=aside;
            }else if(aside.transition=="push"){
                s.activeEl=s.wrapper;
            }else{
                s.activeEl=s.section;
            }
        }
        /*=========================
          Method
          ===========================*/
        s.showMask=function(){
            s.mask.style.visibility="visible";
            s.mask.style.opacity="1";
        }
        s.hideMask=function(){
            s.mask.style.visibility="hidden";
            s.mask.style.opacity="0";
        }
        s.transformTarget=function(target,transform,duration){
            if(!duration)duration=0;
            target.style.webkitTransitionDuration=duration+"ms";
            target.style.webkitTransform=transform;
        }
        s.isHid=true;
        s.show=function(pos,fn){
            //设置显示回调
            if(fn)s.params.onShowed=fn;
            //设置显示侧边
            if(pos)s.position=pos;
            if(!s.sides[s.position]){
                s.position=null;
                return;
            }
            //记录显示状态
            s.isHid=false;
            //显示侧边栏
            s.sides[s.position].style.visibility="visible";
            s.showMask();
            s.transformTarget(s.sides[s.position].elTransform,s.sides[s.position].showTransform,s.params.duration);

            //记录触摸值
            s.touches.posX=s.sides[s.position].width;

            //Callback onStart
            if(s.params.onStart)s.params.onStart(s);
        }
        s.hide=function(fn){
            if(fn)s.params.onHid=fn;
            if(!s.sides[s.position]){
                s.position=null;
                return;
            }
            //记录显示状态
            s.isHid=true;
            //隐藏侧边栏
            s.hideMask();
            s.transformTarget(s.sides[s.position].elTransform,s.sides[s.position].hideTransform,s.params.duration);

            //记录触摸值
            s.touches.posX=0;
        }
        s.setLeftSide=function(argAside){
            s.params.sides["left"]=argAside;
            s.update();
        }
        s.setRightSide=function(argAside){
            s.params.sides["right"]=argAside;
            s.update();
        }
        s.clearChange=function(){
            //初始化transform
            if(s.sides[s.position].style.removeProperty){
                s.sides[s.position].style.removeProperty("transform");
                s.sides[s.position].style.removeProperty("-webkit-transform");
            }else{
                s.sides[s.position].style.removeAttribute("transform");
                s.sides[s.position].style.removeAttribute("-webkit-transform");
            }
            //初始化侧边栏
            s.sides[s.position].style.visibility="hidden";
            //初始化侧边栏
            s.position=null;
        }
        s.addTransitionDuration=function(){
            s.sides[s.position].style.webkitTransitionDuration=s.params.duration+"ms";
        }
        s.removeTransitionDuration=function(){
            s.sides[s.position].style.webkitTransitionDuration="0ms";
        }
        /*=========================
          Control
          ===========================*/
        s.preventDefault=function(e){
            e.preventDefault();
        }
        s.events=function(detach){
            var touchTarget=s.container;
            var action=detach?"removeEventListener":"addEventListener";
            if(s.params.isDrag){
                touchTarget[action]("touchstart",s.onTouchStart,false);
                touchTarget[action]("touchmove",s.onTouchMove,false);
                touchTarget[action]("touchend",s.onTouchEnd,false);
                touchTarget[action]("touchcancel",s.onTouchEnd,false);
            }
            //clickMask
            s.mask[action]("click",s.onClickMask,false);
            //transitionEnd
            s.wrapper[action]("webkitTransitionEnd",s.onTransitionEnd,false);
        }
        //attach、dettach事件
        s.attach=function(event){
            s.events();
        }
        s.detach=function(event){
            s.events(true);
        }
        //Events Handler
        //Touch信息
        s.touches={
            startX:0,
            startY:0,
            currentX:0,
            currentY:0,
            endX:0,
            endY:0,
            diffX:0,
            diffY:0,
            posX:0,
            direction:null,
            position:null
        };
        s.preventDefault=function(e){
            e.preventDefault();
        }
        s.stopPropagation=function(e){
            e.stopPropagation();
        }
        s.onTouchStart=function(e){
            s.container.addEventListener("touchmove",s.preventDefault,false);
            s.touches.startX=e.touches[0].clientX;
            s.touches.startY=e.touches[0].clientY;
            //Callback
            /*if(e.target==s.wrapper || e.target==s.section || e.target.getAttribute("data-transition")){
                s.target=e.target;
                if(s.params.onSlideChangeStart)s.params.onSlideChangeStart(s);
            }*/
        }
        s.showSide;
        s.onTouchMove=function(e){
            s.touches.currentX=e.touches[0].clientX;
            s.touches.currentY=e.touches[0].clientY;
            s.touches.diffX=s.touches.startX-s.touches.currentX;
            s.touches.diffY=s.touches.startY-s.touches.currentY;
            //设置滑动方向
            if(s.touches.direction==null){
                s.touches.direction=Math.abs(s.touches.diffY)-Math.abs(s.touches.diffX)>0?"vertical":"horizontal";
            }
            if(s.touches.direction=="vertical"){
                s.container.removeEventListener("touchmove",s.preventDefault,false);
                return;
            }
            e.stopPropagation();
            //x轴距离左边的像素，向左为负数，向右为正数
            var moveX=s.touches.posX-s.touches.diffX;
            //侧边显示方向
            if(!s.position){
                if(moveX<0)s.position="right";
                else s.position="left";
            }
            //拖动方向
            if(s.touches.diffX<0)s.touches.position="right";
            else s.touches.position="left";
            
            //是否存在此侧边
            if(!s.sides[s.position]){
                return;
            }

            //设置激活侧边栏
            if(!s.showSide){
                s.showSide=s.sides[s.position];
            }
            //判断是否是边缘
            if(Math.abs(moveX)>Math.abs(s.showSide.width)){
                //moveX=s.showSide.width;
                return;
            }
            if(s.position=="left" && moveX<0){
                //moveX=0;
                return;
            }
            if(s.position=="right" && moveX>0){
                //moveX=0;
                return;
            }
            
            //移动位置
            s.showSide.style.visibility="visible";
            var translateX=moveX;
            if(s.showSide.transition=="overlay")translateX=-(s.showSide.width-moveX);
            s.transformTarget(s.showSide.elTransform,'translate3d('+translateX+'px,0,0)');

            //if(s.params.onSlideChange)s.params.onSlideChange(s);
        }
        s.onTouchEnd=function(e){
            var sidePos=s.position;
            var touchPos=s.touches.position;
            /*console.log("侧边栏："+sidePos);
            console.log("您拖动的方向："+touchPos);
            console.log("是否是隐藏状态："+s.isHid);*/

            //展开和收缩
            if(s.touches.direction=="horizontal"){
                var threshold=s.params.threshold[sidePos];//拖动阈值
                if(s.isHid){//隐藏状态
                    if(Math.abs(s.touches.diffX)>threshold){
                        s.show(sidePos);
                    }else{
                        s.hide();
                    }
                }else{//已显示状态
                    if(Math.abs(s.touches.diffX)>threshold){
                        if(sidePos==touchPos){//拖动方向相同时才隐藏
                            s.hide();
                        }
                    }else{
                        s.show();
                    }
                }
            }

            //清空滑动方向
            s.touches.direction=null;
            s.touches.position=null;
            s.showSide=null;
        }
        s.onClickMask=function(e){
            s.target=e.target;
            if(s.params.onClickMask)s.params.onClickMask(s);
            if(s.params.isClickMaskHide){
                s.hide();
            }
            s.preventDefault(e);
        }
        s.setOnClickMask=function(fn){
            s.params.onClickMask=fn;
        }
        s.onTransitionEnd=function(e){
            if(s.mask==e.target)return;

            //移除动画
            s.removeTransitionDuration();
            //如果是隐藏状态，清除修改项
            if(s.isHid==true){
                s.clearChange();
                if(s.params.onHid)s.params.onHid(s);
            }else{
                if(s.params.onShowed)s.params.onShowed(s);
            }
            //Callback
            /*if(e.target==s.wrapper || e.target==s.section || e.target.getAttribute("data-transition")){
                s.target=e.target;
                if(s.params.onSlideChangeEnd)s.params.onSlideChangeEnd(s);
            }*/
        }
        function init(){
            s.attach();
        }
        init();
    }
})(window,document,undefined);

// Dragrefresh 下拉刷新
var Dragrefresh = function (params) {
  /* ----------------------
  Model
  ---------------------- */
  var defaults = {
    overflowContainer: document.body,
    threshold: 100, // 触发位置
    duration: 150,
    begin: 0, // 起始位置
    end: 300, // 结束位置

    isTopPosition: 0, // 如果scrollTop小于等于isTopPosition时，则认为是到顶部了(不建议修改)

    topContainer: null,
    bottomContainer: null,
    errorContainer: null

    /* callbacks
    onPull:function(s)// 头部拖动中
    onShowTop:function(s)// 开始显示头部
    onHideTop:function(s)// 开始隐藏头部
    onTopShowed(s)// 头部显示动画结束
    onTopHid(s)// 头部隐藏动画结束
    onTransitionEnd:function(Dragrefresh)// 头部动画结束

    onTopRefresh:function(s)// 头部刷新
    onTopComplete:function(s)// 头部完成加载
    onTopNoData:function(s)// 头部无数据 (废弃)

    onBottomRefresh:function(s)// 底部刷新
    onBottomComplete:function(s)// 底部完成加载
    onNoData:function(s)// 底部无数据

    onError:function(s)// 网络错误
    onClickError:function(s)//点击错误容器
     */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  s.params = params
  // Container
  s.overflowContainer = typeof s.params.overflowContainer === 'string' ? document.querySelector(s.params.overflowContainer) : s.params.overflowContainer
  if (!s.overflowContainer) {
    console.log('SeedsUI Error : Dragrefresh overflowContainer不存在，请检查页面中是否有此元素')
    return
  }
  // topContainer
  s.topContainer = typeof s.params.topContainer === 'string' ? document.querySelector(s.params.topContainer) : s.params.topContainer
  if (!s.topContainer) {
    console.log('SeedsUI Warn : topContainer不存在，请检查页面中是否有此元素')
  }
  // bottomContainer
  s.bottomContainer = typeof s.params.bottomContainer === 'string' ? document.querySelector(s.params.bottomContainer) : s.params.bottomContainer
  if (!s.bottomContainer) {
    console.log('SeedsUI Warn : bottomContainer不存在，请检查页面中是否有此元素')
  }
  // errorContainer
  s.errorContainer = typeof s.params.errorContainer === 'string' ? document.querySelector(s.params.errorContainer) : s.params.errorContainer
  if (!s.errorContainer) {
    console.log('SeedsUI Warn : errorContainer不存在，请检查页面中是否有此元素')
  }
  // 正在刷新(默认为不允许下拉，当发生一次请求调用setPagination后才允许下拉)
  s.isRefreshed = false
  /* ----------------------
  Method
  ---------------------- */
  s.isHid = false
  // 隐藏
  s.hideTop = function () {
    s.topContainer.style.webkitTransitionDuration = s.params.duration + 'ms'
    s.touches.posY = s.params.begin
    s.touches.currentPosY = s.params.begin
    s.isHid = true
    // 拖动完成
    s.isOnPull = false
    // 实体操作
    if (s.params.onHideTop) s.params.onHideTop(s)
  }
  // 显示
  s.showTop = function () {
    s.topContainer.style.webkitTransitionDuration = s.params.duration + 'ms'
    s.touches.posY = s.params.threshold
    s.touches.currentPosY = s.params.begin
    s.isHid = false
    // 实体操作
    if (s.params.onShowTop) s.params.onShowTop(s)
  }
  // 销毁对象
  s.destroyTop = function () {
    s.overflowContainer.removeChild(s.topContainer)
  }
  s.destroyBottom = function () {
    s.overflowContainer.removeChild(s.bottomContainer)
  }
  s.destroy = function () {
    s.destroyTop()
    s.destroyBottom()
    // 销毁事件
    s.detach()
  }
  // 是否有滚动条
  s.hasScroll = function () {
    var clientHeight = s.overflowContainer.clientHeight // || window.innerHeight
    var scrollHeight = s.overflowContainer.scrollHeight
    /* var scrollTop = s.overflowContainer === document.body ? document.documentElement.scrollTop : s.overflowContainer.scrollTop
    console.log(clientHeight + ':' + scrollHeight + ':' + scrollTop) */

    if (clientHeight === scrollHeight) {
      return false
    }
    return true
  }
  // 头部刷新
  s.topRefresh = function () {
    if (!s.isRefreshed) return
    // 正在刷新
    s.isRefreshed = false
    // CallBack onTopRefresh
    if (s.params.onTopRefresh) s.params.onTopRefresh(s)
  }
  // 底部刷新
  s.bottomRefresh = function () {
    // 底部无数据、底部正在刷新、下拉中、头部刷新的情况，不执行
    if (s.isNoData || !s.isRefreshed || s.isOnPull) return
    // 正在刷新
    s.isRefreshed = false
    // CallBack onBottomRefresh
    if (s.params.onBottomRefresh) s.params.onBottomRefresh(s)
    // 显示底部容器，隐藏错误容器
    if (s.bottomContainer.classList.contains('hide')) {
      s.errorContainer.classList.add('hide')
      s.bottomContainer.classList.remove('hide')
    }
  }
  // 头部刷新完成
  s.topComplete = function () {
    if (!s.topContainer) return
    // 收起
    s.hideTop()
    // 头部完成
    s.isRefreshed = true
    // Callback onTopComplete
    if (s.params.onTopComplete) s.params.onTopComplete(s)
    // Callback onNoData (无更多数据)
    if (s.isNoData) {
      if (s.params.onNoData) s.params.onNoData(s)
      return
    }
    // 如果还有数据，如果没有滚动条，则继续加载
    if (!s.bottomContainer) return
    setTimeout(function () {
      if (!s.isNoData && !s.hasScroll()) {
        s.bottomRefresh()
      }
    }, s.params.duration * 2)
  }
  // 底部刷新完成
  s.bottomComplete = function () {
    if (!s.bottomContainer) return
    // 底部完成
    s.isRefreshed = true
    // Callback onBottomComplete
    if (s.params.onBottomComplete) s.params.onBottomComplete(s)
    // Callback onNoData (无更多数据)
    if (s.isNoData) {
      if (s.params.onNoData) s.params.onNoData(s)
      return
    }
    // 如果还有数据，并且如果没有滚动条，则继续加载
    if (!s.hasScroll()) {
      s.bottomRefresh()
    }
  }
  // 网络错误
  s.error = function () {
    s.isNoData = true
    s.isRefreshed = true
    // 收起头部
    s.hideTop()
    if (s.bottomContainer) {
      // 显示错误容器
      s.errorContainer.classList.remove('hide')
      s.bottomContainer.classList.add('hide')
    }
    // 网络错误回调
    if (s.params.onError) s.params.onError(s)
  }
  s.noData = function () {
    s.isNoData = true
    s.isRefreshed = true
    // 收起头部
    if (s.topContainer) s.hideTop()
    // 底部显示无数据
    if (s.params.onNoData) s.params.onNoData(s)
  }
  s.setPagination = function (isNext, isNoData, isError) { // 下一页 | 无数据 | 错误
    s.isNoData = isNoData
    // 如果加载错误
    if (isError) {
      s.error()
      return
    }
    // 如果已经没有数据,并且是下一页则不加载
    if (s.isNoData && isNext) {
      s.noData()
      return
    }
    // 加载数据
    if (!isNext && s.topContainer) { // 第一页
      s.topComplete()
    } else { // 下一页
      s.bottomComplete()
    }
  }
  /* ----------------------
  Events
  ---------------------- */
  s.events = function (detach) {
    var action = detach ? 'removeEventListener' : 'addEventListener'
    var touchTarget = s.overflowContainer
    if (s.topContainer) {
      s.overflowContainer[action]('touchstart', s.onTouchStart, false)
      s.overflowContainer[action]('touchmove', s.onTouchMove, false)
      s.overflowContainer[action]('touchend', s.onTouchEnd, false)
      s.overflowContainer[action]('touchcancel', s.onTouchEnd, false)
      // 头部动画监听
      s.topContainer[action]('webkitTransitionEnd', s.onTransitionEnd, false)
    }
    if (s.bottomContainer) {
      // 绑定底部事件，区分一般容器和body
      if (touchTarget === document.body) {
        touchTarget = window
      }
      touchTarget[action]('scroll', s.onScroll, false)
    }
    if (s.errorContainer) s.errorContainer[action]('click', s.onClickError, false)
  }
  // attach、detach事件
  s.attach = function () {
    s.events()
  }
  s.detach = function () {
    s.events(true)
  }

  // Touch信息
  s.touches = {
    direction: 0,
    vertical: 0,
    isTop: true,
    startX: 0,
    startY: 0,
    currentX: 0,
    currentY: 0,
    endX: 0,
    endY: 0,
    diffX: 0,
    diffY: 0,
    posY: 0,
    currentPosY: 0
  }
  s.preventDefault = function (e) {
    e.preventDefault()
  }
  // touchmove的preventDefault事件监听，防止与滚动条冲突
  s.preventMove = false
  s.onTouchStart = function (e) {
    s.overflowContainer.addEventListener('touchmove', s.preventDefault, false)
    s.preventMove = true
    // 如果不在顶部，则不触发
    if (s.getScrollTop() <= s.params.isTopPosition) s.touches.isTop = true
    else s.touches.isTop = false

    s.topContainer.style.webkitTransitionDuration = '0ms'

    s.touches.startX = e.touches[0].clientX
    s.touches.startY = e.touches[0].clientY
  }
  // 标识头部正在拖动
  s.isOnPull = false
  s.onTouchMove = function (e) {
    s.touches.currentX = e.touches[0].clientX
    s.touches.currentY = e.touches[0].clientY
    s.touches.diffY = s.touches.currentY - s.touches.startY
    s.touches.diffX = s.touches.startX - s.touches.currentX

    // 设置滑动方向(-1上下 | 1左右)
    if (s.touches.direction === 0) {
      s.touches.direction = Math.abs(s.touches.diffX) > Math.abs(s.touches.diffY) ? 1 : -1
    }
    // 设置垂直方向(-1上 | 1下)
    if (s.touches.direction === -1) {
      s.touches.vertical = s.touches.diffY < 0 ? 1 : -1
    }
    // 在顶部下拉
    if (s.touches.isTop && s.touches.vertical === -1) {
      if (!s.isRefreshed) return
      if (s.preventMove === false) {
        s.overflowContainer.addEventListener('touchmove', s.preventDefault, false)
        s.preventMove = true
      }
      s.touches.currentPosY = s.touches.posY + s.touches.diffY
      if (s.touches.currentPosY > s.params.end) {
        s.touches.currentPosY = s.params.end
      }
      // 实体操作
      if (s.params.onPull) s.params.onPull(s)
      // 标识头部正在拖动
      s.isOnPull = true
    } else {
      if (s.preventMove === true) {
        s.overflowContainer.removeEventListener('touchmove', s.preventDefault, false)
        s.preventMove = false
      }
    }
  }
  s.onTouchEnd = function (e) {
    // 清除move时记录的方向
    s.touches.direction = 0
    s.touches.vertical = 0
    // 下拉的情况
    if (s.touches.currentPosY > 0) {
      if (s.touches.currentPosY > s.params.threshold) { // 如果大于hold值，则展示
        s.showTop()
      } else { // 小于则收起
        s.hideTop()
      }
    }
  }
  s.onTransitionEnd = function (e) {
    if (e.target !== s.topContainer || e.propertyName === 'visibility') return
    // 有效的显示状态
    if (s.touches.posY === s.params.threshold && s.isRefreshed) {
      s.topRefresh()
    }

    // 显示与隐藏的回调
    // Callback onTransitionEnd
    if (s.params.onTransitionEnd) s.params.onTransitionEnd(s)
    if (s.isHid) {
      // Callback onTopHid
      if (s.params.onTopHid) s.params.onTopHid(s)
    } else {
      // Callback onTopShowed
      if (s.params.onTopShowed) s.params.onTopShowed(s)
    }
  }
  s.isNoData = false
  s.getScrollTop = function (e) {
    var scrollTop = s.overflowContainer === document.body ? document.documentElement.scrollTop : s.overflowContainer.scrollTop
    return scrollTop
  }
  s.onScroll = function (e) {
    var clientHeight = s.overflowContainer.clientHeight // || window.innerHeight
    var scrollHeight = s.overflowContainer.scrollHeight
    var scrollTop = s.overflowContainer === document.body ? document.documentElement.scrollTop : s.overflowContainer.scrollTop
    // console.log(clientHeight + ':' + scrollHeight + ':' + scrollTop)
    if (scrollTop + clientHeight >= scrollHeight - 2) {
      s.bottomRefresh()
    }
  }
  s.onClickError = function (e) {
    if (s.params.onClickError) {
      s.params.onClickError(s)
    } else {
      s.isNoData = false
      // 底部刷新
      s.bottomRefresh()
    }
  }
  // 主函数
  s.init = function () {
    s.attach()
  }

  s.init()
}

;//export default Dragrefresh


//import Dragrefresh from './dragrefresh.js'
// 扩展Dragrefresh下拉刷新控件 (require dragrefresh.js)
var DragPull = function (params) {
  // 参数改写
  var onTopComplete = params.onTopComplete
  var onNoData = params.onNoData
  params.onTopComplete = undefined
  params.onNoData = undefined

  // 必须参数
  var overflowContainer = typeof params.overflowContainer === 'string' ? document.querySelector(params.overflowContainer) : params.overflowContainer
  if (!overflowContainer) {
    console.log('SeedsUI Error : DragPull overflowContainer不存在，请检查页面中是否有此元素')
  }
  var topContainer
  var topIcon
  var topCaption
  if (params.onTopRefresh) {
    topContainer = overflowContainer.querySelector('.SID-Dragrefresh-TopContainer')
    if (!topContainer) {
      topContainer = document.createElement('div')
      topContainer.setAttribute('class', 'SID-Dragrefresh-TopContainer df-pull')
      topContainer.innerHTML = '<div class="df-pull-box">' +
      '<div class="df-pull-icon"></div>' +
      '<div class="df-pull-caption">下拉可以刷新</div>' +
      '</div>'
      overflowContainer.insertBefore(topContainer, overflowContainer.childNodes[0])
    }
    topIcon = topContainer.querySelector('.df-pull-icon')
    topCaption = topContainer.querySelector('.df-pull-caption')
  }
  var bottomContainer
  var nodataContainer
  var errorContainer
  if (params.onBottomRefresh) {
    bottomContainer = overflowContainer.querySelector('.SID-Dragrefresh-BottomContainer')
    if (!bottomContainer) {
      bottomContainer = document.createElement('div')
      bottomContainer.setAttribute('class', 'SID-Dragrefresh-BottomContainer df-pull')
      bottomContainer.setAttribute('style', 'height: 50px')
      bottomContainer.innerHTML = '<div class="df-pull-box">' +
      '<div class="df-pull-icon df-pull-icon-loading"></div>' +
      '<div class="df-pull-caption">正在加载...</div>' +
      '</div>'
      overflowContainer.appendChild(bottomContainer)
    }

    nodataContainer = overflowContainer.querySelector('.SID-Dragrefresh-NoDataContainer')
    if (!errorContainer) {
      nodataContainer = document.createElement('div')
      nodataContainer.setAttribute('class', 'SID-Dragrefresh-NoDataContainer df-pull hide')
      nodataContainer.setAttribute('style', 'height: 50px;')
      nodataContainer.innerHTML = '<div class="df-pull-box">' +
      '<div class="df-pull-caption">没有更多数据了</div>' +
      '</div>'
      overflowContainer.appendChild(nodataContainer)
    }

    errorContainer = overflowContainer.querySelector('.SID-Dragrefresh-ErrorContainer')
    if (!errorContainer) {
      errorContainer = document.createElement('div')
      errorContainer.setAttribute('class', 'SID-Dragrefresh-ErrorContainer df-pull hide')
      errorContainer.setAttribute('style', 'height: 50px;')
      errorContainer.innerHTML = '<div class="df-pull-box">' +
      '<div class="df-pull-caption">加载失败，请稍后重试</div>' +
      '</div>'
      overflowContainer.appendChild(errorContainer)
    }
  }

  /* ----------------------
  params
  ---------------------- */
  var defaults = {
    overflowContainer: overflowContainer,
    topContainer: topContainer,
    bottomContainer: bottomContainer,
    errorContainer: errorContainer,
    threshold: 50,
    onTopComplete: function (e) {
      if (bottomContainer && !e.isNoData) {
        bottomContainer.classList.remove('hide')
        nodataContainer.classList.add('hide')
        errorContainer.classList.add('hide')
      }
      // 回调
      if (onTopComplete) onTopComplete(e)
    },
    onNoData: function (e) {
      console.log('pull:没有更多数据')
      if (bottomContainer) {
        bottomContainer.classList.add('hide')
        nodataContainer.classList.remove('hide')
        errorContainer.classList.add('hide')
      }
      // 回调
      if (onNoData) onNoData(e)
    },
    onClickError: function (e) {
      console.log('点击错误容器')
    },
    // 实体操作
    onPull: function (e) {
      topContainer.style.height = e.touches.currentPosY + 'px'
      if (e.isRefreshed) {
        if (e.touches.currentPosY >= e.params.threshold) {
          topIcon.classList.add('df-pull-icon-down')
          topCaption.innerHTML = '释放立即刷新'
        } else {
          topIcon.classList.remove('df-pull-icon-down')
          topCaption.innerHTML = '下拉可以刷新'
        }
      }
    },
    onShowTop: function (e) {
      topContainer.style.height = e.params.threshold + 'px'
      topIcon.classList.remove('df-pull-icon-down')
      topIcon.classList.add('df-pull-icon-loading')
      topCaption.innerHTML = '正在刷新...'
    },
    onHideTop: function (e) {
      topContainer.style.height = '0'
    },
    onTopHid: function (e) {
      topIcon.classList.remove('df-pull-icon-down')
      topIcon.classList.remove('df-pull-icon-loading')
    }
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = new Dragrefresh(params)
  return s
}

;//export default DragPull


//import Dragrefresh from './dragrefresh.js'
// 扩展Dragrefresh下拉刷新控件 (require dragrefresh.js)
var DragCircle = function (params) {
  // 参数改写
  var onTopComplete = params.onTopComplete
  var onNoData = params.onNoData
  params.onTopComplete = undefined
  params.onNoData = undefined

  // 必须参数
  var overflowContainer = typeof params.overflowContainer === 'string' ? document.querySelector(params.overflowContainer) : params.overflowContainer
  if (!overflowContainer) {
    console.log('SeedsUI Error : DragCircle overflowContainer不存在，请检查页面中是否有此元素')
  }

  var topParent
  var topContainer
  var topIcon
  if (params.onTopRefresh) {
    topParent = overflowContainer.parentNode
    topContainer = topParent.querySelector('.SID-Dragrefresh-TopContainer')
    if (!topContainer) {
      topContainer = document.createElement('div')
      topContainer.setAttribute('class', 'SID-Dragrefresh-TopContainer df-circle')
      topContainer.innerHTML = '<div class="df-circle-icon"></div>'
      topParent.appendChild(topContainer)
    }
    topIcon = topContainer.querySelector('.df-circle-icon')
  }
  var bottomContainer
  var nodataContainer
  var errorContainer
  if (params.onBottomRefresh) {
    bottomContainer = overflowContainer.querySelector('.SID-Dragrefresh-BottomContainer')
    if (!bottomContainer) {
      bottomContainer = document.createElement('div')
      bottomContainer.setAttribute('class', 'SID-Dragrefresh-BottomContainer df-circle-icon df-circle-icon-loading')
      bottomContainer.setAttribute('style', 'height:50px')
      overflowContainer.appendChild(bottomContainer)
    }
    nodataContainer = overflowContainer.querySelector('.SID-Dragrefresh-NoDataContainer')
    if (!errorContainer) {
      nodataContainer = document.createElement('div')
      nodataContainer.setAttribute('class', 'SID-Dragrefresh-NoDataContainer df-pull hide')
      nodataContainer.setAttribute('style', 'height: 50px;')
      nodataContainer.innerHTML = '<div class="df-pull-box">' +
      '<div class="df-pull-caption">没有更多数据了</div>' +
      '</div>'
      overflowContainer.appendChild(nodataContainer)
    }
    errorContainer = overflowContainer.querySelector('.SID-Dragrefresh-ErrorContainer')
    if (!errorContainer) {
      errorContainer = document.createElement('div')
      errorContainer.setAttribute('class', 'SID-Dragrefresh-ErrorContainer df-pull hide')
      errorContainer.setAttribute('style', 'height: 50px;')
      errorContainer.innerHTML = '<div class="df-pull-box">' +
      '<div class="df-pull-caption">加载失败，请稍后重试</div>' +
      '</div>'
      overflowContainer.appendChild(errorContainer)
    }
  }
  
  if (params.onBottomRefresh) {
    
  }
  /* ----------------------
  params
  ---------------------- */
  var defaults = {
    overflowContainer: overflowContainer,
    topContainer: topContainer,
    bottomContainer: bottomContainer,
    errorContainer: errorContainer,
    baseline: params.baseline || -50,
    threshold: params.threshold || 120,
    onTopComplete: function (e) {
      if (bottomContainer && !e.isNoData) {
        bottomContainer.classList.remove('hide')
        nodataContainer.classList.add('hide')
        errorContainer.classList.add('hide')
      }
      // 回调
      if (onTopComplete) onTopComplete(e)
    },
    onNoData: function (e) {
      if (bottomContainer) {
        bottomContainer.classList.add('hide')
        nodataContainer.classList.remove('hide')
        errorContainer.classList.add('hide')
      }
      // 回调
      if (onNoData) onNoData(e)
    },
    onClickError: function (e) {
      console.log('点击错误容器')
    },
    // 实体操作
    onPull: function (e) {
      if (e.isRefreshed) {
        var rotateDeg = e.touches.currentPosY * 2
        topContainer.style.webkitTransform = 'translate3d(0,' + e.touches.currentPosY + 'px,0) rotate(' + rotateDeg + 'deg)'
      }
    },
    onShowTop: function (e) {
      topContainer.style.webkitTransform = 'translate3d(0,120px,0) rotate(0deg)'
    },
    onHideTop: function (e) {
      topContainer.style.webkitTransform = 'translate3d(0,0,0) rotate(0deg)'
    },
    onTopShowed: function (e) {
      topIcon.classList.add('df-circle-icon-loading')
    },
    onTopHid: function (e) {
      topIcon.classList.remove('df-circle-icon-loading')
    }
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = new Dragrefresh(params)
  return s
}

;//export default DragCircle


//Emoji 表情管理
(function(window,document,undefined){
	window.Emoji={
		icons:{
			"[微笑]":"[weixiao]",
			"[难过]":"[nanguo]",
			"[色]":"[se]",
			"[发呆]":"[fadai]",
			"[酷]":"[cool]",
			"[大哭]":"[daku]",
			"[害羞]":"[haixiu]",

			"[闭嘴]":"[bizui]",
			"[睡觉]":"[shuijiao]",
			"[哭]":"[ku]",
			"[流汗]":"[liuhan]",
			"[发怒]":"[fanu]",
			"[眨眼]":"[zhayan]",
			"[龇牙]":"[ziya]",

			"[惊讶]":"[jingya]",
			"[傲慢]":"[aoman]",
			"[得意]":"[deyi]",
			"[可怜]":"[kelian]",
			"[拜拜]":"[baibai]",
			"[开心]":"[kaixin]",
			"[呕吐]":"[outu]",
			"[奋斗]":"[fendou]",
			"[坏笑]":"[huaixiao]",
			"[尴尬]":"[ganga]",
			"[惊吓]":"[jingxia]",
			"[打哈欠]":"[dahaqian]",
			"[白眼]":"[baiyan]",
			"[鄙视]":"[bishi]",

			"[抽烟]":"[chouyan]",
			"[敲头]":"[qiaotou]",
			"[亲亲]":"[qingqing]",
			"[恭喜]":"[gongxi]",
			"[奸笑]":"[jianxiao]",
			"[骂人]":"[maren]",
			"[糗]":"[qiu]",

			"[伤心]":"[shangxin]",
			"[受委屈]":"[shouweiqu]",
			"[偷笑]":"[touxiao]",
			"[挖鼻孔]":"[wabikong]",
			"[委屈]":"[weiqu]",
			"[问]":"[wen]",
			"[擦汗]":"[cahan]",
			"[左哼哼]":"[zuohengheng]",
			"[右哼哼]":"[youhengheng]",
			"[晕]":"[yun]",
			"[大笑]":"[daxiao]",
			"[吓]":"[xia]",
			"[困]":"[kun]",
			"[嘘]":"[xu]",

			"[加油]":"[jiayou]",
			"[强]":"[qiang]",
			"[我爱你]":"[iloveyou]",
			"[差劲]":"[chajin]",
			"[No]":"[no]",
			"[Ok]":"[ok]",
			"[弱]":"[ruo]",

			"[抱拳]":"[baoquan]",
			"[握手]":"[woshou]",
			"[Yeah]":"[yeah]",
			"[来]":"[lai]",
			"[猪头]":"[zhutou]",
			"[心]":"[xin]",
			"[心碎]":"[xinsui]",
			"[抱抱]":"[baobao]",
			"[红唇]":"[hongchun]",
			"[菜刀]":"[caidao]",
			"[太阳]":"[taiyang]",
			"[夜晚]":"[yewan]",
			"[骷髅]":"[kulou]",
			"[花谢了]":"[huaxiele]",

			"[蛋糕]":"[dangao]",
			"[咖啡]":"[kafei]",
			"[足球]":"[zuqiu]",
			"[骷髅]":"[kulou]",
			"[西瓜]":"[xigua]",
			"[炸弹]":"[zhadan]",
			"[篮球]":"[lanqiu]",

			"[礼物]":"[liwu]",
			"[大便]":"[dabian]",
			"[玫瑰]":"[meigui]",
			"[米饭]":"[mifan]",
			"[瓢虫]":"[piaochong]",
			"[啤酒]":"[pijiu]",
			"[闪电]":"[shandian]",
		},
		parse:function(str){
			var emojiExpr=/(\[[\u4E00-\u9FA5]*\])/gm;
			var result,parseStr=str;
			while (emojiExpr.exec(str))  {
				if(this.icons[RegExp.$1]){
					parseStr=parseStr.replace(RegExp.$1,"<span data-emoji=\""+this.icons[RegExp.$1]+"\"></span>");
				}
			}
			return parseStr;
		}
	}
})(window,document,undefined);

//Richinput 带表情输入框 (require edit.js)
(function(window,document,undefined){
	window.Richinput=function(container,params){
		/*=========================
          Params
          ===========================*/
        var defaults={
        	maskClass:"mask",
			emojiBoxClass:"emoji",
			/*callbacks
			onActive:function(Richinput)
			*/
		}
		params=params||{};
		for(var def in defaults){
			if(params[def]===undefined){
				params[def]=defaults[def];
			}
		}
		//Richinput
		var s=this;

		//Params
		s.params = params;

		//Container
		s.container=typeof container=="string"?document.querySelector(container):container;
		if(!s.container){
            console.log("SeedsUI Error：未找到Richinput的DOM对象，请检查传入参数是否正确");
            return;
        }

		//Mask Div
		s.mask=document.querySelector(container+"+."+s.params.maskClass);

		//表情容器
		s.emojiBox=s.container.querySelector("."+s.params.emojiBoxClass);

		//Textarea Form
		s.textarea=s.container.querySelector("textarea");

		/*=========================
          Method
          ===========================*/
		//插入表情
		function insertFace(objFace){
			var emojiName=objFace.getAttribute("alt");
			var editText=s.textarea.value;
			var editTextBefore=editText.substr(0,cursorOffset);
			var editTextAfter=editText.substr(cursorOffset,editText.length);
			var editTextInsert=emojiName;
			cursorOffset=cursorOffset+emojiName.length;
			s.textarea.value=editTextBefore+editTextInsert+editTextAfter;
		}

		/*=========================
          Events Listener
          ===========================*/
		//遮罩层添加点击事件
		s.mask.addEventListener("click",function(e){
			s.container.classList.remove("active");
			//s.container.className=s.container.className.replace(/\s{1,}active/,"");
			s.textarea.blur();
		},false);

		//获得光标位置
		var cursorOffset=0;
		document.onselectionchange=function(e){
			if(Object.prototype.toString.call(e.target.activeElement)=="[object HTMLTextAreaElement]"){
				//获得光标位置
				cursorOffset=s.textarea.selectionStart;
			}
		}
		s.textarea.addEventListener("input",function(e){
			//获得光标位置
			cursorOffset=s.textarea.selectionStart;
		},false);
		//点击input框
		s.textarea.addEventListener("click",function(e){
			s.container.classList.add("active");
			//Callback onActive
			s.params.onActive && s.params.onActive(s);
		},false);

		//点击表情
		s.emojiBox.addEventListener("click",function(e){
			if(e.target.getAttribute("data-emoji")){
				insertFace(e.target);
			}
			s.textarea.focus();
			Edit.setCaretPosition(s.textarea,cursorOffset);
		},false);
	}
})(window,document,undefined);


// Carrousel 滑动控件
var Carrousel = function (container, params) {
  function getPureChildren (children, className) {
    var arr = []
    for (var i = 0; i < children.length; i++) {
      if (children[i].classList.contains(className)) arr.push(children[i])
    }
    return arr
  }
  function getElementByParent (parent, selector) {
    return (typeof selector === 'string' && selector !== '') ? parent.querySelector(selector) : selector
  }

  /* --------------------
  Model
  -------------------- */
  var defaults = {
    pagination: null,
    autoplay: 0, // 设置毫秒数，0为不自动播放
    slidesPerView: 1,
    threshold: '50',
    duration: '300',
    height: 0,
    imglazy: '[data-load-src]', // 图片懒加载

    // loop
    loop: false,
    slideDuplicateClass: 'carrousel-slide-duplicate',

    // dom class
    wrapperClass: 'carrousel-wrapper',
    slideClass: 'carrousel-slide',
    slideActiveClass: 'active',
    bulletClass: 'bullet',
    bulletActiveClass: 'active'

    /*
    callbacks
    onInit:function(Carrousel)
    onSlideChange:function(Carrousel)
    onSlideChangeEnd:function(Carrousel)
    */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  // Slider
  var s = this

  // Params
  s.params = params

  // Container
  s.container = getElementByParent(document, container)
  if (!s.container) {
    console.log('SeedsUI Error：未找到Slider的ID，请检查传入参数是否正确')
    return
  }
  s.container.width = s.container.clientWidth

  // Wrapper
  s.wrapper = s.container.querySelector('.' + s.params.wrapperClass) // [es6]s.wrapper=s.container.querySelector(':scope > .'+s.params.wrapperClass)

  // Pagination
  s.pagination = getElementByParent(s.container, s.params.pagination)
  s.bullets = []
  s.updateBullets = function () {
    if (!s.pagination) return

    s.bullets = []
    s.pagination.innerHTML = ''
    // s.numberOfBullets = s.params.loop ? s.slides.length - s.params.slidesPerView * 2 : s.slides.length
    for (var i = 0; i < s.slides.length; i++) {
      var bullet = document.createElement('span')
      bullet.setAttribute('class', s.params.bulletClass)
      s.pagination.appendChild(bullet)
      s.bullets.push(bullet)
    }
  }
  // 索引
  s.activeIndex = 0
  s.max = 0
  // Slides
  s.updateSlides = function () {
    s.slides = getPureChildren(s.wrapper.children, s.params.slideClass)// [es6]s.slides=s.wrapper.querySelectorAll(':scope > .'+s.params.slideClass)
  }
  // loop dupSlides
  s.dupSlides = []
  s.createLoop = function () {
    if (!s.params.loop) return
    // 删除循环
    s.destroyLoop()
    var beforeDupSlides = []
    var afterDupSlides = []

    if (s.params.slidesPerView > s.slides.length) return
    var i
    var dup
    s.slides.forEach(function (n, i, a) {
      if (i < s.params.slidesPerView) afterDupSlides.push(n.cloneNode(true))
      if (i < s.slides.length && i >= s.slides.length - s.params.slidesPerView) beforeDupSlides.push(n.cloneNode(true))
    })
    for (i = 0; i < afterDupSlides.length; i++) {
      dup = s.wrapper.appendChild(afterDupSlides[i])
      dup.classList.add(s.params.slideDuplicateClass)
      dup.classList.remove(s.params.slideClass)
    }
    for (i = beforeDupSlides.length - 1; i >= 0; i--) {
      dup = s.wrapper.insertBefore(beforeDupSlides[i], s.wrapper.firstElementChild)
      dup.classList.add(s.params.slideDuplicateClass)
      dup.classList.remove(s.params.slideClass)
    }
    s.activeIndex = s.params.slidesPerView
    s.dupSlides = beforeDupSlides.concat(afterDupSlides)
  }
  s.destroyLoop = function () {
    var slideDuplicate = getPureChildren(s.wrapper.children, s.params.slideDuplicateClass)
    //  var slideDuplicate=s.wrapper.querySelectorAll(':scope > .'+s.params.slideDuplicateClass)
    /* eslint-disable */
    for (var i = 0, slideDu; slideDu = slideDuplicate[i++];) {
      s.wrapper.removeChild(slideDu)
    }
    /* eslint-enable */
  }
  // Touch信息
  s.touches = {
    direction: 0,
    vertical: 0,
    horizontal: 0,
    startX: 0,
    startY: 0,
    currentX: 0,
    currentY: 0,
    endX: 0,
    endY: 0,
    diffX: 0,
    diffY: 0,
    posX: 0
  }
  /* --------------------
  Update
  -------------------- */
  s.slideIndex = s.activeIndex // 去除duplicate，滑动页索引
  // 根据index更新选中class
  s.updateClasses = function () {
    s.slideIndex = s.activeIndex
    if (s.params.loop) {
      s.slideIndex = s.activeIndex - s.params.slidesPerView
      if (s.max - s.params.slidesPerView === s.activeIndex) { // 正向滑动
        s.slideIndex = 0
      }
      if (s.slideIndex < 0) { // 反向滑动
        s.slideIndex = s.slides.length + s.slideIndex
      }
    }
    var i
    // Slide
    for (i = 0; i < s.slides.length; i++) {
      s.slides[i].classList.remove(s.params.slideActiveClass)
    }
    s.slides[s.slideIndex].classList.add(s.params.slideActiveClass)

    //  Pagination
    if (!s.pagination) return
    for (i = 0; i < s.bullets.length; i++) {
      s.bullets[i].classList.remove(s.params.bulletActiveClass)
    }
    s.bullets[s.slideIndex].classList.add(s.params.bulletActiveClass)
  }

  // 更新容器尺寸
  s.updateContainerSize = function () {
    s.max = parseInt(s.slides.length, 10) + parseInt(s.dupSlides.length, 10)
    // Slide width
    s.container.width = s.container.clientWidth
    s.width = Math.floor(s.container.width / s.params.slidesPerView)

    // 设置wrapper宽度
    s.wrapper.width = s.width * s.max

    s.wrapper.style.width = s.wrapper.width + 'px'

    // 设置单个slide宽度
    s.slides.forEach(function (n, i, a) {
      n.style.width = s.width + 'px'
    })

    // 设置dupSlide宽度
    s.dupSlides.forEach(function (n, i, a) {
      n.style.width = s.width + 'px'
    })

    // Slide height
    if (s.params.height) {
      s.height = s.params.height
    } else if (s.container.style.height) {
      s.height = s.container.style.height
    } else {
      s.height = (s.container.clientHeight ? s.container.clientHeight : s.wrapper.clientHeight) + 'px'
    }
    // 设置wrapper高度
    s.wrapper.style.height = s.height
    // 设置单个slide高度
    s.slides.forEach(function (n, i, a) {
      n.style.height = s.height
    })
    // 设置dupSlide高度
    s.dupSlides.forEach(function (n, i, a) {
      n.style.height = s.height
    })

    // 更新active index
    s.updateClasses()

    // 如果有循环的话
    if (s.params.loop) {
      s.params.duration = 0
      moveToIndex()
      s.params.duration = defaults.duration
    }
  }

  // 更新
  s.update = function () {
    s.updateSlides()
    s.updateBullets()
    s.createLoop()
    s.updateContainerSize()
  }
  s.update()
  if (s.slides.length <= 0) {
    return
  }

  // 图片懒加载，针对图片类型
  var imgs = []
  var cacheImgs = []
  function imgLoad (e) {
    var target = e.target
    var imgTarget = imgs[target.index]
    if (imgTarget.tagName === 'IMG') {
      imgTarget.src = target.src
    } else {
      imgTarget.style.backgroundImage = 'url(' + target.src + ')'
    }
  }
  s.imgsLazyLoad = function () {
    imgs = this.container.querySelectorAll(s.params.imglazy)
    for (var i = 0; i < imgs.length; i++) {
      var src = imgs[i].getAttribute('data-load-src')
      cacheImgs[i] = new Image()
      cacheImgs[i].index = i
      cacheImgs[i].src = src
      cacheImgs[i].addEventListener('load', imgLoad, false)
    }
  }
  if (s.params.imglazy) s.imgsLazyLoad()
  /* --------------------
  Touch Events
  -------------------- */
  // 绑定事件
  s.events = function (detach) {
    var touchTarget = s.container
    var action = detach ? 'removeEventListener' : 'addEventListener'
    touchTarget[action]('touchstart', s.onTouchStart, false)
    touchTarget[action]('touchmove', s.onTouchMove, false)
    touchTarget[action]('touchend', s.onTouchEnd, false)
    touchTarget[action]('touchcancel', s.onTouchEnd, false)
  }
  // attach、dettach事件
  s.attach = function (event) {
    s.events()
  }
  s.detach = function (event) {
    s.events(true)
  }
  /* --------------------
  Touch Handler
  -------------------- */
  function preventDefault (e) {
    e.preventDefault()
  }
  s.onTouchStart = function (e) {
    s.container.addEventListener('touchmove', preventDefault, false)
    s.touches.startX = e.touches[0].clientX
    s.touches.startY = e.touches[0].clientY
    // 关闭自动播放
    s.stopAutoplay()
  }
  s.onTouchMove = function (e) {
    s.touches.currentX = e.touches[0].clientX
    s.touches.currentY = e.touches[0].clientY
    s.touches.diffX = s.touches.startX - s.touches.currentX
    s.touches.diffY = s.touches.startY - s.touches.currentY
    // runCallBack
    if (s.params.onSlideChange) s.params.onSlideChange(s)

    // 设置滑动方向
    if (s.touches.direction === 0) { // 设置滑动方向(-1上下 | 1左右)
      s.touches.direction = Math.abs(s.touches.diffX) > Math.abs(s.touches.diffY) ? 1 : -1
    }
    if (s.touches.direction === -1) { // 设置垂直方向(-1上 | 1下)
      s.touches.vertical = s.touches.diffY < 0 ? 1 : -1
    }
    if (s.touches.direction === 1) { // 设置左右方向(-1左 | 1右)
      s.touches.horizontal = s.touches.diffX < 0 ? 1 : -1
    }

    // 如果是上下滑动则不工作
    if (s.touches.vertical !== 0) {
      s.container.removeEventListener('touchmove', preventDefault, false)
      return
    }

    // 如果滑动了，则禁止事件向下传播
    e.stopPropagation()

    // x轴距离左边的像素，向左为负数，向右为正数
    var moveX = s.touches.posX - s.touches.diffX
    // 判断是否是边缘
    if (moveX > 0 || -moveX + s.container.width >= s.wrapper.width) {
      return
    }
    s.wrapper.style.webkitTransform = 'translate(' + moveX + 'px,0px)'
  }
  s.onTouchEnd = function (e) {
    // s.container.removeEventListener('touchmove',preventDefault,false)
    // 左右拉动
    if (s.touches.direction === 1) {
      if (s.touches.diffX > s.params.threshold) {
        // 下一页
        s.activeIndex++
      } else if (s.touches.diffX < -s.params.threshold) {
        // 上一页
        s.activeIndex--
      }
      s.slideTo(s.activeIndex)
    }
    // 清空滑动方向
    s.touches.direction = 0
    s.touches.vertical = 0
    s.touches.horizontal = 0
    // 开启自动播放
    s.startAutoplay()
  }
  /* --------------------
  Autoplay
  -------------------- */
  s.startAutoplay = function () {
    if (!s.params.autoplay) return
    s.autoplayer = window.setInterval(function () {
      s.activeIndex++
      if (s.activeIndex >= s.max) {
        s.activeIndex = 0
      }
      s.slideTo(s.activeIndex)
    }, s.params.autoplay)
  }

  s.stopAutoplay = function (internal) {
    if (s.autoplayer) {
      window.clearInterval(s.autoplayer)
    }
  }

  /* --------------------
  Method
  -------------------- */
  function moveToIndex () {
    s.wrapper.style.webkitTransitionDuration = s.params.duration + 'ms'
    s.touches.posX = -s.activeIndex * s.width
    s.wrapper.style.webkitTransform = 'translate(' + s.touches.posX + 'px,0px)'
  }
  s.slideTo = function (slideIndex) {
    if (slideIndex >= 0) {
      s.activeIndex = slideIndex
    }
    // 索引不能小于0
    if (s.activeIndex < 0) {
      s.activeIndex = 0
    }
    // 索引不能大于slide总数
    if (s.activeIndex > s.max - 1) {
      s.activeIndex = s.max - 1
    }
    // 一页多屏，索引不能露出空白区域
    if (s.params.slidesPerView > 1 && s.activeIndex > s.max - params.slidesPerView) {
      s.activeIndex = s.max - s.params.slidesPerView
    }

    // 更新class
    s.updateClasses()
    // 移动至index
    moveToIndex()
    setTimeout(function () {
      s.wrapper.style.webkitTransitionDuration = '0ms'
      // runCallBack
      s.target = s.slides[s.activeIndex]
      if (s.params.onSlideChangeEnd) s.params.onSlideChangeEnd(s)
      // 循环的情况
      if (s.params.loop) {
        if (s.touches.posX === 0) {
          s.activeIndex = s.max - s.params.slidesPerView * 2
          // console.log('最左侧，应跳转到：'+s.activeIndex)
          s.params.duration = 0
          moveToIndex()
          s.params.duration = defaults.duration
          return
        }
        if (-s.touches.posX + s.container.width >= s.wrapper.width) {
          s.activeIndex = s.params.slidesPerView
          // console.log('最右侧，应跳转到：'+s.activeIndex)
          s.params.duration = 0
          moveToIndex()
          s.params.duration = defaults.duration
          return
        }
      }
    }, s.params.duration)
  }

  // 主函数
  s.init = function () {
    // s.update()
    s.attach()
    if (s.params.autoplay) s.startAutoplay()
    // runCallBack
    s.target = s.slides[s.activeIndex]
    if (s.params.onInit) s.params.onInit(s)
  }
  // 执行主函数
  s.init()
  //  Return slider instance
  return s
}

/* Carrousel.prototype = (function () {
  return {
  }
})() */

;//export default Carrousel


//  CalendarUtil 日历工具箱
var CalendarUtil = function (activeDate) {
  /* ---------------------
  Model
  --------------------- */
  var s = this
  s.weekMilliSecond = 7 * 24 * 60 * 60 * 1000
  s.dayMilliSecond = 24 * 60 * 60 * 1000
  // 选中日期
  s.activeDate = activeDate ? new Date(activeDate) : new Date()
  // 周视图
  s.midWeek = []
  s.prevWeek = []
  s.nextWeek = []
  s.tempWeek = []

  s.createWeeks = function () {
    for (var i = 0; i < 7; i++) {
      s.midWeek.push(new Date())
      s.prevWeek.push(new Date())
      s.nextWeek.push(new Date())
      s.tempWeek.push(new Date())
    }
  }
  s.createWeeks()
  // 月视图
  s.midMonth = []
  s.prevMonth = []
  s.nextMonth = []
  s.tempMonth = []
  s.createMonths = function () {
    for (var i = 0; i < 42; i++) {
      s.midMonth.push(new Date())
      s.prevMonth.push(new Date())
      s.nextMonth.push(new Date())
      s.tempMonth.push(new Date())
    }
  }
  s.createMonths()
  /* ---------------------
  Method
  --------------------- */
  // 周视图，根据日期获得一周
  s.updateWeekByDate = function (date, week) {
    var day = date.getDay()
    var startDayMs = date.getTime() - s.dayMilliSecond * day
    if (!week) {
      week = s.tempWeek
    }
    week[0].setTime(startDayMs)
    for (var i = 1; i < 7; i++) {
      week[i].setTime(week[i - 1].getTime() + s.dayMilliSecond)
    }
    return week
  }
  s.getMidWeek = function () { // 获得本周
    return s.updateWeekByDate(s.activeDate, s.midWeek)
  }
  s.getPrevWeek = function () { // 获得上周
    var prevWeekDateMs = s.activeDate.getTime() - s.weekMilliSecond
    return s.updateWeekByDate(new Date(prevWeekDateMs), s.prevWeek)
  }
  s.getNextWeek = function () { // 获得下周
    var nextWeekDateMs = s.activeDate.getTime() + s.weekMilliSecond
    return s.updateWeekByDate(new Date(nextWeekDateMs), s.nextWeek)
  }
  // 月视图
  s.currentMonth = null
  s.activeIndex = null
  s.activeRowIndex = null
  s.updateMonthByDate = function (date, month) {
    // 1日
    var firstDay = new Date()
    firstDay.setTime(date.getTime() - s.dayMilliSecond * (date.getDate() - 1))
    var firstDayIndex = firstDay.getDay()

    // 31日
    var monthDays = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()
    var lastDayIndex = firstDayIndex + monthDays

    // 起始日
    var startDayMs = firstDay.getTime() - s.dayMilliSecond * firstDayIndex

    if (!month) {
      month = s.tempMonth
    }

    // 生成月
    for (var i = 0; i < 42; i++) {
      if (i === 0) month[0].setTime(startDayMs)
      else month[i].setTime(month[i - 1].getTime() + s.dayMilliSecond)
      // 设置选中项
      if (s.currentMonth === 'midMonth' && month[i].setHours(0, 0, 0, 0) === date.setHours(0, 0, 0, 0)) {
        s.activeIndex = i + 42
        s.activeRowIndex = Math.floor(i / 7)
      }

      // 设置当月标识isCurrent
      month[i].isCurrent = false
      if (i >= firstDayIndex && i < lastDayIndex) month[i].isCurrent = true
    }
    return month
  }
  s.getPrevMonth = function () { // 获得上月
    s.currentMonth = 'prevMonth'

    var prevDate = new Date()
    prevDate.setMonth(s.activeDate.getMonth() - 1)
    return s.updateMonthByDate(prevDate, s.prevMonth)
  }
  s.getMidMonth = function () { // 获得本月
    s.currentMonth = 'midMonth'

    return s.updateMonthByDate(s.activeDate, s.midMonth)
  }
  s.getNextMonth = function () { // 获得下月
    s.currentMonth = 'nextMonth'

    var nextDate = new Date()
    nextDate.setMonth(s.activeDate.getMonth() + 1)
    return s.updateMonthByDate(nextDate, s.nextMonth)
  }
  s.getCalendarData = function () {
    return s.getPrevMonth().concat(s.getMidMonth()).concat(s.getNextMonth())
  }
  // 设置选中日期
  s.setActiveDate = function (activeDate) {
    s.activeDate.setTime(activeDate.getTime())
  }
  s.activePrevWeek = function () {
    var ms = s.activeDate.getTime() - s.weekMilliSecond
    s.activeDate = new Date(ms)
  }
  s.activeNextWeek = function () {
    var ms = s.activeDate.getTime() + s.weekMilliSecond
    s.activeDate = new Date(ms)
  }
  s.activePrevMonth = function () {
    var tempDate = new Date(s.activeDate)
    tempDate.setMonth(s.activeDate.getMonth() - 1)
    if (s.activeDate.getMonth() === tempDate.getMonth()) {
      tempDate = new Date(tempDate.getFullYear(), tempDate.getMonth(), 0)
    }
    s.activeDate = tempDate
  }
  s.activeNextMonth = function () {
    var tempDate = new Date(s.activeDate)
    tempDate.setMonth(s.activeDate.getMonth() + 1)
    if (s.activeDate.getMonth() === tempDate.getMonth() - 2) {
      tempDate = new Date(tempDate.getFullYear(), tempDate.getMonth(), 0)
    }
    s.activeDate = tempDate
  }
  /* 其它工具 */
  // 激活天为准，推前天数
  s.getBeforeDays = function (beforenum) {
    var days = []
    for (var i = 1; i <= beforenum; i++) {
      days.push(new Date(s.activeDate.getTime() - i * s.dayMilliSecond))
    }
    return days
  }
  // 激活月为准，推前月
  s.getBeforeMonths = function (beforenum) {
    var months = []
    var tempDate = new Date(s.activeDate.getFullYear(), s.activeDate.getMonth())
    for (var i = 1; i <= beforenum; i++) {
      var tempDate2 = new Date()
      tempDate2.setMonth(tempDate.getMonth() - i)
      months.push(tempDate2)
    }
    return months
  }
  // 激活周为准，推前周
  s.getBeforeWeeks = function (beforenum) {
    var weeks = new Array(beforenum)
    for (var i = 0; i < beforenum; i++) {
      weeks[i] = []
      for (var j = 0; j < 7; j++) {
        weeks[i].push(new Date())
      }
      var prevWeekDateMs = s.activeDate.getTime() - s.weekMilliSecond * (i + 1)
      s.updateWeekByDate(new Date(prevWeekDateMs), weeks[i])
    }
    return weeks
  }
};

//export default CalendarUtil


// Calendar 日历 (require calendarutil.js | dateutil.js)
//import './../utils/dateutil.js'
//import CalendarUtil from './calendarutil.js'
var Calendar = function (container, params) {
  /* --------------------
  Model
  -------------------- */
  var defaults = {
    viewType: 'month', // 值为month|week
    titleFormat: 'yyyy年MM月dd日,第W周,周E', // 年月日
    defaultActiveDate: new Date(), // 默认选中的日期
    disableBeforeDate: null, // 禁用此前
    disableAfterDate: null, // 禁用此后
    activeDate: null, // 选中日期
    threshold: '50', // 滑动间距触发
    duration: '300', // 动画时长
    dayHeight: '40', // 一日高度
    isYTouch: true, // 是否允许上下滑动
    schedule: [], // 日程
    // DOM
    calendarClass: 'calendar',
    disableClass: 'calendar-disable',

    headerClass: 'calendar-header',
    titleClass: 'calendar-title',
    prevClass: 'calendar-prev',
    nextClass: 'calendar-next',
    prevHTML: '&lt',
    nextHTML: '&gt',

    weeksClass: 'calendar-weeks',
    weekClass: 'calendar-week',

    wrapperClass: 'calendar-wrapper',
    wrapperXClass: 'calendar-wrapper-x',
    wrapperYClass: 'calendar-wrapper-y',
    monthClass: 'calendar-month',
    monthRowClass: 'calendar-monthrow',
    dayClass: 'calendar-day',
    dayNumClass: 'calendar-daynum',

    scheduleClass: 'calendar-schedule',
    // 状态
    currentClass: 'calendar-current',
    notcurrentClass: 'calendar-notcurrent',
    todayClass: 'calendar-today',
    activeClass: 'calendar-active'

    /*
    Callbacks:
    onClick:function(Calendar)
    onChange:function(Calendar)
    onHeightChange:function(Calendar)// 高度变化
    onTransitionEnd:function(Calendar)// 动画结束
    onHorizontalTransitionEnd:function(Calendar)// 横滑动画结束
    onVerticalTransitionEnd:function(Calendar)// 竖滑动画结束
    */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  s.params = params
  s.params.wrapperHeight = s.params.dayHeight * 6
  // 禁止修改默认值
  Object.defineProperty(s.params, 'defaultActiveDate', {
    enumerable: true,
    configurable: true,
    writable: false
  })

  // 今天和选中天
  s.today = new Date()
  s.activeDate = null
  // 日历工具箱
  if (s.params.activeDate) { // 如果有选中天，则初始化为选中天
    s.activeDate = s.params.activeDate
    s.calendarUtil = new CalendarUtil(s.activeDate)
  } else { // 否则，则初始化为默认天
    s.calendarUtil = new CalendarUtil(s.params.defaultActiveDate)
  }
  // Container
  s.container = typeof container === 'string' ? document.querySelector(container) : container
  if (!s.container) {
    console.log('SeedsUI Error：未找到Calendar的DOM对象，请检查传入参数是否正确')
    return
  }
  s.container.width = s.container.clientWidth
  if (!s.container.width) s.container.width = window.innerWidth || document.documentElement.clientWidth
  // Header
  s.header
  s.title
  s.prev
  s.next
  // Week
  s.weekContainer
  s.weeks = []
  // Wrapper
  s.wrapper
  s.wrapperX
  s.wrapperY
  s.months = new Array(3)
  s.days = []
  // Touch信息
  s.touches = {
    startX: 0,
    startY: 0,
    currentX: 0,
    currentY: 0,
    endX: 0,
    endY: 0,
    diffX: 0,
    diffY: 0,
    posX: 0,
    posY: 0,
    maxPosY: s.params.wrapperHeight - s.params.dayHeight,
    h: s.params.wrapperHeight,
    direction: 0,
    horizontal: 0,
    vertical: 0
  }
  // Header
  s.createHeader = function () {
    var header = document.createElement('div')
    header.setAttribute('class', s.params.headerClass)
    return header
  }
  s.createPrev = function () {
    var prev = document.createElement('div')
    prev.setAttribute('class', s.params.prevClass)
    prev.innerHTML = s.params.prevHTML
    return prev
  }
  s.createNext = function () {
    var next = document.createElement('div')
    next.setAttribute('class', s.params.nextClass)
    next.innerHTML = s.params.nextHTML
    return next
  }
  s.createTitle = function () {
    var title = document.createElement('div')
    title.setAttribute('class', s.params.titleClass)
    return title
  }
  // WeekContainer
  s.createWeekContainer = function () {
    var weekContainer = document.createElement('div')
    weekContainer.setAttribute('class', s.params.weeksClass)

    var weekNames = ['日', '一', '二', '三', '四', '五', '六']
    /* eslint-disable */
    for (var i = 0, weekName; weekName = weekNames[i++];) {
      var week = document.createElement('div')
      week.setAttribute('class', s.params.weekClass)
      week.innerHTML = weekName
      weekContainer.appendChild(week)
      s.weeks.push(week)
    }
    /* eslint-enable */

    return weekContainer
  }
  // Wrapper
  s.createWrapper = function () {
    var wrapper = document.createElement('div')
    wrapper.setAttribute('class', s.params.wrapperClass)
    return wrapper
  }
  s.createWrapperY = function () {
    var wrapperY = document.createElement('div')
    wrapperY.setAttribute('class', s.params.wrapperYClass)
    return wrapperY
  }
  s.createWrapperX = function () {
    var wrapperX = document.createElement('div')
    wrapperX.setAttribute('class', s.params.wrapperXClass)
    wrapperX.width = s.container.width * 3
    wrapperX.style.width = s.container.width * 3 + 'px'
    /*
    wrapperX.width=s.container.width*3
    wrapperX.style.width=wrapperX.width+'px'
    */
    for (var i = 0; i < 3; i++) {
      s.months[i] = document.createElement('div')
      s.months[i].setAttribute('class', s.params.monthClass)
      s.months[i].style.width = s.container.width + 'px'
      wrapperX.appendChild(s.months[i])
    }
    return wrapperX
  }
  s.createDays = function () {
    for (var i = 0; i < 3; i++) { // 注入到月
      for (var j = 0; j < 6; j++) { // 注入行
        var monthRow = document.createElement('div')
        monthRow.setAttribute('class', s.params.monthRowClass)

        for (var k = 0; k < 7; k++) { // 注入到星期
          var day = document.createElement('div')
          day.setAttribute('class', s.params.dayClass)
          day.style.height = s.params.dayHeight + 'px'
          day.style.lineHeight = s.params.dayHeight + 'px'
          var dayNum = document.createElement('div')
          dayNum.setAttribute('class', s.params.dayNumClass)

          day.appendChild(dayNum)
          monthRow.appendChild(day)

          s.days.push(dayNum)
        }
        s.months[i].appendChild(monthRow)
      }
    }
  }
  // 创建DOM
  s.create = function () {
    // 创建头部
    if (s.container.querySelector('.' + s.params.headerClass)) {
      s.header = s.container.querySelector('.' + s.params.headerClass)
      s.prev = s.container.querySelector('.' + s.params.prevClass)
      s.next = s.container.querySelector('.' + s.params.nextClass)
      s.title = s.container.querySelector('.' + s.params.titleClass)
    } else {
      s.header = s.createHeader()
      s.prev = s.createPrev()
      s.next = s.createNext()
      s.title = s.createTitle()

      s.header.appendChild(s.prev)
      s.header.appendChild(s.title)
      s.header.appendChild(s.next)
      s.container.appendChild(s.header)
    }
    // 创建周
    if (s.container.querySelector('.' + s.params.weeksClass)) {
      s.weekContainer = s.container.querySelector('.' + s.params.weeksClass)
    } else {
      s.weekContainer = s.createWeekContainer()

      s.container.appendChild(s.weekContainer)
    }
    // 创建主体
    s.wrapper = s.createWrapper()
    s.wrapperX = s.createWrapperX()
    s.wrapperY = s.createWrapperY()
    s.wrapperY.appendChild(s.wrapperX)
    s.wrapper.appendChild(s.wrapperY)
    s.container.appendChild(s.wrapper)
    s.createDays()
  }
  s.create()
  /* --------------------
  Method
  -------------------- */
  // 容器操作类
  s.addDuration = function () {
    s.wrapper.style.webkitTransitionDuration = s.params.duration + 'ms'
    s.wrapperY.style.webkitTransitionDuration = s.params.duration + 'ms'
    s.wrapperX.style.webkitTransitionDuration = s.params.duration + 'ms'
  }
  s.removeDuration = function () {
    s.wrapper.style.webkitTransitionDuration = '0ms'
    s.wrapperY.style.webkitTransitionDuration = '0ms'
    s.wrapperX.style.webkitTransitionDuration = '0ms'
  }
  s.updateTranslateX = function () {
    s.removeDuration()
    s.touches.posX = -s.container.width
    s.wrapperX.style.webkitTransform = 'translateX(' + s.touches.posX + 'px)'
  }
  s.updateContainerHeight = function () { // 更新高度
    if (s.params.viewType === 'month') { // 展开
      s.touches.h = s.params.wrapperHeight
    } else if (s.params.viewType === 'week') { // 收缩
      s.touches.h = s.params.dayHeight
    }
    s.wrapper.style.height = s.touches.h + 'px'
    s.wrapperY.style.webkitTransform = 'translateY(-' + s.touches.posY + 'px)'
  }
  s.updateContainerWidth = function () { // 更新宽度
    s.container.width = s.container.clientWidth
    s.wrapperX.width = s.container.width * 3 + 'px'
    /*
    s.wrapperX.width=s.container.width*3
    s.wrapperX.style.width=s.wrapperX.width.width+'px'
    */
    for (var i = 0; i < 3; i++) {
      s.months[i].style.width = s.container.width + 'px'
    }
  }
  s.updateContainerSize = function () {
    s.updateContainerHeight()
    s.updateContainerWidth()
    s.updateTranslateX()
  }
  s.updateClasses = function () {
    // 更新容器尺寸
    s.updateContainerHeight()
    // 位置还原
    s.updateTranslateX()
  }
  s.updateClasses()
  // 左右滑动
  s.slideXTo = function (index) {
    s.touches.posX = -s.container.width * index
    s.addDuration()
    s.wrapperX.style.webkitTransform = 'translateX(' + s.touches.posX + 'px)'
    // 刷新数据
    if (index === 0) { // 上一页
      if (s.params.viewType === 'month') {
        s.calendarUtil.activePrevMonth()
      } else if (s.params.viewType === 'week') {
        s.wrapperY.style.webkitTransitionDuration = '0ms'
        s.calendarUtil.activePrevWeek()
      }
    } else if (index === 2) { // 下一页
      if (s.params.viewType === 'month') {
        s.calendarUtil.activeNextMonth()
      } else if (s.params.viewType === 'week') {
        s.wrapperY.style.webkitTransitionDuration = '0ms'
        s.calendarUtil.activeNextWeek()
      }
    }
    /*
    // 滑动到禁用
    if((s.params.disableBeforeDate && s.calendarUtil.activeDate < s.params.disableBeforeDate)||(s.params.disableAfterDate && s.calendarUtil.activeDate > s.params.disableAfterDate)){
      s.calendarUtil.activeDate = s.activeDate
      return
    }
    */
    s.draw()
  }
  // 上下滑动
  s.dragY = function (heightY) {
    s.wrapper.style.height = heightY + 'px'
    var translateY = s.params.wrapperHeight - heightY
    if (translateY <= s.touches.maxPosY) {
      s.wrapperY.style.webkitTransform = 'translateY(-' + translateY + 'px)'
    }
  }
  s.slideYTo = function (index) {
    s.addDuration()
    if (index === 1) { // 展开
      s.params.viewType = 'month'
      s.touches.posY = 0
      s.draw(1)
    } else if (index === -1) { // 收缩
      s.params.viewType = 'week'
      s.touches.posY = s.touches.maxPosY
      s.draw(-1)
    } else {
      s.dragY(s.touches.h)
    }
  }
  // 绘制日历
  var today = new Date()
  s.isToday = function (date) {
    if (date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear()) return true
    return false
  }
  s.data = []
  s.updateData = function () {
    s.data = s.calendarUtil.getCalendarData()
    s.data.activeIndex = s.calendarUtil.activeIndex
    var activeRowIndex = s.calendarUtil.activeRowIndex
    if (s.params.viewType === 'week') {
      s.touches.maxPosY = activeRowIndex * s.params.dayHeight
      s.touches.posY = s.touches.maxPosY
      var prevWeek = s.calendarUtil.getPrevWeek()
      var nextWeek = s.calendarUtil.getNextWeek()
      var start1 = activeRowIndex * 7
      var start2 = start1 + 84
      // 上周
      for (var i = 0, datIndex1 = start1; i < 7; i++) {
        s.data[datIndex1] = prevWeek[i]
        datIndex1++
      }
      // 下周
      for (var j = 0, datIndex2 = start2; j < 7; j++) {
        s.data[datIndex2] = nextWeek[j]
        datIndex2++
      }
    }
  }
  s.drawHeader = function (argActiveDate) {
    var activeDate = argActiveDate || s.calendarUtil.activeDate
    s.title.innerHTML = activeDate.format(s.params.titleFormat)
  }
  s.draw = function (vertical) { // vertical:上下拖动(-1上 | 1下 | 其它为非上下拖动)
    // 更新选中日期
    s.updateData()
    if (s.activeDate) s.activeDate = s.calendarUtil.activeDate
    // 注入身体
    var activeIndex = s.data.activeIndex
    // var activeRowIndex = s.data.activeRowIndex
    for (var i = 0; i < s.days.length; i++) {
      s.days[i].innerHTML = s.data[i].getDate()
      // index
      s.days[i].index = i
      // class
      s.days[i].className = s.params.dayNumClass
      // class-currentClass
      if (s.data[i].isCurrent) s.days[i].classList.add(s.params.currentClass)
      else s.days[i].classList.add(s.params.notcurrentClass)
      // class-todayClass
      if (s.isToday(s.data[i])) s.days[i].classList.add(s.params.todayClass)
      // class-activeClass
      if (i === activeIndex && s.activeDate) s.days[i].classList.add(s.params.activeClass)
      // 禁用日期
      if (s.params.disableBeforeDate && s.data[i].setHours(0, 0, 0, 0) < s.params.disableBeforeDate.setHours(0, 0, 0, 0)) {
        s.days[i].classList.add(s.params.disableClass)
      }
      if (s.params.disableAfterDate && s.data[i].setHours(0, 0, 0, 0) > s.params.disableAfterDate.setHours(0, 0, 0, 0)) {
        s.days[i].classList.add(s.params.disableClass)
      }
      // 增加日程
      s.params.schedule.forEach(function (schDate, schIndex) {
        if (s.data[i].setHours(0, 0, 0, 0) === schDate.setHours(0, 0, 0, 0)) {
          s.days[i].classList.add(s.params.scheduleClass)
        }
      })
    }
    s.updateContainerHeight()
    // 滑动到禁用
    if ((s.params.disableBeforeDate && s.calendarUtil.activeDate < s.params.disableBeforeDate) || (s.params.disableAfterDate && s.calendarUtil.activeDate > s.params.disableAfterDate)) {
      console.log('SeedsUI Warn：滑动到禁用日期')
      return
    }
    // 注入头部
    s.drawHeader(s.activeDate)
    if (vertical) {
      s.vertical = vertical
      // Callback onHeightChange
      if (s.params.onHeightChange) s.params.onHeightChange(s)
    } else {
      // Callback onChange
      if (s.params.onChange) s.params.onChange(s)
    }
  }
  s.draw()
  s.activeDay = function (target) {
    for (var i = 0; i < s.days.length; i++) {
      s.days[i].classList.remove(s.params.activeClass)
    }
    // 选中日期
    s.activeDate = s.data[target.index]
    s.calendarUtil.setActiveDate(s.activeDate)
    // 重新绘制
    s.draw()
  }
  s.showMonth = function () {
    s.slideYTo(1)
  }
  s.showWeek = function () {
    s.slideYTo(-1)
  }
  s.showToday = function () {
    s.calendarUtil.setActiveDate(s.today)
    s.draw()
  }
  s.reset = function () {
    // 选中日期
    s.activeDate = s.params.activeDate
    s.calendarUtil.setActiveDate(s.params.defaultActiveDate)
    // 重新绘制
    s.draw()
  }
  /* --------------------
  Control
  -------------------- */
  s.events = function (detach) {
    var action = detach ? 'removeEventListener' : 'addEventListener'
    s.wrapper[action]('touchstart', s.onTouchStart, false)
    s.wrapper[action]('touchmove', s.onTouchMove, false)
    s.wrapper[action]('touchend', s.onTouchEnd, false)
    s.wrapper[action]('touchcancel', s.onTouchEnd, false)
    s.wrapper[action]('webkitTransitionEnd', s.onTransitionEnd, false)
    s.wrapper[action]('click', s.onClick, false)

    s.prev[action]('click', s.onClickPrev, false)
    s.next[action]('click', s.onClickNext, false)
  }
  // attach、dettach事件
  s.attach = function (event) {
    s.events()
  }
  s.detach = function (event) {
    s.events(true)
  }
  s.preventDefault = function (e) {
    e.preventDefault()
  }
  // Event Handler
  s.onClickPrev = function (e) {
    s.slideXTo(0)
  }
  s.onClickNext = function (e) {
    s.slideXTo(2)
  }
  s.onClick = function (e) {
    s.target = e.target
    // 点击禁用日期
    if (e.target.classList.contains(s.params.disableClass)) return
    // 点击日期
    s.removeDuration()
    if (e.target.classList.contains(s.params.dayNumClass)) {
      s.activeDay(e.target)
    }
    // Callback onClick
    if (s.params.onClick) s.params.onClick(s)
  }
  s.onTouchStart = function (e) {
    s.container.addEventListener('touchmove', s.preventDefault, false)
    s.touches.startX = e.touches[0].clientX
    s.touches.startY = e.touches[0].clientY
  }
  s.onTouchMove = function (e) {
    s.touches.currentX = e.touches[0].clientX
    s.touches.currentY = e.touches[0].clientY
    s.touches.diffX = s.touches.startX - s.touches.currentX
    s.touches.diffY = s.touches.startY - s.touches.currentY

    // 设置滑动方向(-1上下 | 1左右)
    if (s.touches.direction === 0) {
      s.touches.direction = Math.abs(s.touches.diffX) > Math.abs(s.touches.diffY) ? 1 : -1
    }

    if (s.touches.direction === 1) { // 左右滑动
      var moveX = s.touches.posX - s.touches.diffX
      if (moveX < 0 && Math.abs(moveX) < s.container.width * 2) { // 判断是否是边缘
        s.touches.horizontal = moveX < s.touches.posX ? 1 : -1// 设置方向(左右)
        s.wrapperX.style.webkitTransform = 'translateX(' + moveX + 'px)'
      }
    } else if (s.touches.direction === -1) { // 上下滑动
      if (s.params.isYTouch === true) { // 允许Y滑动的情况下
        var heightY = s.touches.h - s.touches.diffY
        if (heightY > s.params.dayHeight && heightY < s.params.wrapperHeight) { // 判断是否是边缘
          s.touches.vertical = heightY > s.touches.h ? 1 : -1// 设置方向(上下)
          s.dragY(heightY)
        }
      } else {
        s.container.removeEventListener('touchmove', s.preventDefault, false)
      }
    }
  }
  s.onTouchEnd = function (e) {
    if (s.touches.direction === 1) { // 左右滑动
      if (Math.abs(s.touches.diffX) < s.params.threshold) s.touches.horizontal = 0
      if (s.touches.horizontal === 1) s.slideXTo(2) // 下一页
      else if (s.touches.horizontal === -1) s.slideXTo(0)// 上一页
      else s.slideXTo(1)// 还原当前页
    } else if (s.touches.direction === -1) { // 上下滑动
      if (s.params.isYTouch === true) { // 允许Y滑动的情况下
        if (Math.abs(s.touches.diffY) < s.params.threshold) s.touches.vertical = 0
        if (s.touches.vertical === 1) s.slideYTo(1)// 展开
        else if (s.touches.vertical === -1) s.slideYTo(-1)// 收缩
        else s.slideYTo(0)// 还原当前页
      }
    }

    // 清空滑动方向
    s.touches.direction = 0
    s.touches.horizontal = 0
    s.touches.vertical = 0
  }
  s.onTransitionEnd = function (e) {
    s.target = e.target
    // 横向滑动时需要还原位置
    if (s.target.classList.contains(s.params.wrapperXClass)) {
      // 还原位置
      s.updateTranslateX()
      // Callback onHorizontalTransitionEnd
      if (s.params.onHorizontalTransitionEnd) s.params.onHorizontalTransitionEnd(s)
    }
    // 竖向滑动
    if (s.target.classList.contains(s.params.wrapperYClass)) {
      // Callback onVerticalTransitionEnd
      if (s.params.onVerticalTransitionEnd) s.params.onVerticalTransitionEnd(s)
    }
    // Callback onTransitionEnd
    if (s.params.onTransitionEnd) s.params.onTransitionEnd(s)
  }
  /* --------------------
  Init
  -------------------- */
  s.init = function () {
    s.attach()
  }
  s.init()
}

;//export default Calendar


// Alert 提示框
var Alert = function (params) {
  /* --------------------
  Model
  -------------------- */
  var defaults = {
    mask: null,
    overflowContainer: document.body,
    overflowContainerActiveClass: 'overflow-hidden',
    parent: document.body,

    maskClass: 'mask',
    maskActiveClass: 'active',
    maskFeatureClass: 'alert-mask',

    alertClass: 'alert',
    alertActiveClass: 'active',
    contentClass: 'alert-content',
    handlerClass: 'alert-handler',
    buttonSubmitClass: 'alert-submit',
    buttonCancelClass: 'alert-cancel',

    title: '',
    html: '',
    buttonSubmitHTML: '确定',
    buttonCancelHTML: '取消',

    isClickMaskHide: false
    /*
    Callbacks:
    onClick:function(Alert)
    onClickSubmit:function(Alert)
    onClickCancel:function(Alert)
    onClickMask:function(Alert)
    */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  s.params = params
  // Parent | OverflowContainer
  s.parent = typeof s.params.parent === 'string' ? document.querySelector(s.params.parent) : s.params.parent
  s.overflowContainer = typeof s.params.overflowContainer === 'string' ? document.querySelector(s.params.overflowContainer) : s.params.overflowContainer
  // Alert | Mask
  s.alert = null
  s.mask = null
  s.buttonSubmit = null
  s.buttonCancel = null
  // Mask
  s.createMask = function () {
    var mask = document.createElement('div')
    mask.setAttribute('class', s.params.maskClass + ' ' + s.params.maskFeatureClass)
    return mask
  }
  // Alert
  s.createButtonCancel = function () {
    var buttonCancel = document.createElement('a')
    buttonCancel.innerHTML = s.params.buttonCancelHTML
    return buttonCancel
  }
  s.createAlert = function () {
    var alert = document.createElement('div')
    alert.setAttribute('class', s.params.alertClass)

    alert.content = document.createElement('div')
    alert.content.setAttribute('class', s.params.contentClass)
    alert.content.innerHTML = s.params.html

    alert.handler = document.createElement('div')
    alert.handler.setAttribute('class', s.params.handlerClass)

    // 如果有取消按钮
    if (s.params.onClickCancel) {
      alert.buttonCancel = s.createButtonCancel()
      alert.handler.appendChild(alert.buttonCancel)
    }
    alert.buttonOk = document.createElement('a')
    alert.buttonOk.innerHTML = s.params.buttonSubmitHTML

    alert.handler.appendChild(alert.buttonOk)

    if (s.params.title && s.params.title !== '') {
      alert.caption = document.createElement('h1')
      alert.caption.innerHTML = s.params.title
      alert.appendChild(alert.caption)
    }

    alert.appendChild(alert.content)
    alert.appendChild(alert.handler)

    return alert
  }
  s.create = function () {
    s.mask = s.createMask()
    s.alert = s.createAlert()
    s.mask.appendChild(s.alert)
    s.parent.appendChild(s.mask)
  }
  s.update = function () {
    if (s.params.mask) s.mask = typeof s.params.mask === 'string' ? document.querySelector(s.params.mask) : s.params.mask
    if (s.mask) {
      s.alert = s.mask.querySelector('.' + s.params.alertClass)
      s.buttonSubmit = s.alert.querySelector('.' + s.params.buttonSubmitClass)
      s.buttonCancel = s.alert.querySelector('.' + s.params.buttonCancelClass)
      console.log('找到了')
      console.log(s.mask)
      console.log(s.alert)
      console.log(s.buttonSubmit)
      console.log(s.buttonCancel)
      return
    }
    s.create()
  }
  s.update()
  /* --------------------
  Method
  -------------------- */
  s.showMask = function () {
    s.mask.classList.add(s.params.maskActiveClass)
  }
  s.hideMask = function () {
    s.mask.classList.remove(s.params.maskActiveClass)
  }
  s.destroyMask = function () {
    s.parent.removeChild(s.mask)
  }
  s.showAlert = function () {
    s.alert.classList.add(s.params.alertActiveClass)
  }
  s.hideAlert = function () {
    s.alert.classList.remove(s.params.alertActiveClass)
  }
  s.destroyAlert = function () {
    s.parent.removeChild(s.alert)
  }
  s.isHid = true
  s.hide = function () {
    s.isHid = true
    // 隐藏遮罩
    s.hideMask()
    // 隐藏弹出框
    s.hideAlert()
    // 显示滚动条
    if (s.overflowContainer) s.overflowContainer.classList.remove(s.params.overflowContainerActiveClass)
  }
  s.show = function () {
    s.isHid = false
    // 显示遮罩
    s.showMask()
    // 显示弹出框
    s.showAlert()
    // 禁用滚动条
    if (s.overflowContainer) s.overflowContainer.classList.add(s.params.overflowContainerActiveClass)
  }
  s.destroy = function () {
    s.destroyMask()
    // s.destroyAlert()
  }
  // 动态设置
  s.setHTML = function (html) {
    s.alert.content.innerHTML = html
  }
  s.setOnClick = function (fn) {
    s.params.onClick = fn
  }
  s.setOnClickSubmit = function (fn) {
    s.params.onClickSubmit = fn
  }
  s.setOnClickCancel = function (fn) {
    // 如果没有取消按钮，创建一个
    if (!s.params.onClickCancel) {
      s.buttonCancel = s.createButtonCancel()
      s.alert.handler.insertBefore(s.buttonCancel, s.buttonSubmit)
    }
    s.params.onClickCancel = fn
  }
  /* --------------------
  Control
  -------------------- */
  s.events = function (detach) {
    var touchTarget = s.alert
    var action = detach ? 'removeEventListener' : 'addEventListener'
    touchTarget[action]('click', s.onClick, false)
    touchTarget[action]('webkitTransitionEnd', s.onTransitionEnd, false)
    // 遮罩
    s.mask[action]('click', s.onClickMask, false)
  }
  // attach、dettach事件
  s.attach = function (event) {
    s.events()
  }
  s.detach = function (event) {
    s.events(true)
  }
  s.onClick = function (e) {
    s.target = e.target

    if (s.params.onClick) s.params.onClick(s)

    if (e.target.classList.contains(s.params.buttonSubmitClass)) {
      if (s.params.onClickSubmit) s.params.onClickSubmit(s)
      else s.hide()
    } else if (e.target.classList.contains(s.params.buttonCancelClass)) {
      if (s.params.onClickCancel) s.params.onClickCancel(s)
      else s.hide()
    }
  }
  s.setOnClick = function (fn) {
    s.params.onClick = fn
  }
  s.onClickMask = function (e) {
    if (e.target === s.mask) {
      s.target = e.target
      if (s.params.onClickMask) s.params.onClickMask(s)
      if (s.params.isClickMaskHide) s.hide()
    }
  }
  s.setOnClickMask = function (fn) {
    s.params.onClickMask = fn
  }
  s.onTransitionEnd = function (e) {
    if (e.propertyName === 'visibility') return
  }
  /* --------------------
  Init
  -------------------- */
  s.init = function () {
    s.attach()
  }
  s.init()
}

;//export default Alert


// Actionsheet
var Actionsheet = function (params) {
  /* ------------------
  Model
  ------------------ */
  var defaults = {
    overflowContainer: document.body,
    overflowContainerActiveClass: 'overflow-hidden',
    parent: document.body,

    mask: null,
    maskClass: 'mask',
    maskActiveClass: 'active',
    maskFeatureClass: 'actionsheet-mask',

    actionsheetClass: 'actionsheet',
    groupClass: 'actionsheet-group',
    optionClass: 'actionsheet-option',
    buttonCancelClass: 'actionsheet-cancel',
    buttonCancelHTML: '取消',
    isClickMaskHide: true,
    data: []
    /*
    Callbacks:
    option.handler:function(Actionsheet)
    onClickCancel:function(Actionsheet)
    onClickMask:function(Actionsheet)
    */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  s.params = params
  // Parent | OverflowContainer
  s.parent = typeof s.params.parent === 'string' ? document.querySelector(s.params.parent) : s.params.parent
  s.overflowContainer = typeof s.params.overflowContainer === 'string' ? document.querySelector(s.params.overflowContainer) : s.params.overflowContainer
  // Actionsheet | Mask
  s.actionsheet
  s.mask
  s.group
  s.options = []
  // Mask
  s.createMask = function () {
    var mask = document.createElement('div')
    mask.setAttribute('class', s.params.maskClass + ' ' + s.params.maskFeatureClass)
    return mask
  }
  // Actionsheet
  s.createActionsheet = function () {
    var actionsheet = document.createElement('div')
    actionsheet.setAttribute('class', s.params.actionsheetClass)
    return actionsheet
  }
  // Group
  s.createGroup = function () {
    var group = document.createElement('div')
    group.setAttribute('class', s.params.groupClass)
    return group
  }
  // Options
  s.createOptions = function (appendToEl) {
    var options = []
    /* eslint-disable */
    for (var i = 0, opt; opt = s.params.data[i++];) {
      var option = document.createElement('a')
      option.setAttribute('class', s.params.optionClass)
      option.innerHTML = opt.text
      option.handler = opt.handler
      options.push(option)
      appendToEl.appendChild(option)
    }
    /* eslint-enable */
    return options
  }
  // buttonCancel
  s.createButtonCancel = function () {
    // 创建取消按钮
    if (!s.params.buttonCancelHTML) {
      return 0
    }
    var buttonCancel = document.createElement('a')
    buttonCancel.setAttribute('class', s.params.buttonCancelClass)
    buttonCancel.innerHTML = s.params.buttonCancelHTML
    return buttonCancel
  }

  s.create = function () {
    if (s.params.mask) s.mask = typeof s.params.mask === 'string' ? document.querySelector(s.params.mask) : s.params.mask
    if (s.mask) {
      s.actionsheet = s.mask.querySelector('.' + s.params.actionsheetClass)
      s.group = s.mask.querySelector('.' + s.params.groupClass)
      s.options = [].slice.call(s.mask.querySelectorAll('.' + s.params.optionClass))
      /* eslint-disable */
      // for (var i = 0, option; option = s.options[i++];) {
      //   option.handler = option.getAttribute('handler')
      // }
      /* eslint-enable */
      s.buttonCancel = s.mask.querySelector('.' + s.params.buttonCancelClass)
      return
    }
    s.mask = s.createMask()
    s.actionsheet = s.createActionsheet()
    s.group = s.createGroup()
    s.options = s.createOptions(s.group) // 创建项，并append到group里
    s.buttonCancel = s.createButtonCancel()
    s.actionsheet.appendChild(s.group)
    s.actionsheet.appendChild(s.buttonCancel)
    s.mask.appendChild(s.actionsheet)
    s.parent.appendChild(s.mask)
  }
  s.create()
  // 设置数据
  s.setData = function (data) {
    s.params.data = data
    if (s.actionsheet) s.updateData(s.actionsheet)
    else s.createActionsheet()
  }

  /* ------------------
  Method
  ------------------ */
  s.showMask = function () {
    s.mask.classList.add(s.params.maskActiveClass)
  }
  s.hideMask = function () {
    s.mask.classList.remove(s.params.maskActiveClass)
  }
  s.destroyMask = function () {
    s.parent.removeChild(s.mask)
  }
  s.showActionsheet = function () {
    s.actionsheet.classList.add(s.params.maskActiveClass)
  }
  s.hideActionsheet = function () {
    s.actionsheet.classList.remove(s.params.maskActiveClass)
  }
  s.destroyActionsheet = function () {
    s.parent.removeChild(s.actionsheet)
  }

  s.isHid = true
  s.hide = function () {
    s.isHid = true
    // 显示遮罩
    s.hideMask()
    // 显示弹出框
    s.hideActionsheet()
    // 显示滚动条
    if (s.overflowContainer) s.overflowContainer.classList.remove(s.params.overflowContainerActiveClass)
  }
  s.show = function () {
    s.isHid = false
    // 显示遮罩
    s.showMask()
    // 显示弹出框
    s.showActionsheet()
    // 禁用滚动条
    if (s.overflowContainer) s.overflowContainer.classList.add(s.params.overflowContainerActiveClass)
  }
  s.destroy = function () {
    // 移动事件监听
    s.detach()
    // 移除遮罩
    s.destroyMask()
    // 移除弹出框
    s.destroyActionsheet()
  }
  // 设置
  s.setOnClick = function (fn) {
    s.params.onClick = fn
  }
  s.setOnClickMask = function (fn) {
    s.params.onClickMask = fn
  }
  /* ------------------
  Control
  ------------------ */
  s.events = function (detach) {
    var touchTarget = s.actionsheet
    var action = detach ? 'removeEventListener' : 'addEventListener'
    touchTarget[action]('click', s.onClick, false)
    touchTarget[action]('webkitTransitionEnd', s.onTransitionEnd, false)
    // 遮罩
    s.mask[action]('click', s.onClickMask, false)
  }
  // attach、dettach事件
  s.attach = function (event) {
    s.events()
  }
  s.detach = function (event) {
    s.events(true)
  }
  s.onClick = function (e) {
    s.target = e.target
    // 点击容器
    if (s.params.onClick) s.params.onClick(s)
    // 点击项
    var options = s.options
    /* eslint-disable */
    for (var i = 0, option; option = options[i++];) {
      if (option === s.target) {
        // Callback
        if(option.handler instanceof Function) option.handler(s)
        return
      }
    }
    /* eslint-enable */
    // 点击取消按钮
    if (s.params.onClickCancel && s.buttonCancel === s.target) {
      s.params.onClickCancel(s)
      return
    }
    s.hide()
  }

  s.onClickMask = function (e) {
    if (e.target === s.mask) {
      s.target = e.target
      if (s.params.onClickMask) s.params.onClickMask(s)
      if (s.params.isClickMaskHide) s.hide()
    }
  }

  s.onTransitionEnd = function (e) {
    if (e.propertyName === 'visibility') return
  }
  /* ------------------
  Init
  ------------------ */
  s.init = function () {
    s.attach()
  }
  s.init()
}

;//export default Actionsheet


//Toast 提示框
(function(window, document, undefined) {

  window.Toast = function(params) {
    /*================
    Model
    ================*/
    var defaults = {
      parent: document.body,

      maskClass: "mask",
      type: "bottom",
      maskActiveClass: "active",
      maskFeatureClass: "toast-mask",

      toastClass: "toast",
      toastActiveClass: "active",
      wrapperClass: "toast-wrapper",

      isClickAllow: false,
      clickAllowClass: "toast-propagation",

      toastCss: {},
      wrapperCss: {},

      delay: 1500,
      html: "",

      /*callbacks
      onShowed(Toast)//显示动画结束后回调
      onHid(Toast)//隐藏动画结束后回调
      */
    }
    params = params || {};
    for (var def in defaults) {
      if (params[def] == undefined) {
        params[def] = defaults[def];
      }
    }
    var s = this;
    s.params = params;
    s.parent = typeof s.params.parent == "string" ? document.querySelector(s.params.parent) : s.params.parent;
    s.toast, s.wrapper;
    //Mask
    s.createMask = function() {
      var mask = document.createElement("div");
      mask.setAttribute("class", s.params.maskClass + " " + s.params.type + " " + s.params.maskFeatureClass);
      if (s.params.isClickAllow) mask.classList.add(s.params.clickAllowClass);
      return mask;
    }
    s.createToast = function() {
      var toast = document.createElement("div");
      toast.setAttribute("class", s.params.toastClass);
      return toast;
    }
    s.createToastContent = function() {
      var wrapper = document.createElement("div");
      wrapper.setAttribute("class", s.params.wrapperClass);
      if (s.params.html) wrapper.innerHTML = s.params.html;
      return wrapper;
    }
    s.create = function() {
      s.mask = s.createMask();
      s.toast = s.createToast();
      s.wrapper = s.createToastContent();
      s.toast.appendChild(s.wrapper);
      s.mask.appendChild(s.toast);
      s.parent.appendChild(s.mask);
    }
    s.create();
    s.update = function() {
      for (var c in s.params.toastCss) {
        s.toast.style[c] = s.params.toastCss[c];
      }
      for (var c in s.params.wrapperCss) {
        s.wrapper.style[c] = s.params.wrapperCss[c];
      }
    }
    s.update();

    /*================
    Method
    ================*/
    s.setToastClassName = function(className) {
      s.params.toastClass = className;
      s.toast.setAttribute("class", s.params.toastClass);
    };
    s.setHTML = function(html) {
      s.wrapper.innerHTML = html;
    };
    s.setDelay = function(delay) {
      s.params.delay = delay;
    };

    s.showMask = function() {
      s.mask.classList.add(s.params.maskActiveClass);
    }
    s.hideMask = function() {
      s.mask.classList.remove(s.params.maskActiveClass);
    }
    s.destroyMask = function() {
      s.parent.removeChild(s.mask);
    }

    s.showToast = function() {
      s.toast.classList.add(s.params.toastActiveClass);
    }
    s.hideToast = function() {
      s.toast.classList.remove(s.params.toastActiveClass);
    }
    s.destroyToast = function() {
      s.parent.removeChild(s.toast);
    }

    s.isHid = true;
    s.hide = function(fn) {
      s.isHid = true;
      s.hideMask();
      s.hideToast();
    };
    s.show = function(fn) {
      s.isHid = false;
      s.showMask();
      s.showToast();

      //显示数秒后，自动消失
      if (s.delayer) window.clearTimeout(s.delayer);
      s.delayer = setTimeout(function() {
        s.hide();
      }, s.params.delay);
    };
    s.destroy = function() {
      s.destroyMask
    };
    /*================
    Controller
    ================*/
    s.events = function(detach) {
      var target = s.toast;
      var action = detach ? "removeEventListener" : "addEventListener";
      target[action]("webkitTransitionEnd", s.onTransitionEnd, false);
      //target[action]("webkitAnimationEnd",s.onAnimationEnd,false);
    }
    s.attach = function() {
      s.events();
    }
    s.detach = function() {
      s.events(false);
    }
    //Events Handler
    s.onTransitionEnd = function(e) {
      if (e.propertyName == "visibility") return;
      if (s.isHid) {
        //Callback onHid
        if (s.params.onHid) s.params.onHid(s);
      } else {
        //Callback onShowed
        if (s.params.onShowed) s.params.onShowed(s);
      }
    }
    /*================
    Init
    ================*/
    s.init = function() {
      s.attach();
    }
    s.init();
  }
})(window, document, undefined);

// Dialog 自定义弹出框
var Dialog = function (params) {
  /* -------------------------
  Model
  ------------------------- */
  var defaults = {
    overflowContainer: document.body,
    overflowContainerActiveClass: 'overflow-hidden',

    position: 'middle',

    animationAttr: 'data-animation',
    animation: 'fade',

    mask: null,
    wrapper: null,

    maskClass: 'mask',
    maskActiveClass: 'active',
    maskFeatureClass: 'dialog-mask',

    dialogClass: 'dialog',
    dialogActiveClass: 'active',

    css: {},
    maskCss: {},
    isClickMaskHide: true
    /* callbacks
    onClick:function(Dialog)
    onClickMask:function(Dialog)
    onTransitionEnd:function(Dialog)
    onShowed(Dialog)// 显示动画结束后回调
    onHid(Dialog)// 隐藏动画结束后回调
      */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }

  // Dialog
  var s = this

  // Params
  s.params = params
  // Mask
  s.mask
  // Dialog(外层生成的包裹容器)
  s.dialog
  // Wrapper(源容器)
  s.wrapper
  // Parent(父容器，为了方便在源容器处插入包裹容器)
  s.parent
  // OverflowContainer
  s.overflowContainer = typeof s.params.overflowContainer === 'string' ? document.querySelector(s.params.overflowContainer) : s.params.overflowContainer

  // Mask
  s.createMask = function () {
    var mask = document.createElement('div')
    mask.setAttribute('class', s.params.maskClass + ' ' + s.params.maskFeatureClass)
    return mask
  }

  // Dialog
  s.createDialog = function () {
    var dialog = document.createElement('div')
    dialog.classList.add(s.params.dialogClass, s.params.position)
    dialog.setAttribute(s.params.animationAttr, s.params.animation)
    return dialog
  }
  s.create = function () {
    if (s.params.mask) s.mask = typeof s.params.mask === 'string' ? document.querySelector(s.params.mask) : s.params.mask
    if (s.mask) {
      s.parent = s.mask.parentNode
      s.dialog = s.mask.querySelector('.' + s.params.dialogClass)
      return true
    } else {
      // 获取wrapper
      s.wrapper = typeof s.params.wrapper === 'string' ? document.querySelector(s.params.wrapper) : s.params.wrapper
      if (!s.wrapper) {
        console.log('SeedsUI Error：未找到Dialog的DOM对象，请检查传入参数是否正确')
        return false
      }
      // 确定父级
      s.parent = s.wrapper.parentNode
      // 插入Dialog
      s.dialog = s.createDialog()
      s.parent.insertBefore(s.dialog, s.wrapper)
      s.dialog.appendChild(s.wrapper)
      // 插入遮罩
      s.mask = s.createMask()
      s.mask.appendChild(s.dialog)
      s.parent.appendChild(s.mask)
      return true
    }
  }
  var isCreated = s.create()
  if (!isCreated) return
  s.update = function () {
    var style
    // Dialog Css
    for (style in s.params.css) {
      s.dialog.style[style] = s.params.css[style]
    }
    // Mask Css
    for (style in s.params.maskCss) {
      s.mask.style[style] = s.params.maskCss[style]
    }
    // 源容器显示
    if (s.wrapper) s.wrapper.style.display = 'block'
  }
  s.update()

  /* -------------------------
  Method
  ------------------------- */
  s.showMask = function () {
    s.mask.classList.add(s.params.maskActiveClass)
  }
  s.hideMask = function () {
    s.mask.classList.remove(s.params.maskActiveClass)
  }
  s.destroyMask = function () {
    s.parent.removeChild(s.mask)
  }
  s.showDialog = function () {
    s.dialog.classList.add(s.params.dialogActiveClass)
  }
  s.hideDialog = function () {
    s.dialog.classList.remove(s.params.dialogActiveClass)
  }
  s.destroyDialog = function () {
    s.parent.removeChild(s.dialog)
  }
  s.isHid = true
  s.hide = function () {
    s.isHid = true
    s.hideMask()
    s.hideDialog()
    // 显示滚动条
    if (s.overflowContainer) s.overflowContainer.classList.remove(s.params.overflowContainerActiveClass)
  }
  s.show = function () {
    s.isHid = false
    s.showMask()
    s.showDialog()
    // 禁用滚动条
    if (s.overflowContainer) s.overflowContainer.classList.add(s.params.overflowContainerActiveClass)
  }
  s.toggle = function () {
    if (s.isHid) {
      s.show()
    } else {
      s.hide()
    }
  }
  s.destroy = function () {
    s.destroyMask()
    //  s.destroyDialog()
  }

  // 设置
  s.setOnClick = function (fn) {
    s.params.onClick = fn
  }
  s.setOnClickMask = function (fn) {
    s.params.onClickMask = fn
  }

  /* -------------------------
  Control
  ------------------------- */
  s.events = function (detach) {
    var touchTarget = s.dialog
    var action = detach ? 'removeEventListener' : 'addEventListener'
    touchTarget[action]('click', s.onClick, false)
    touchTarget[action]('webkitTransitionEnd', s.onTransitionEnd, false)
    // 遮罩
    s.mask[action]('click', s.onClickMask, false)
  }

  // attach、dettach事件
  s.attach = function (event) {
    s.events()
  }
  s.detach = function (event) {
    s.events(true)
  }
  s.onClick = function (e) {
    s.target = e.target
    // CallBack onClick
    if (s.params.onClick) s.params.onClick(s)
  }
  s.onClickMask = function (e) {
    if (e.target === s.mask) {
      s.target = e.target
      // CallBack onClickMask
      if (s.params.onClickMask) s.params.onClickMask(s)
      if (s.params.isClickMaskHide) s.hide()
    }
  }
  s.onTransitionEnd = function (e) {
    if (e.propertyName === 'visibility') return
    s.target = e.target
    // Callback onTransitionEnd
    if (s.params.onTransitionEnd) s.params.onTransitionEnd(s)
    if (s.isHid) {
      // Callback onHid
      if (s.params.onHid) s.params.onHid(s)
    } else {
      // Callback onShowed
      if (s.params.onShowed) s.params.onShowed(s)
    }
  }

  s.init = function () {
    s.attach()
  }
  s.init()
}

;//export default Dialog


// Picker 滚动选择器
var Picker = function (params) {
  /* ------------------------
  Model
  ------------------------ */
  var defaults = {
    overflowContainer: document.body,
    overflowContainerActiveClass: 'overflow-hidden',

    mask: null,

    maskClass: 'mask',
    maskActiveClass: 'active',
    maskFeatureClass: 'picker-mask',

    pickerClass: 'picker',
    pickerActiveClass: 'active',

    headerClass: 'picker-header',
    headerDoneClass: 'picker-done',
    headerDoneText: '完成',
    headerCancelClass: 'picker-cancel',
    headerCancelText: '取消',

    wrapperClass: 'picker-wrapper',

    slotboxClass: 'picker-slotbox',
    slotClass: 'picker-slot',

    layerClass: 'picker-layer',
    layerFrameClass: 'picker-layer-frame',
    layerFrameHTML: '<div class=picker-layer-frame></div>',

    lockClass: 'lock',

    cellHeight: 44,
    bounceRange: 44, // 弹性值

    /* callbacks
    onInit:function (Picker)
    onClickCancel:function (Picker)
    onClickDone:function (Picker)
    onClickMask:functioin (Picker)
    onScrollStart:function (Picker)
    onScroll:function (Picker)
    onScrollEnd:function (Picker)
    onTransitionEnd:function (Picker)// 动画结束后回调
    onShowed(Picker)// 显示动画结束后回调
    onHid(Picker)// 隐藏动画结束后回调
      */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  // Picker
  var s = this

  // Params
  s.params = params
  // Dom元素
  s.overflowContainer = typeof s.params.overflowContainer === 'string' ? document.querySelector(s.params.overflowContainer) : s.params.overflowContainer
  s.picker = null
  s.mask = null
  s.header = null
  s.wrapper = null
  s.slotbox = null
  s.layer = null
  s.headerDone = null
  s.headerCancel = null

  // 选中项
  s.activeOptions = []
  // 新建Picker
  s.createPicker = function () {
    var picker = document.createElement('div')
    picker.setAttribute('class', s.params.pickerClass)
    return picker
  }

  // 新建Header
  s.createHeader = function () {
    var header = document.createElement('div')
    header.setAttribute('class', s.params.headerClass)
    return header
  }

  // 新建Header按钮
  s.createHeaderDone = function () {
    var headerDone = document.createElement('a')
    headerDone.setAttribute('class', s.params.headerDoneClass)
    headerDone.innerHTML = s.params.headerDoneText
    return headerDone
  }
  s.createHeaderCancel = function () {
    var headerCancel = document.createElement('a')
    headerCancel.setAttribute('class', s.params.headerCancelClass)
    headerCancel.innerHTML = s.params.headerCancelText
    return headerCancel
  }

  // 新建Wrapper
  s.createWrapper = function () {
    var wrapper = document.createElement('div')
    wrapper.setAttribute('class', s.params.wrapperClass)
    return wrapper
  }

  // 新建Slotbox
  s.createSlotbox = function () {
    var slotbox = document.createElement('div')
    slotbox.setAttribute('class', s.params.slotboxClass)
    return slotbox
  }

  // 新建Layer
  s.createLayer = function () {
    var layer = document.createElement('div')
    layer.setAttribute('class', s.params.layerClass)
    layer.innerHTML = s.params.layerFrameHTML
    return layer
  }

  // 新建Mask
  s.createMask = function () {
    var mask = document.createElement('div')
    mask.setAttribute('class', s.params.maskClass + ' ' + s.params.maskFeatureClass)
    return mask
  }

  // 创建DOM
  s.create = function () {
    if (s.params.mask) s.mask = typeof s.params.mask === 'string' ? document.querySelector(s.params.mask) : s.params.mask

    if (s.mask) {
      s.picker = s.mask.querySelector('.' + s.params.pickerClass)
      s.header = s.mask.querySelector('.' + s.params.headerClass)
      s.headerDone = s.mask.querySelector('.' + s.params.headerDoneClass)
      s.headerCancel = s.mask.querySelector('.' + s.params.headerCancelClass)
      s.wrapper = s.mask.querySelector('.' + s.params.wrapperClass)
      s.slotbox = s.mask.querySelector('.' + s.params.slotboxClass)
      s.layer = s.mask.querySelector('.' + s.params.layerClass)
      return
    }
    s.mask = s.createMask()
    s.picker = s.createPicker()
    s.header = s.createHeader()
    s.headerDone = s.createHeaderDone()
    s.headerCancel = s.createHeaderCancel()
    s.wrapper = s.createWrapper()
    s.slotbox = s.createSlotbox()
    s.layer = s.createLayer()

    s.header.appendChild(s.headerCancel)
    s.header.appendChild(s.headerDone)

    s.wrapper.appendChild(s.layer)
    s.wrapper.appendChild(s.slotbox)

    s.picker.appendChild(s.header)
    s.picker.appendChild(s.wrapper)

    s.mask.appendChild(s.picker)
    s.overflowContainer.appendChild(s.mask)
  }
  s.create()
  /* ------------------------
  Method
  ------------------------ */
  // 添加一列
  s.addSlot = function (values, defaultKey, classes) {
    if (!classes) classes = ''
    // 设置属性
    var slot = document.createElement('ul')
    slot.setAttribute('class', s.params.slotClass + ' ' + classes)
    slot.values = values
    slot.defaultKey = defaultKey
    if (classes.indexOf(s.params.lockClass) >= 0) slot.isLock = true
    else slot.isLock = false

    // 添加到集合里
    s.slotbox.appendChild(slot)

    // 渲染
    slot.index = s.slotbox.children.length - 1
    s.renderSlot(slot)
  }
  // 替换一列
  s.replaceSlot = function (index, values, defaultKey, classes, fn) {
    if (!classes) classes = ''
    // 设置属性
    var slot = s.slotbox.children[index]
    slot.setAttribute('class', s.params.slotClass + ' ' + classes)
    slot.values = values
    slot.defaultKey = defaultKey
    if (classes.indexOf(s.params.lockClass) >= 0) slot.isLock = true
    else slot.isLock = false

    if (classes.indexOf(s.params.lockClass) >= 0) s.slotbox.children[index].isLock = true
    else s.slotbox.children[index].isLock = false
    // 渲染
    s.renderSlot(slot)
    // 回调
    if (fn) fn(s)
  }

  s.renderSlot = function (slot) { // 渲染一列
    var index = slot.index
    var values = slot.values
    slot.innerHTML = ''
    // 渲染
    var li = ''
    var defaultIndex = 0
    for (var i = 0; i < values.length; i++) {
      // 获得defaultIndex
      if (slot.defaultKey && slot.defaultKey === values[i]['key']) {
        defaultIndex = i
      }

      // 把li添加到槽中
      li += '<li>' + values[i]['value'] + '</li>'
    }
    slot.innerHTML = li
    // 选中项
    s.activeOptions[index] = slot.values[defaultIndex]
    // 设置一槽的属性
    /*
    slot.values
    slot.defaultKey
    slot.index
    */
    slot.defaultPosY = -defaultIndex * s.params.cellHeight
    slot.posY = -defaultIndex * s.params.cellHeight
    slot.minPosY = 0
    slot.maxPosY = -(slot.values.length - 1) * s.params.cellHeight
    slot.minBouncePosY = s.params.bounceRange
    slot.maxBouncePosY = slot.maxPosY - s.params.bounceRange

    slot.style.webkitTransform = 'translate(0px,' + slot.posY + 'px)'
  }
  s.isHid = true
  // 隐藏
  s.hide = function () {
    s.isHid = true
    s.mask.classList.remove(s.params.maskActiveClass)
    s.picker.classList.remove(s.params.pickerActiveClass)
    // 显示滚动条
    if (s.overflowContainer) s.overflowContainer.classList.remove(s.params.overflowContainerActiveClass)
  }
  s.show = function () { // 显示
    s.isHid = false
    s.mask.classList.add(s.params.maskActiveClass)
    s.picker.classList.add(s.params.pickerActiveClass)
    // 禁用滚动条
    if (s.overflowContainer) s.overflowContainer.classList.add(s.params.overflowContainerActiveClass)
  }
  s.clearSlots = function () { // 清除
    // 清空数据
    s.slotbox.innerHTML = ''
  }
  s.destroy = function () { // 销毁
    s.overflowContainer.removeChild(s.mask)
  }
  // 计算惯性时间与坐标，返回距离和时间
  s.calcInertance = function (opts) {
    // 摩擦力
    var friction = 0.002
    // 滑动距离
    var opRange = opts.range
    // 滑动时长
    var opDuration = opts.duration

    // 使用公式算出duration(新时长)
    var duration = (2 * opRange / opDuration) / friction
    // 使用公式算出offset(新距离)
    var range = -(friction / 2) * (duration * duration)
    if (opRange < 0) { // 如果拖动间距为负值，则为向下拖动
      duration = -duration
      range = -range
    }
    /* console.log('滑动距离:' + opRange)
    console.log('滑动时长:' + opDuration)
    console.log('新时长:' + duration)
    console.log('新距离:' + range) */
    // 使用距离计算新的位置
    var value = opts.current + range

    // 矫正位置与时长
    if (value > opts.min) { // 最上面
      // Math.abs(Math.round(value)) - Math.abs(Math.round(opts.min))
      duration = 300
      value = opts.min
    } else if (value < opts.max) { // 最下面
      duration = 300
      value = opts.max
    } else { // 在中间
      var remainder = value % s.params.cellHeight
      if (remainder !== 0) {
        // 算出比例
        var divided = Math.round(value / s.params.cellHeight)
        // 对准位置
        value = s.params.cellHeight * divided
      }
    }

    // 更新选中项
    s.updateActiveOptions(s.activeSlot, value)

    // 返回值
    return {
      duration: Math.round(duration),
      value: Math.round(value)
    }
  }
  // 更新列表激活状态
  s.updateActiveOptions = function (slot, posY) {
    var index = -Math.round((posY - s.params.cellHeight * 2) / s.params.cellHeight) - 2
    // 添加到激活项
    var activeOption = slot.values[index]
    s.activeOptions[slot.index] = activeOption
  }
  /* ------------------------
  Control
  ------------------------ */
  s.events = function (detach) {
    var action = detach ? 'removeEventListener' : 'addEventListener'
    // 滑动事件
    s.slotbox[action]('touchstart', s.onTouchStart, false)
    s.slotbox[action]('touchmove', s.onTouchMove, false)
    s.slotbox[action]('touchend', s.onTouchEnd, false)
    s.slotbox[action]('touchcancel', s.onTouchEnd, false)
    // 选择器事件
    s.picker[action]('webkitTransitionEnd', s.onTransitionEnd, false)
    // 遮罩
    // s.mask[action]('touchmove', s.preventDefault, false)
    s.mask[action]('click', s.onClickMask, false)
    // 按钮
    // s.header[action]('touchmove', s.preventDefault, false)
    s.headerDone[action]('click', s.onClickDone, false)
    s.headerCancel[action]('click', s.onClickCancel, false)
  }
  s.detach = function (event) {
    s.events(true)
  }
  s.attach = function (event) {
    s.events()
  }

  s.preventDefault = function (e) {
    e.preventDefault()
  }

  // Mask
  s.onClickMask = function (e) {
    if (e.target !== s.mask) return
    if (s.params.onClickMask) s.params.onClickMask(e)
    else s.hide()
  }

  // Done|Cancel
  s.onClickDone = function (e) {
    s.target = e.target
    s.params.onClickDone(s)
  }
  s.onClickCancel = function (e) {
    s.target = e.target
    if (s.params.onClickCancel) s.params.onClickCancel(s)
    else s.hide()
  }

  s.touches = {
    startX: 0,
    startY: 0,
    currentX: 0,
    currentY: 0,
    endX: 0,
    endY: 0,
    startTimeStamp: 0,
    duration: 0,
    diffX: 0,
    diffY: 0,
    posY: 0,
    currentPosY: 0,
    direction: null
  }

  // 触摸事件
  s.onTouchStart = function (e) {
    s.touches.startX = e.touches[0].clientX
    s.touches.startY = e.touches[0].clientY
    // 寻找当前点击的槽
    s.activeSlot = e.target

    // 锁定的槽将不工作
    if (s.activeSlot.isLock) return

    // 获得位置
    s.touches.posY = s.activeSlot.posY

    // 清除动画
    s.activeSlot.style.webkitTransitionDuration = 0

    // 记录点击时间
    s.touches.startTimeStamp = e.timeStamp
    // Callback
    if (s.params.onScrollStart) s.params.onScrollStart(s)
  }
  s.onTouchMove = function (e) {
    e.preventDefault()
    // 锁定的槽将不工作
    if (s.activeSlot.isLock) return

    s.touches.currentY = e.touches[0].clientY
    s.touches.diffY = s.touches.startY - s.touches.currentY
    s.touches.currentPosY = s.touches.posY - s.touches.diffY
    if (s.touches.currentPosY > s.activeSlot.minBouncePosY) {
      s.touches.currentPosY = s.activeSlot.minBouncePosY
    } else if (s.touches.currentPosY < s.activeSlot.maxBouncePosY) {
      s.touches.currentPosY = s.activeSlot.maxBouncePosY
    }
    s.activeSlot.style.webkitTransform = 'translate(0px,' + s.touches.currentPosY + 'px)'

    // Callback
    if (s.params.onScroll) s.params.onScroll(s)
  }
  s.onTouchEnd = function (e) {
    // 锁定的槽将不工作
    if (s.activeSlot.isLock) return

    s.touches.endX = e.changedTouches[0].clientX
    s.touches.endY = e.changedTouches[0].clientY
    s.touches.diffX = s.touches.startX - s.touches.endX
    s.touches.diffY = s.touches.startY - s.touches.endY
    // 判断是否是tap
    if (Math.abs(s.touches.diffX) < 6 && Math.abs(s.touches.diffY) < 6) {
      return
    }

    // 计算拖动时间
    s.touches.duration = e.timeStamp - s.touches.startTimeStamp

    // 惯性值计算
    var inertance = s.calcInertance({
      range: s.touches.diffY,
      duration: s.touches.duration,
      current: s.touches.currentPosY,
      min: s.activeSlot.minPosY,
      max: s.activeSlot.maxPosY
    })
    // 滚动到指定位置
    s.activeSlot.style.webkitTransitionDuration = inertance.duration + 'ms'
    s.activeSlot.posY = inertance.value
    s.activeSlot.style.webkitTransform = 'translate(0px,' + inertance.value + 'px)'

    // Callback onScrollEnd
    if (s.params.onScrollEnd) s.params.onScrollEnd(s)
  }

  s.onTransitionEnd = function (e) {
    var target = e.target
    if (e.propertyName !== 'transform' || target !== s.picker) {
      return
    }
    // 容器显隐
    if (target.classList.contains(s.params.pickerClass)) {
      if (s.params.onTransitionEnd) s.params.onTransitionEnd(s)
      if (s.isHid) {
        if (s.params.onHid) s.params.onHid(s)
      } else {
        if (s.params.onShowed) s.params.onShowed(s)
      }
    }
  }

  s.init = function () {
    if (s.params.onInit) s.params.onInit(s)
    s.attach()
  }
  s.init()
  return s
}

;//export default Picker


//import Picker from './picker.js'
// 扩展Picker日期控件 (require pikcer.js)
var PickerDate = function (params) {
  // 参数改写
  var onDateClickDone = params.onClickDone
  var onDateScrollEnd = params.onScrollEnd
  params.onClickDone = undefined
  params.onScrollEnd = undefined
  var nowDate = new Date()
  /* ----------------
    Model
    ---------------- */
  var defaults = {
    viewType: 'date', // 'date','month','time','datetime'
    isSimpleYear: false,

    yearClass: 'text-center',
    monthClass: 'text-center',
    dayClass: 'text-center',
    hourClass: 'text-center',
    minuteClass: 'text-center',

    yearsData: null,
    monthsData: null,
    daysData: null,
    hoursData: null,
    minutesData: null,

    defaultYear: '',
    defaultMonth: '',
    defaultDay: '',
    defaultHour: '',
    defaultMinute: '',

    minYear: nowDate.getFullYear() - 10, // 1950
    maxYear: nowDate.getFullYear() + 10, // 2050

    yyUnit: '年',
    MMUnit: '月',
    ddUnit: '日',
    hhUnit: '时',
    mmUnit: '分',

    onClickDone: function (e) {
      e.activeText = getActiveText(e.activeOptions)
      setDefaults(e.activeOptions)
      if (onDateClickDone) onDateClickDone(e)
    },
    onScrollEnd: function (e) {
      // 根据月份算日
      if ((e.params.viewType === 'date' || e.params.viewType === 'datetime') && (e.activeSlot.index === 0 || e.activeSlot.index === 1)) {
        var year = e.activeOptions[0]['key']
        var month = e.activeOptions[1]['key']
        var defaultDay = e.activeOptions[2]['key']
        updateDays(year, month, defaultDay) // 更新总天数
      }
      // 回调
      if (onDateScrollEnd) onDateScrollEnd(e)
    }
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = new Picker(params)

  function trim (str) {
    return str.replace(/(^\s*)|(\s*$)/g, '')
  }
  // 设置默认值
  s.setDefaultYear = function (yearKey) {
    s.params.defaultYear = trim('' + yearKey)
  }
  s.setDefaultMonth = function (monthKey) {
    s.params.defaultMonth = trim('' + monthKey)
  }
  s.setDefaultDay = function (dayKey) {
    s.params.defaultDay = trim('' + dayKey)
  }
  s.setDefaultHour = function (hourKey) {
    s.params.defaultHour = trim('' + hourKey)
  }
  s.setDefaultMinute = function (minuteKey) {
    s.params.defaultMinute = trim('' + minuteKey)
  }

  // 默认时间
  s.updateDetault = function () {
    nowDate = new Date()
    // 默认值
    if (!s.params.defaultYear) {
      var yyyy = nowDate.getFullYear()
      var _yyyy = '' + yyyy
      s.setDefaultYear(_yyyy)
    }
    if (!s.params.defaultMonth) {
      var MM = nowDate.getMonth() + 1
      var _MM = MM.toString().length === 1 ? '0' + MM : MM
      s.setDefaultMonth(_MM)
    }
    if (!s.params.defaultDay) {
      var dd = nowDate.getDate()
      var _dd = dd.toString().length === 1 ? '0' + dd : dd
      s.setDefaultDay(_dd)
    }
    if (!s.params.defaultHour) {
      var hh = nowDate.getHours()
      var _hh = hh.toString().length === 1 ? '0' + hh : hh
      s.setDefaultHour(_hh)
    }
    if (!s.params.defaultMinute) {
      var mm = nowDate.getMinutes()
      var _mm = mm.toString().length === 1 ? '0' + mm : mm
      s.setDefaultMinute(_mm)
    }
  }
  s.updateDetault()

  // 年
  s.years = []
  if (s.params.yearsData) {
    s.years = s.params.yearsData
  } else {
    for (var yyyy = s.params.minYear; yyyy <= s.params.maxYear; yyyy++) {
      s.years.push({
        'key': '' + yyyy,
        'value': s.params.isSimpleYear ? yyyy.toString().substring(2, 4) + s.params.yyUnit : yyyy + s.params.yyUnit
      })
    }
  }
  // 月
  s.months = []
  if (s.params.monthsData) {
    s.months = s.params.monthsData
  } else {
    for (var MM = 1; MM <= 12; MM++) {
      var _MM = MM.toString().length === 1 ? '0' + MM : MM
      s.months.push({
        'key': '' + _MM,
        'value': _MM + s.params.MMUnit
      })
    }
  }
  // 日
  s.days = []
  var currentMaxday = new Date(nowDate.getFullYear(), nowDate.getMonth() + 1, 0).getDate()
  if (s.params.daysData) {
    s.days = Object.clone(s.params.daysData)
  } else {
    for (var dd = 1; dd <= currentMaxday; dd++) {
      var _dd = dd.toString().length === 1 ? '0' + dd : dd
      s.days.push({
        'key': '' + _dd,
        'value': _dd + s.params.ddUnit
      })
    }
  }

  function updateDaysForDefault (year, month) {
    var lastDay = '' + new Date(year, month, 0).getDate()
    var currentLastDay = s.days[s.days.length - 1]['key']
    if (lastDay === currentLastDay) return
    if (lastDay > currentLastDay) {
      for (var i = 1 + parseInt(currentLastDay, 10); i <= lastDay; i++) {
        s.days.push({
          'key': '' + i,
          'value': '' + i + s.params.ddUnit
        })
      }
    } else if (lastDay < currentLastDay) {
      var spliceCount = currentLastDay - lastDay
      s.days.splice(s.days.length - spliceCount, spliceCount)
    }
  }
  function updateDaysForCustom (year, month) {
    var lastDay = '' + new Date(year, month, 0).getDate()
    var currentLastDay = s.days[s.days.length - 1]['key']
    var customData = s.params.daysData
    if (lastDay === currentLastDay) return
    if (lastDay > currentLastDay) {
      customData.forEach(function (n) {
        if (n['key'] <= lastDay && n['key'] > currentLastDay) s.days.push(n)
      })
    } else if (lastDay < currentLastDay) {
      for (var j = currentLastDay; j > lastDay; j--) {
        s.days.forEach(function (n) { // eslint-disable-line
          if (n['key'] === '' + j) s.days.pop()
        })
      }
    }
  }
  function updateDays (year, month, defaultDay) {
    if (s.params.daysData) {
      updateDaysForCustom(year, month)
    } else {
      updateDaysForDefault(year, month)
    }
    var defaultKey = defaultDay
    if (s.days.length < defaultDay) defaultKey = s.days[s.days.length - 1]['key']
    s.replaceSlot(2, s.days, defaultKey, s.params.dayClass) // 修改第三项
  }

  // 时
  s.hours = []
  if (s.params.hoursData) {
    s.hours = s.params.hoursData
  } else {
    for (var hh = 0; hh <= 23; hh++) {
      var _hh = hh.toString().length === 1 ? '0' + hh : hh
      s.hours.push({
        'key': '' + _hh,
        'value': _hh + s.params.hhUnit
      })
    }
  }

  // 分
  s.minutes = []
  if (s.params.minutesData) {
    s.minutes = s.params.minutesData
  } else {
    for (var mm = 0; mm <= 59; mm++) {
      var _mm = mm.toString().length === 1 ? '0' + mm : mm
      s.minutes.push({
        'key': '' + _mm,
        'value': _mm + s.params.mmUnit
      })
    }
  }

  /* ----------------
  Method
  ---------------- */
  function getActiveText (activeData) {
    var activeKeys = activeData.map(function (n, i, a) {
      return n['key']
    })
    if (s.params.viewType === 'date') return activeKeys[0] + '-' + activeKeys[1] + '-' + activeKeys[2]
    else if (s.params.viewType === 'datetime') return activeKeys[0] + '-' + activeKeys[1] + '-' + activeKeys[2] + ' ' + activeKeys[3] + ':' + activeKeys[4]
    else if (s.params.viewType === 'time') return activeKeys[0] + ':' + activeKeys[1]
    else if (s.params.viewType === 'month') return activeKeys[0] + '-' + activeKeys[1]
  }

  function setDefaults (activeData) {
    var activeKeys = activeData.map(function (n, i, a) {
      return n['key']
    })
    if (s.params.viewType === 'date' || s.params.viewType === 'datetime' || s.params.viewType === 'month') {
      if (activeKeys[0]) s.setDefaultYear(activeKeys[0])
      if (activeKeys[1]) s.setDefaultMonth(activeKeys[1])
      if (activeKeys[2]) s.setDefaultDay(activeKeys[2])
      if (activeKeys[3]) s.setDefaultHour(activeKeys[3])
      if (activeKeys[4]) s.setDefaultMinute(activeKeys[4])
    } else if (s.params.viewType === 'time') {
      if (activeKeys[0]) s.setDefaultHour(activeKeys[0])
      if (activeKeys[1]) s.setDefaultMinute(activeKeys[1])
    }
  }
  /* ----------------
  Init
  ---------------- */

  // 添加数据
  function addMonthSlot () {
    s.addSlot(s.years, s.params.defaultYear, s.params.yearClass)
    s.addSlot(s.months, s.params.defaultMonth, s.params.monthClass)
  }

  function addDateSlot () {
    addMonthSlot()
    s.addSlot(s.days, s.params.defaultDay, s.params.dayClass)
  }

  function addTimeSlot () {
    s.addSlot(s.hours, s.params.defaultHour, s.params.hourClass)
    s.addSlot(s.minutes, s.params.defaultMinute, s.params.minuteClass)
  }

  function addDateTime () {
    addDateSlot()
    addTimeSlot()
  }

  function initSlots () {
    switch (s.params.viewType) {
      case 'date':
        addDateSlot()
        break
      case 'month':
        addMonthSlot()
        break
      case 'time':
        addTimeSlot()
        break
      case 'datetime':
        addDateTime()
        break
      default:
        console.log('SeedsUI Error: initSlots失败')
    }
  }
  s.update = function () {
    s.clearSlots()
    initSlots()
  }
  initSlots()
  return s
}

;//export default PickerDate


var citys = [
  {
    key: '110000',
    value: '北京市',
    children: [{
      key: '110101',
      value: '东城区'
    }, {
      key: '110102',
      value: '西城区'
    }, {
      key: '110105',
      value: '朝阳区'
    }, {
      key: '110106',
      value: '丰台区'
    }, {
      key: '110107',
      value: '石景山区'
    }, {
      key: '110108',
      value: '海淀区'
    }, {
      key: '110109',
      value: '门头沟区'
    }, {
      key: '110111',
      value: '房山区'
    }, {
      key: '110112',
      value: '通州区'
    }, {
      key: '110113',
      value: '顺义区'
    }, {
      key: '110114',
      value: '昌平区'
    }, {
      key: '110115',
      value: '大兴区'
    }, {
      key: '110116',
      value: '怀柔区'
    }, {
      key: '110117',
      value: '平谷区'
    }, {
      key: '110118',
      value: '密云区'
    }, {
      key: '110119',
      value: '延庆区'
    }]
  }, {
    key: '120000',
    value: '天津市',
    children: [{
      key: '120101',
      value: '和平区'
    }, {
      key: '120102',
      value: '河东区'
    }, {
      key: '120103',
      value: '河西区'
    }, {
      key: '120104',
      value: '南开区'
    }, {
      key: '120105',
      value: '河北区'
    }, {
      key: '120106',
      value: '红桥区'
    }, {
      key: '120110',
      value: '东丽区'
    }, {
      key: '120111',
      value: '西青区'
    }, {
      key: '120112',
      value: '津南区'
    }, {
      key: '120113',
      value: '北辰区'
    }, {
      key: '120114',
      value: '武清区'
    }, {
      key: '120115',
      value: '宝坻区'
    }, {
      key: '120116',
      value: '滨海新区'
    }, {
      key: '120117',
      value: '宁河区'
    }, {
      key: '120118',
      value: '静海区'
    }, {
      key: '120119',
      value: '蓟州区'
    }]
  }, {
    key: '130000',
    value: '河北省',
    children: [{
      key: '130100',
      value: '石家庄市',
      children: [{
        key: '130102',
        value: '长安区'
      }, {
        key: '130104',
        value: '桥西区'
      }, {
        key: '130105',
        value: '新华区'
      }, {
        key: '130107',
        value: '井陉矿区'
      }, {
        key: '130108',
        value: '裕华区'
      }, {
        key: '130109',
        value: '藁城区'
      }, {
        key: '130110',
        value: '鹿泉区'
      }, {
        key: '130111',
        value: '栾城区'
      }, {
        key: '130121',
        value: '井陉县'
      }, {
        key: '130123',
        value: '正定县'
      }, {
        key: '130125',
        value: '行唐县'
      }, {
        key: '130126',
        value: '灵寿县'
      }, {
        key: '130127',
        value: '高邑县'
      }, {
        key: '130128',
        value: '深泽县'
      }, {
        key: '130129',
        value: '赞皇县'
      }, {
        key: '130130',
        value: '无极县'
      }, {
        key: '130131',
        value: '平山县'
      }, {
        key: '130132',
        value: '元氏县'
      }, {
        key: '130133',
        value: '赵县'
      }, {
        key: '130183',
        value: '晋州市'
      }, {
        key: '130184',
        value: '新乐市'
      }]
    }, {
      key: '130200',
      value: '唐山市',
      children: [{
        key: '130202',
        value: '路南区'
      }, {
        key: '130203',
        value: '路北区'
      }, {
        key: '130204',
        value: '古冶区'
      }, {
        key: '130205',
        value: '开平区'
      }, {
        key: '130207',
        value: '丰南区'
      }, {
        key: '130208',
        value: '丰润区'
      }, {
        key: '130209',
        value: '曹妃甸区'
      }, {
        key: '130223',
        value: '滦县'
      }, {
        key: '130224',
        value: '滦南县'
      }, {
        key: '130225',
        value: '乐亭县'
      }, {
        key: '130227',
        value: '迁西县'
      }, {
        key: '130229',
        value: '玉田县'
      }, {
        key: '130281',
        value: '遵化市'
      }, {
        key: '130283',
        value: '迁安市'
      }]
    }, {
      key: '130300',
      value: '秦皇岛市',
      children: [{
        key: '130302',
        value: '海港区'
      }, {
        key: '130303',
        value: '山海关区'
      }, {
        key: '130304',
        value: '北戴河区'
      }, {
        key: '130306',
        value: '抚宁区'
      }, {
        key: '130321',
        value: '青龙满族'
      }, {
        key: '130322',
        value: '昌黎县'
      }, {
        key: '130324',
        value: '卢龙县'
      }]
    }, {
      key: '130400',
      value: '邯郸市',
      children: [{
        key: '130402',
        value: '邯山区'
      }, {
        key: '130403',
        value: '丛台区'
      }, {
        key: '130404',
        value: '复兴区'
      }, {
        key: '130406',
        value: '峰峰矿区'
      }, {
        key: '130421',
        value: '邯郸县'
      }, {
        key: '130423',
        value: '临漳县'
      }, {
        key: '130424',
        value: '成安县'
      }, {
        key: '130425',
        value: '大名县'
      }, {
        key: '130426',
        value: '涉县'
      }, {
        key: '130427',
        value: '磁县'
      }, {
        key: '130428',
        value: '肥乡县'
      }, {
        key: '130429',
        value: '永年县'
      }, {
        key: '130430',
        value: '邱县'
      }, {
        key: '130431',
        value: '鸡泽县'
      }, {
        key: '130432',
        value: '广平县'
      }, {
        key: '130433',
        value: '馆陶县'
      }, {
        key: '130434',
        value: '魏县'
      }, {
        key: '130435',
        value: '曲周县'
      }, {
        key: '130481',
        value: '武安市'
      }]
    }, {
      key: '130500',
      value: '邢台市',
      children: [{
        key: '130502',
        value: '桥东区'
      }, {
        key: '130503',
        value: '桥西区'
      }, {
        key: '130521',
        value: '邢台县'
      }, {
        key: '130522',
        value: '临城县'
      }, {
        key: '130523',
        value: '内丘县'
      }, {
        key: '130524',
        value: '柏乡县'
      }, {
        key: '130525',
        value: '隆尧县'
      }, {
        key: '130526',
        value: '任县'
      }, {
        key: '130527',
        value: '南和县'
      }, {
        key: '130528',
        value: '宁晋县'
      }, {
        key: '130529',
        value: '巨鹿县'
      }, {
        key: '130530',
        value: '新河县'
      }, {
        key: '130531',
        value: '广宗县'
      }, {
        key: '130532',
        value: '平乡县'
      }, {
        key: '130533',
        value: '威县'
      }, {
        key: '130534',
        value: '清河县'
      }, {
        key: '130535',
        value: '临西县'
      }, {
        key: '130581',
        value: '南宫市'
      }, {
        key: '130582',
        value: '沙河市'
      }]
    }, {
      key: '130600',
      value: '保定市',
      children: [{
        key: '130602',
        value: '竞秀区'
      }, {
        key: '130606',
        value: '莲池区'
      }, {
        key: '130607',
        value: '满城区'
      }, {
        key: '130608',
        value: '清苑区'
      }, {
        key: '130609',
        value: '徐水区'
      }, {
        key: '130623',
        value: '涞水县'
      }, {
        key: '130624',
        value: '阜平县'
      }, {
        key: '130626',
        value: '定兴县'
      }, {
        key: '130627',
        value: '唐县'
      }, {
        key: '130628',
        value: '高阳县'
      }, {
        key: '130629',
        value: '容城县'
      }, {
        key: '130630',
        value: '涞源县'
      }, {
        key: '130631',
        value: '望都县'
      }, {
        key: '130632',
        value: '安新县'
      }, {
        key: '130633',
        value: '易县'
      }, {
        key: '130634',
        value: '曲阳县'
      }, {
        key: '130635',
        value: '蠡县'
      }, {
        key: '130636',
        value: '顺平县'
      }, {
        key: '130637',
        value: '博野县'
      }, {
        key: '130638',
        value: '雄县'
      }, {
        key: '130681',
        value: '涿州市'
      }, {
        key: '130683',
        value: '安国市'
      }, {
        key: '130684',
        value: '高碑店市'
      }]
    }, {
      key: '130700',
      value: '张家口市',
      children: [{
        key: '130702',
        value: '桥东区'
      }, {
        key: '130703',
        value: '桥西区'
      }, {
        key: '130705',
        value: '宣化区'
      }, {
        key: '130706',
        value: '下花园区'
      }, {
        key: '130708',
        value: '万全区'
      }, {
        key: '130709',
        value: '崇礼区'
      }, {
        key: '130722',
        value: '张北县'
      }, {
        key: '130723',
        value: '康保县'
      }, {
        key: '130724',
        value: '沽源县'
      }, {
        key: '130725',
        value: '尚义县'
      }, {
        key: '130726',
        value: '蔚县'
      }, {
        key: '130727',
        value: '阳原县'
      }, {
        key: '130728',
        value: '怀安县'
      }, {
        key: '130730',
        value: '怀来县'
      }, {
        key: '130731',
        value: '涿鹿县'
      }, {
        key: '130732',
        value: '赤城县'
      }]
    }, {
      key: '130800',
      value: '承德市',
      children: [{
        key: '130802',
        value: '双桥区'
      }, {
        key: '130803',
        value: '双滦区'
      }, {
        key: '130804',
        value: '鹰手营子矿区'
      }, {
        key: '130821',
        value: '承德县'
      }, {
        key: '130822',
        value: '兴隆县'
      }, {
        key: '130823',
        value: '平泉县'
      }, {
        key: '130824',
        value: '滦平县'
      }, {
        key: '130825',
        value: '隆化县'
      }, {
        key: '130826',
        value: '丰宁满族'
      }, {
        key: '130827',
        value: '宽城满族'
      }, {
        key: '130828',
        value: '围场满族蒙古族'
      }]
    }, {
      key: '130900',
      value: '沧州市',
      children: [{
        key: '130902',
        value: '新华区'
      }, {
        key: '130903',
        value: '运河区'
      }, {
        key: '130921',
        value: '沧县'
      }, {
        key: '130922',
        value: '青县'
      }, {
        key: '130923',
        value: '东光县'
      }, {
        key: '130924',
        value: '海兴县'
      }, {
        key: '130925',
        value: '盐山县'
      }, {
        key: '130926',
        value: '肃宁县'
      }, {
        key: '130927',
        value: '南皮县'
      }, {
        key: '130928',
        value: '吴桥县'
      }, {
        key: '130929',
        value: '献县'
      }, {
        key: '130930',
        value: '孟村'
      }, {
        key: '130981',
        value: '泊头市'
      }, {
        key: '130982',
        value: '任丘市'
      }, {
        key: '130983',
        value: '黄骅市'
      }, {
        key: '130984',
        value: '河间市'
      }]
    }, {
      key: '131000',
      value: '廊坊市',
      children: [{
        key: '131002',
        value: '安次区'
      }, {
        key: '131003',
        value: '广阳区'
      }, {
        key: '131022',
        value: '固安县'
      }, {
        key: '131023',
        value: '永清县'
      }, {
        key: '131024',
        value: '香河县'
      }, {
        key: '131025',
        value: '大城县'
      }, {
        key: '131026',
        value: '文安县'
      }, {
        key: '131028',
        value: '大厂县'
      }, {
        key: '131081',
        value: '霸州市'
      }, {
        key: '131082',
        value: '三河市'
      }]
    }, {
      key: '131100',
      value: '衡水市',
      children: [{
        key: '131102',
        value: '桃城区'
      }, {
        key: '131103',
        value: '冀州区'
      }, {
        key: '131121',
        value: '枣强县'
      }, {
        key: '131122',
        value: '武邑县'
      }, {
        key: '131123',
        value: '武强县'
      }, {
        key: '131124',
        value: '饶阳县'
      }, {
        key: '131125',
        value: '安平县'
      }, {
        key: '131126',
        value: '故城县'
      }, {
        key: '131127',
        value: '景县'
      }, {
        key: '131128',
        value: '阜城县'
      }, {
        key: '131182',
        value: '深州市'
      }, {
        key: '139001',
        value: '定州市'
      }, {
        key: '139002',
        value: '辛集市'
      }]
    }]
  },
  {
    key: '140000',
    value: '山西省',
    children: [{
      key: '140100',
      value: '太原市',
      children: [{
        key: '140105',
        value: '小店区'
      }, {
        key: '140106',
        value: '迎泽区'
      }, {
        key: '140107',
        value: '杏花岭区'
      }, {
        key: '140108',
        value: '尖草坪区'
      }, {
        key: '140109',
        value: '万柏林区'
      }, {
        key: '140110',
        value: '晋源区'
      }, {
        key: '140121',
        value: '清徐县'
      }, {
        key: '140122',
        value: '阳曲县'
      }, {
        key: '140123',
        value: '娄烦县'
      }, {
        key: '140181',
        value: '古交市'
      }]
    }, {
      key: '140200',
      value: '大同市',
      children: [{
        key: '140202',
        value: '城区'
      }, {
        key: '140203',
        value: '矿区'
      }, {
        key: '140211',
        value: '南郊区'
      }, {
        key: '140212',
        value: '新荣区'
      }, {
        key: '140221',
        value: '阳高县'
      }, {
        key: '140222',
        value: '天镇县'
      }, {
        key: '140223',
        value: '广灵县'
      }, {
        key: '140224',
        value: '灵丘县'
      }, {
        key: '140225',
        value: '浑源县'
      }, {
        key: '140226',
        value: '左云县'
      }, {
        key: '140227',
        value: '大同县'
      }]
    }, {
      key: '140300',
      value: '阳泉市',
      children: [{
        key: '140302',
        value: '城区'
      }, {
        key: '140303',
        value: '矿区'
      }, {
        key: '140311',
        value: '郊区'
      }, {
        key: '140321',
        value: '平定县'
      }, {
        key: '140322',
        value: '盂县'
      }]
    }, {
      key: '140400',
      value: '长治市',
      children: [{
        key: '140402',
        value: '城区'
      }, {
        key: '140411',
        value: '郊区'
      }, {
        key: '140421',
        value: '长治县'
      }, {
        key: '140423',
        value: '襄垣县'
      }, {
        key: '140424',
        value: '屯留县'
      }, {
        key: '140425',
        value: '平顺县'
      }, {
        key: '140426',
        value: '黎城县'
      }, {
        key: '140427',
        value: '壶关县'
      }, {
        key: '140428',
        value: '长子县'
      }, {
        key: '140429',
        value: '武乡县'
      }, {
        key: '140430',
        value: '沁县'
      }, {
        key: '140431',
        value: '沁源县'
      }, {
        key: '140481',
        value: '潞城市'
      }]
    }, {
      key: '140500',
      value: '晋城市',
      children: [{
        key: '140502',
        value: '城区'
      }, {
        key: '140521',
        value: '沁水县'
      }, {
        key: '140522',
        value: '阳城县'
      }, {
        key: '140524',
        value: '陵川县'
      }, {
        key: '140525',
        value: '泽州县'
      }, {
        key: '140581',
        value: '高平市'
      }]
    }, {
      key: '140600',
      value: '朔州市',
      children: [{
        key: '140602',
        value: '朔城区'
      }, {
        key: '140603',
        value: '平鲁区'
      }, {
        key: '140621',
        value: '山阴县'
      }, {
        key: '140622',
        value: '应县'
      }, {
        key: '140623',
        value: '右玉县'
      }, {
        key: '140624',
        value: '怀仁县'
      }]
    }, {
      key: '140700',
      value: '晋中市',
      children: [{
        key: '140702',
        value: '榆次区'
      }, {
        key: '140721',
        value: '榆社县'
      }, {
        key: '140722',
        value: '左权县'
      }, {
        key: '140723',
        value: '和顺县'
      }, {
        key: '140724',
        value: '昔阳县'
      }, {
        key: '140725',
        value: '寿阳县'
      }, {
        key: '140726',
        value: '太谷县'
      }, {
        key: '140727',
        value: '祁县'
      }, {
        key: '140728',
        value: '平遥县'
      }, {
        key: '140729',
        value: '灵石县'
      }, {
        key: '140781',
        value: '介休市'
      }]
    }, {
      key: '140800',
      value: '运城市',
      children: [{
        key: '140802',
        value: '盐湖区'
      }, {
        key: '140821',
        value: '临猗县'
      }, {
        key: '140822',
        value: '万荣县'
      }, {
        key: '140823',
        value: '闻喜县'
      }, {
        key: '140824',
        value: '稷山县'
      }, {
        key: '140825',
        value: '新绛县'
      }, {
        key: '140826',
        value: '绛县'
      }, {
        key: '140827',
        value: '垣曲县'
      }, {
        key: '140828',
        value: '夏县'
      }, {
        key: '140829',
        value: '平陆县'
      }, {
        key: '140830',
        value: '芮城县'
      }, {
        key: '140881',
        value: '永济市'
      }, {
        key: '140882',
        value: '河津市'
      }]
    }, {
      key: '140900',
      value: '忻州市',
      children: [{
        key: '140902',
        value: '忻府区'
      }, {
        key: '140921',
        value: '定襄县'
      }, {
        key: '140922',
        value: '五台县'
      }, {
        key: '140923',
        value: '代县'
      }, {
        key: '140924',
        value: '繁峙县'
      }, {
        key: '140925',
        value: '宁武县'
      }, {
        key: '140926',
        value: '静乐县'
      }, {
        key: '140927',
        value: '神池县'
      }, {
        key: '140928',
        value: '五寨县'
      }, {
        key: '140929',
        value: '岢岚县'
      }, {
        key: '140930',
        value: '河曲县'
      }, {
        key: '140931',
        value: '保德县'
      }, {
        key: '140932',
        value: '偏关县'
      }, {
        key: '140981',
        value: '原平市'
      }]
    }, {
      key: '141000',
      value: '临汾市',
      children: [{
        key: '141002',
        value: '尧都区'
      }, {
        key: '141021',
        value: '曲沃县'
      }, {
        key: '141022',
        value: '翼城县'
      }, {
        key: '141023',
        value: '襄汾县'
      }, {
        key: '141024',
        value: '洪洞县'
      }, {
        key: '141025',
        value: '古县'
      }, {
        key: '141026',
        value: '安泽县'
      }, {
        key: '141027',
        value: '浮山县'
      }, {
        key: '141028',
        value: '吉县'
      }, {
        key: '141029',
        value: '乡宁县'
      }, {
        key: '141030',
        value: '大宁县'
      }, {
        key: '141031',
        value: '隰县'
      }, {
        key: '141032',
        value: '永和县'
      }, {
        key: '141033',
        value: '蒲县'
      }, {
        key: '141034',
        value: '汾西县'
      }, {
        key: '141081',
        value: '侯马市'
      }, {
        key: '141082',
        value: '霍州市'
      }]
    }, {
      key: '141100',
      value: '吕梁市',
      children: [{
        key: '141102',
        value: '离石区'
      }, {
        key: '141121',
        value: '文水县'
      }, {
        key: '141122',
        value: '交城县'
      }, {
        key: '141123',
        value: '兴县'
      }, {
        key: '141124',
        value: '临县'
      }, {
        key: '141125',
        value: '柳林县'
      }, {
        key: '141126',
        value: '石楼县'
      }, {
        key: '141127',
        value: '岚县'
      }, {
        key: '141128',
        value: '方山县'
      }, {
        key: '141129',
        value: '中阳县'
      }, {
        key: '141130',
        value: '交口县'
      }, {
        key: '141181',
        value: '孝义市'
      }, {
        key: '141182',
        value: '汾阳市'
      }]
    }]
  }, {
    key: '150000',
    value: '内蒙古',
    children: [{
      key: '150100',
      value: '呼和浩特市',
      children: [{
        key: '150102',
        value: '新城区'
      }, {
        key: '150103',
        value: '回民区'
      }, {
        key: '150104',
        value: '玉泉区'
      }, {
        key: '150105',
        value: '赛罕区'
      }, {
        key: '150121',
        value: '土默特左旗'
      }, {
        key: '150122',
        value: '托克托县'
      }, {
        key: '150123',
        value: '和林格尔县'
      }, {
        key: '150124',
        value: '清水河县'
      }, {
        key: '150125',
        value: '武川县'
      }]
    }, {
      key: '150200',
      value: '包头市',
      children: [{
        key: '150202',
        value: '东河区'
      }, {
        key: '150203',
        value: '昆都仑区'
      }, {
        key: '150204',
        value: '青山区'
      }, {
        key: '150205',
        value: '石拐区'
      }, {
        key: '150206',
        value: '白云鄂博矿区'
      }, {
        key: '150207',
        value: '九原区'
      }, {
        key: '150221',
        value: '土默特右旗'
      }, {
        key: '150222',
        value: '固阳县'
      }, {
        key: '150223',
        value: '达尔罕茂明安联合旗'
      }]
    }, {
      key: '150300',
      value: '乌海市',
      children: [{
        key: '150302',
        value: '海勃湾区'
      }, {
        key: '150303',
        value: '海南区'
      }, {
        key: '150304',
        value: '乌达区'
      }]
    }, {
      key: '150400',
      value: '赤峰市',
      children: [{
        key: '150402',
        value: '红山区'
      }, {
        key: '150403',
        value: '元宝山区'
      }, {
        key: '150404',
        value: '松山区'
      }, {
        key: '150421',
        value: '阿鲁科尔沁旗'
      }, {
        key: '150422',
        value: '巴林左旗'
      }, {
        key: '150423',
        value: '巴林右旗'
      }, {
        key: '150424',
        value: '林西县'
      }, {
        key: '150425',
        value: '克什克腾旗'
      }, {
        key: '150426',
        value: '翁牛特旗'
      }, {
        key: '150428',
        value: '喀喇沁旗'
      }, {
        key: '150429',
        value: '宁城县'
      }, {
        key: '150430',
        value: '敖汉旗'
      }]
    }, {
      key: '150500',
      value: '通辽市',
      children: [{
        key: '150502',
        value: '科尔沁区'
      }, {
        key: '150521',
        value: '科尔沁左翼中旗'
      }, {
        key: '150522',
        value: '科尔沁左翼后旗'
      }, {
        key: '150523',
        value: '开鲁县'
      }, {
        key: '150524',
        value: '库伦旗'
      }, {
        key: '150525',
        value: '奈曼旗'
      }, {
        key: '150526',
        value: '扎鲁特旗'
      }, {
        key: '150581',
        value: '霍林郭勒市'
      }]
    }, {
      key: '150600',
      value: '鄂尔多斯市',
      children: [{
        key: '150602',
        value: '东胜区'
      }, {
        key: '150603',
        value: '康巴什区'
      }, {
        key: '150621',
        value: '达拉特旗'
      }, {
        key: '150622',
        value: '准格尔旗'
      }, {
        key: '150623',
        value: '鄂托克前旗'
      }, {
        key: '150624',
        value: '鄂托克旗'
      }, {
        key: '150625',
        value: '杭锦旗'
      }, {
        key: '150626',
        value: '乌审旗'
      }, {
        key: '150627',
        value: '伊金霍洛旗'
      }]
    }, {
      key: '150700',
      value: '呼伦贝尔市',
      children: [{
        key: '150702',
        value: '海拉尔区'
      }, {
        key: '150703',
        value: '扎赉诺尔区'
      }, {
        key: '150721',
        value: '阿荣旗'
      }, {
        key: '150722',
        value: '莫力达瓦达'
      }, {
        key: '150723',
        value: '鄂伦春'
      }, {
        key: '150724',
        value: '鄂温克'
      }, {
        key: '150725',
        value: '陈巴尔虎'
      }, {
        key: '150726',
        value: '新巴尔虎左'
      }, {
        key: '150727',
        value: '新巴尔虎右'
      }, {
        key: '150781',
        value: '满洲里市'
      }, {
        key: '150782',
        value: '牙克石市'
      }, {
        key: '150783',
        value: '扎兰屯市'
      }, {
        key: '150784',
        value: '额尔古纳市'
      }, {
        key: '150785',
        value: '根河市'
      }]
    }, {
      key: '150800',
      value: '巴彦淖尔市',
      children: [{
        key: '150802',
        value: '临河区'
      }, {
        key: '150821',
        value: '五原县'
      }, {
        key: '150822',
        value: '磴口县'
      }, {
        key: '150823',
        value: '乌拉特前旗'
      }, {
        key: '150824',
        value: '乌拉特中旗'
      }, {
        key: '150825',
        value: '乌拉特后旗'
      }, {
        key: '150826',
        value: '杭锦后旗'
      }]
    }, {
      key: '150900',
      value: '乌兰察布市',
      children: [{
        key: '150902',
        value: '集宁区'
      }, {
        key: '150921',
        value: '卓资县'
      }, {
        key: '150922',
        value: '化德县'
      }, {
        key: '150923',
        value: '商都县'
      }, {
        key: '150924',
        value: '兴和县'
      }, {
        key: '150925',
        value: '凉城县'
      }, {
        key: '150926',
        value: '察哈尔右翼前旗'
      }, {
        key: '150927',
        value: '察哈尔右翼中旗'
      }, {
        key: '150928',
        value: '察哈尔右翼后旗'
      }, {
        key: '150929',
        value: '四子王旗'
      }, {
        key: '150981',
        value: '丰镇市'
      }]
    }, {
      key: '152200',
      value: '兴安盟',
      children: [{
        key: '152201',
        value: '乌兰浩特市'
      }, {
        key: '152202',
        value: '阿尔山市'
      }, {
        key: '152221',
        value: '科尔沁右翼前旗'
      }, {
        key: '152222',
        value: '科尔沁右翼中旗'
      }, {
        key: '152223',
        value: '扎赉特旗'
      }, {
        key: '152224',
        value: '突泉县'
      }]
    }, {
      key: '152500',
      value: '锡林郭勒盟',
      children: [{
        key: '152501',
        value: '二连浩特市'
      }, {
        key: '152502',
        value: '锡林浩特市'
      }, {
        key: '152522',
        value: '阿巴嘎旗'
      }, {
        key: '152523',
        value: '苏尼特左旗'
      }, {
        key: '152524',
        value: '苏尼特右旗'
      }, {
        key: '152525',
        value: '东乌珠穆沁旗'
      }, {
        key: '152526',
        value: '西乌珠穆沁旗'
      }, {
        key: '152527',
        value: '太仆寺旗'
      }, {
        key: '152528',
        value: '镶黄旗'
      }, {
        key: '152529',
        value: '正镶白旗'
      }, {
        key: '152530',
        value: '正蓝旗'
      }, {
        key: '152531',
        value: '多伦县'
      }]
    }, {
      key: '152900',
      value: '阿拉善盟',
      children: [{
        key: '152921',
        value: '阿拉善左旗'
      }, {
        key: '152922',
        value: '阿拉善右旗'
      }, {
        key: '152923',
        value: '额济纳旗'
      }]
    }]
  }, {
    key: '210000',
    value: '辽宁省',
    children: [{
      key: '210100',
      value: '沈阳市',
      children: [{
        key: '210102',
        value: '和平区'
      }, {
        key: '210103',
        value: '沈河区'
      }, {
        key: '210104',
        value: '大东区'
      }, {
        key: '210105',
        value: '皇姑区'
      }, {
        key: '210106',
        value: '铁西区'
      }, {
        key: '210111',
        value: '苏家屯区'
      }, {
        key: '210112',
        value: '浑南区'
      }, {
        key: '210113',
        value: '沈北新区'
      }, {
        key: '210114',
        value: '于洪区'
      }, {
        key: '210115',
        value: '辽中区'
      }, {
        key: '210123',
        value: '康平县'
      }, {
        key: '210124',
        value: '法库县'
      }, {
        key: '210181',
        value: '新民市'
      }]
    }, {
      key: '210200',
      value: '大连市',
      children: [{
        key: '210202',
        value: '中山区'
      }, {
        key: '210203',
        value: '西岗区'
      }, {
        key: '210204',
        value: '沙河口区'
      }, {
        key: '210211',
        value: '甘井子区'
      }, {
        key: '210212',
        value: '旅顺口区'
      }, {
        key: '210213',
        value: '金州区'
      }, {
        key: '210214',
        value: '普兰店区'
      }, {
        key: '210224',
        value: '长海县'
      }, {
        key: '210281',
        value: '瓦房店市'
      }, {
        key: '210283',
        value: '庄河市'
      }]
    }, {
      key: '210300',
      value: '鞍山市',
      children: [{
        key: '210302',
        value: '铁东区'
      }, {
        key: '210303',
        value: '铁西区'
      }, {
        key: '210304',
        value: '立山区'
      }, {
        key: '210311',
        value: '千山区'
      }, {
        key: '210321',
        value: '台安县'
      }, {
        key: '210323',
        value: '岫岩县'
      }, {
        key: '210381',
        value: '海城市'
      }]
    }, {
      key: '210400',
      value: '抚顺市',
      children: [{
        key: '210402',
        value: '新抚区'
      }, {
        key: '210403',
        value: '东洲区'
      }, {
        key: '210404',
        value: '望花区'
      }, {
        key: '210411',
        value: '顺城区'
      }, {
        key: '210421',
        value: '抚顺县'
      }, {
        key: '210422',
        value: '新宾县'
      }, {
        key: '210423',
        value: '清原县'
      }]
    }, {
      key: '210500',
      value: '本溪市',
      children: [{
        key: '210502',
        value: '平山区'
      }, {
        key: '210503',
        value: '溪湖区'
      }, {
        key: '210504',
        value: '明山区'
      }, {
        key: '210505',
        value: '南芬区'
      }, {
        key: '210521',
        value: '本溪县'
      }, {
        key: '210522',
        value: '桓仁县'
      }]
    }, {
      key: '210600',
      value: '丹东市',
      children: [{
        key: '210602',
        value: '元宝区'
      }, {
        key: '210603',
        value: '振兴区'
      }, {
        key: '210604',
        value: '振安区'
      }, {
        key: '210624',
        value: '宽甸县'
      }, {
        key: '210681',
        value: '东港市'
      }, {
        key: '210682',
        value: '凤城市'
      }]
    }, {
      key: '210700',
      value: '锦州市',
      children: [{
        key: '210702',
        value: '古塔区'
      }, {
        key: '210703',
        value: '凌河区'
      }, {
        key: '210711',
        value: '太和区'
      }, {
        key: '210726',
        value: '黑山县'
      }, {
        key: '210727',
        value: '义县'
      }, {
        key: '210781',
        value: '凌海市'
      }, {
        key: '210782',
        value: '北镇市'
      }]
    }, {
      key: '210800',
      value: '营口市',
      children: [{
        key: '210802',
        value: '站前区'
      }, {
        key: '210803',
        value: '西市区'
      }, {
        key: '210804',
        value: '鲅鱼圈区'
      }, {
        key: '210811',
        value: '老边区'
      }, {
        key: '210881',
        value: '盖州市'
      }, {
        key: '210882',
        value: '大石桥市'
      }]
    }, {
      key: '210900',
      value: '阜新市',
      children: [{
        key: '210902',
        value: '海州区'
      }, {
        key: '210903',
        value: '新邱区'
      }, {
        key: '210904',
        value: '太平区'
      }, {
        key: '210905',
        value: '清河门区'
      }, {
        key: '210911',
        value: '细河区'
      }, {
        key: '210921',
        value: '阜新县'
      }, {
        key: '210922',
        value: '彰武县'
      }]
    }, {
      key: '211000',
      value: '辽阳市',
      children: [{
        key: '211002',
        value: '白塔区'
      }, {
        key: '211003',
        value: '文圣区'
      }, {
        key: '211004',
        value: '宏伟区'
      }, {
        key: '211005',
        value: '弓长岭区'
      }, {
        key: '211011',
        value: '太子河区'
      }, {
        key: '211021',
        value: '辽阳县'
      }, {
        key: '211081',
        value: '灯塔市'
      }]
    }, {
      key: '211100',
      value: '盘锦市',
      children: [{
        key: '211102',
        value: '双台子区'
      }, {
        key: '211103',
        value: '兴隆台区'
      }, {
        key: '211104',
        value: '大洼区'
      }, {
        key: '211122',
        value: '盘山县'
      }]
    }, {
      key: '211200',
      value: '铁岭市',
      children: [{
        key: '211202',
        value: '银州区'
      }, {
        key: '211204',
        value: '清河区'
      }, {
        key: '211221',
        value: '铁岭县'
      }, {
        key: '211223',
        value: '西丰县'
      }, {
        key: '211224',
        value: '昌图县'
      }, {
        key: '211281',
        value: '调兵山市'
      }, {
        key: '211282',
        value: '开原市'
      }]
    }, {
      key: '211300',
      value: '朝阳市',
      children: [{
        key: '211302',
        value: '双塔区'
      }, {
        key: '211303',
        value: '龙城区'
      }, {
        key: '211321',
        value: '朝阳县'
      }, {
        key: '211322',
        value: '建平县'
      }, {
        key: '211324',
        value: '喀左县'
      }, {
        key: '211381',
        value: '北票市'
      }, {
        key: '211382',
        value: '凌源市'
      }]
    }, {
      key: '211400',
      value: '葫芦岛市',
      children: [{
        key: '211402',
        value: '连山区'
      }, {
        key: '211403',
        value: '龙港区'
      }, {
        key: '211404',
        value: '南票区'
      }, {
        key: '211421',
        value: '绥中县'
      }, {
        key: '211422',
        value: '建昌县'
      }, {
        key: '211481',
        value: '兴城市'
      }]
    }]
  }, {
    key: '220000',
    value: '吉林省',
    children: [{
      key: '220100',
      value: '长春市',
      children: [{
        key: '220102',
        value: '南关区'
      }, {
        key: '220103',
        value: '宽城区'
      }, {
        key: '220104',
        value: '朝阳区'
      }, {
        key: '220105',
        value: '二道区'
      }, {
        key: '220106',
        value: '绿园区'
      }, {
        key: '220112',
        value: '双阳区'
      }, {
        key: '220113',
        value: '九台区'
      }, {
        key: '220122',
        value: '农安县'
      }, {
        key: '220182',
        value: '榆树市'
      }, {
        key: '220183',
        value: '德惠市'
      }]
    }, {
      key: '220200',
      value: '吉林市',
      children: [{
        key: '220202',
        value: '昌邑区'
      }, {
        key: '220203',
        value: '龙潭区'
      }, {
        key: '220204',
        value: '船营区'
      }, {
        key: '220211',
        value: '丰满区'
      }, {
        key: '220221',
        value: '永吉县'
      }, {
        key: '220281',
        value: '蛟河市'
      }, {
        key: '220282',
        value: '桦甸市'
      }, {
        key: '220283',
        value: '舒兰市'
      }, {
        key: '220284',
        value: '磐石市'
      }]
    }, {
      key: '220300',
      value: '四平市',
      children: [{
        key: '220302',
        value: '铁西区'
      }, {
        key: '220303',
        value: '铁东区'
      }, {
        key: '220322',
        value: '梨树县'
      }, {
        key: '220323',
        value: '伊通县'
      }, {
        key: '220381',
        value: '公主岭市'
      }, {
        key: '220382',
        value: '双辽市'
      }]
    }, {
      key: '220400',
      value: '辽源市',
      children: [{
        key: '220402',
        value: '龙山区'
      }, {
        key: '220403',
        value: '西安区'
      }, {
        key: '220421',
        value: '东丰县'
      }, {
        key: '220422',
        value: '东辽县'
      }]
    }, {
      key: '220500',
      value: '通化市',
      children: [{
        key: '220502',
        value: '东昌区'
      }, {
        key: '220503',
        value: '二道江区'
      }, {
        key: '220521',
        value: '通化县'
      }, {
        key: '220523',
        value: '辉南县'
      }, {
        key: '220524',
        value: '柳河县'
      }, {
        key: '220581',
        value: '梅河口市'
      }, {
        key: '220582',
        value: '集安市'
      }]
    }, {
      key: '220600',
      value: '白山市',
      children: [{
        key: '220602',
        value: '浑江区'
      }, {
        key: '220605',
        value: '江源区'
      }, {
        key: '220621',
        value: '抚松县'
      }, {
        key: '220622',
        value: '靖宇县'
      }, {
        key: '220623',
        value: '长白县'
      }, {
        key: '220681',
        value: '临江市'
      }]
    }, {
      key: '220700',
      value: '松原市',
      children: [{
        key: '220702',
        value: '宁江区'
      }, {
        key: '220721',
        value: '前郭县'
      }, {
        key: '220722',
        value: '长岭县'
      }, {
        key: '220723',
        value: '乾安县'
      }, {
        key: '220781',
        value: '扶余市'
      }]
    }, {
      key: '220800',
      value: '白城市',
      children: [{
        key: '220802',
        value: '洮北区'
      }, {
        key: '220821',
        value: '镇赉县'
      }, {
        key: '220822',
        value: '通榆县'
      }, {
        key: '220881',
        value: '洮南市'
      }, {
        key: '220882',
        value: '大安市'
      }]
    }, {
      key: '222400',
      value: '延边州',
      children: [{
        key: '222401',
        value: '延吉市'
      }, {
        key: '222402',
        value: '图们市'
      }, {
        key: '222403',
        value: '敦化市'
      }, {
        key: '222404',
        value: '珲春市'
      }, {
        key: '222405',
        value: '龙井市'
      }, {
        key: '222406',
        value: '和龙市'
      }, {
        key: '222424',
        value: '汪清县'
      }, {
        key: '222426',
        value: '安图县'
      }]
    }]
  }, {
    key: '230000',
    value: '黑龙江省',
    children: [{
      key: '230100',
      value: '哈尔滨市',
      children: [{
        key: '230102',
        value: '道里区'
      }, {
        key: '230103',
        value: '南岗区'
      }, {
        key: '230104',
        value: '道外区'
      }, {
        key: '230108',
        value: '平房区'
      }, {
        key: '230109',
        value: '松北区'
      }, {
        key: '230110',
        value: '香坊区'
      }, {
        key: '230111',
        value: '呼兰区'
      }, {
        key: '230112',
        value: '阿城区'
      }, {
        key: '230113',
        value: '双城区'
      }, {
        key: '230123',
        value: '依兰县'
      }, {
        key: '230124',
        value: '方正县'
      }, {
        key: '230125',
        value: '宾县'
      }, {
        key: '230126',
        value: '巴彦县'
      }, {
        key: '230127',
        value: '木兰县'
      }, {
        key: '230128',
        value: '通河县'
      }, {
        key: '230129',
        value: '延寿县'
      }, {
        key: '230183',
        value: '尚志市'
      }, {
        key: '230184',
        value: '五常市'
      }]
    }, {
      key: '230200',
      value: '齐齐哈尔市',
      children: [{
        key: '230202',
        value: '龙沙区'
      }, {
        key: '230203',
        value: '建华区'
      }, {
        key: '230204',
        value: '铁锋区'
      }, {
        key: '230205',
        value: '昂昂溪区'
      }, {
        key: '230206',
        value: '富拉尔基区'
      }, {
        key: '230207',
        value: '碾子山区'
      }, {
        key: '230208',
        value: '梅里斯达斡尔族区'
      }, {
        key: '230221',
        value: '龙江县'
      }, {
        key: '230223',
        value: '依安县'
      }, {
        key: '230224',
        value: '泰来县'
      }, {
        key: '230225',
        value: '甘南县'
      }, {
        key: '230227',
        value: '富裕县'
      }, {
        key: '230229',
        value: '克山县'
      }, {
        key: '230230',
        value: '克东县'
      }, {
        key: '230231',
        value: '拜泉县'
      }, {
        key: '230281',
        value: '讷河市'
      }]
    }, {
      key: '230300',
      value: '鸡西市',
      children: [{
        key: '230302',
        value: '鸡冠区'
      }, {
        key: '230303',
        value: '恒山区'
      }, {
        key: '230304',
        value: '滴道区'
      }, {
        key: '230305',
        value: '梨树区'
      }, {
        key: '230306',
        value: '城子河区'
      }, {
        key: '230307',
        value: '麻山区'
      }, {
        key: '230321',
        value: '鸡东县'
      }, {
        key: '230381',
        value: '虎林市'
      }, {
        key: '230382',
        value: '密山市'
      }]
    }, {
      key: '230400',
      value: '鹤岗市',
      children: [{
        key: '230402',
        value: '向阳区'
      }, {
        key: '230403',
        value: '工农区'
      }, {
        key: '230404',
        value: '南山区'
      }, {
        key: '230405',
        value: '兴安区'
      }, {
        key: '230406',
        value: '东山区'
      }, {
        key: '230407',
        value: '兴山区'
      }, {
        key: '230421',
        value: '萝北县'
      }, {
        key: '230422',
        value: '绥滨县'
      }]
    }, {
      key: '230500',
      value: '双鸭山市',
      children: [{
        key: '230502',
        value: '尖山区'
      }, {
        key: '230503',
        value: '岭东区'
      }, {
        key: '230505',
        value: '四方台区'
      }, {
        key: '230506',
        value: '宝山区'
      }, {
        key: '230521',
        value: '集贤县'
      }, {
        key: '230522',
        value: '友谊县'
      }, {
        key: '230523',
        value: '宝清县'
      }, {
        key: '230524',
        value: '饶河县'
      }]
    }, {
      key: '230600',
      value: '大庆市',
      children: [{
        key: '230602',
        value: '萨尔图区'
      }, {
        key: '230603',
        value: '龙凤区'
      }, {
        key: '230604',
        value: '让胡路区'
      }, {
        key: '230605',
        value: '红岗区'
      }, {
        key: '230606',
        value: '大同区'
      }, {
        key: '230621',
        value: '肇州县'
      }, {
        key: '230622',
        value: '肇源县'
      }, {
        key: '230623',
        value: '林甸县'
      }, {
        key: '230624',
        value: '杜尔伯特'
      }]
    }, {
      key: '230700',
      value: '伊春市',
      children: [{
        key: '230702',
        value: '伊春区'
      }, {
        key: '230703',
        value: '南岔区'
      }, {
        key: '230704',
        value: '友好区'
      }, {
        key: '230705',
        value: '西林区'
      }, {
        key: '230706',
        value: '翠峦区'
      }, {
        key: '230707',
        value: '新青区'
      }, {
        key: '230708',
        value: '美溪区'
      }, {
        key: '230709',
        value: '金山屯区'
      }, {
        key: '230710',
        value: '五营区'
      }, {
        key: '230711',
        value: '乌马河区'
      }, {
        key: '230712',
        value: '汤旺河区'
      }, {
        key: '230713',
        value: '带岭区'
      }, {
        key: '230714',
        value: '乌伊岭区'
      }, {
        key: '230715',
        value: '红星区'
      }, {
        key: '230716',
        value: '上甘岭区'
      }, {
        key: '230722',
        value: '嘉荫县'
      }, {
        key: '230781',
        value: '铁力市'
      }]
    }, {
      key: '230800',
      value: '佳木斯市',
      children: [{
        key: '230803',
        value: '向阳区'
      }, {
        key: '230804',
        value: '前进区'
      }, {
        key: '230805',
        value: '东风区'
      }, {
        key: '230811',
        value: '郊区'
      }, {
        key: '230822',
        value: '桦南县'
      }, {
        key: '230826',
        value: '桦川县'
      }, {
        key: '230828',
        value: '汤原县'
      }, {
        key: '230881',
        value: '同江市'
      }, {
        key: '230882',
        value: '富锦市'
      }, {
        key: '230883',
        value: '抚远市'
      }]
    }, {
      key: '230900',
      value: '七台河市',
      children: [{
        key: '230902',
        value: '新兴区'
      }, {
        key: '230903',
        value: '桃山区'
      }, {
        key: '230904',
        value: '茄子河区'
      }, {
        key: '230921',
        value: '勃利县'
      }]
    }, {
      key: '231000',
      value: '牡丹江市',
      children: [{
        key: '231002',
        value: '东安区'
      }, {
        key: '231003',
        value: '阳明区'
      }, {
        key: '231004',
        value: '爱民区'
      }, {
        key: '231005',
        value: '西安区'
      }, {
        key: '231025',
        value: '林口县'
      }, {
        key: '231081',
        value: '绥芬河市'
      }, {
        key: '231083',
        value: '海林市'
      }, {
        key: '231084',
        value: '宁安市'
      }, {
        key: '231085',
        value: '穆棱市'
      }, {
        key: '231086',
        value: '东宁市'
      }]
    }, {
      key: '231100',
      value: '黑河市',
      children: [{
        key: '231102',
        value: '爱辉区'
      }, {
        key: '231121',
        value: '嫩江县'
      }, {
        key: '231123',
        value: '逊克县'
      }, {
        key: '231124',
        value: '孙吴县'
      }, {
        key: '231181',
        value: '北安市'
      }, {
        key: '231182',
        value: '五大连池市'
      }]
    }, {
      key: '231200',
      value: '绥化市',
      children: [{
        key: '231202',
        value: '北林区'
      }, {
        key: '231221',
        value: '望奎县'
      }, {
        key: '231222',
        value: '兰西县'
      }, {
        key: '231223',
        value: '青冈县'
      }, {
        key: '231224',
        value: '庆安县'
      }, {
        key: '231225',
        value: '明水县'
      }, {
        key: '231226',
        value: '绥棱县'
      }, {
        key: '231281',
        value: '安达市'
      }, {
        key: '231282',
        value: '肇东市'
      }, {
        key: '231283',
        value: '海伦市'
      }]
    }, {
      key: '232700',
      value: '大兴安岭',
      children: [{
        key: '232721',
        value: '呼玛县'
      }, {
        key: '232722',
        value: '塔河县'
      }, {
        key: '232723',
        value: '漠河县'
      }]
    }]
  }, {
    key: '310000',
    value: '上海市',
    children: [{
      key: '310101',
      value: '黄浦区'
    }, {
      key: '310104',
      value: '徐汇区'
    }, {
      key: '310105',
      value: '长宁区'
    }, {
      key: '310106',
      value: '静安区'
    }, {
      key: '310107',
      value: '普陀区'
    }, {
      key: '310109',
      value: '虹口区'
    }, {
      key: '310110',
      value: '杨浦区'
    }, {
      key: '310112',
      value: '闵行区'
    }, {
      key: '310113',
      value: '宝山区'
    }, {
      key: '310114',
      value: '嘉定区'
    }, {
      key: '310115',
      value: '浦东新区'
    }, {
      key: '310116',
      value: '金山区'
    }, {
      key: '310117',
      value: '松江区'
    }, {
      key: '310118',
      value: '青浦区'
    }, {
      key: '310120',
      value: '奉贤区'
    }, {
      key: '310151',
      value: '崇明区'
    }]
  }, {
    key: '320000',
    value: '江苏省',
    children: [{
      key: '320100',
      value: '南京市',
      children: [{
        key: '320102',
        value: '玄武区'
      }, {
        key: '320104',
        value: '秦淮区'
      }, {
        key: '320105',
        value: '建邺区'
      }, {
        key: '320106',
        value: '鼓楼区'
      }, {
        key: '320111',
        value: '浦口区'
      }, {
        key: '320113',
        value: '栖霞区'
      }, {
        key: '320114',
        value: '雨花台区'
      }, {
        key: '320115',
        value: '江宁区'
      }, {
        key: '320116',
        value: '六合区'
      }, {
        key: '320117',
        value: '溧水区'
      }, {
        key: '320118',
        value: '高淳区'
      }]
    }, {
      key: '320200',
      value: '无锡市',
      children: [{
        key: '320205',
        value: '锡山区'
      }, {
        key: '320206',
        value: '惠山区'
      }, {
        key: '320211',
        value: '滨湖区'
      }, {
        key: '320213',
        value: '梁溪区'
      }, {
        key: '320214',
        value: '新吴区'
      }, {
        key: '320281',
        value: '江阴市'
      }, {
        key: '320282',
        value: '宜兴市'
      }]
    }, {
      key: '320300',
      value: '徐州市',
      children: [{
        key: '320302',
        value: '鼓楼区'
      }, {
        key: '320303',
        value: '云龙区'
      }, {
        key: '320305',
        value: '贾汪区'
      }, {
        key: '320311',
        value: '泉山区'
      }, {
        key: '320312',
        value: '铜山区'
      }, {
        key: '320321',
        value: '丰县'
      }, {
        key: '320322',
        value: '沛县'
      }, {
        key: '320324',
        value: '睢宁县'
      }, {
        key: '320381',
        value: '新沂市'
      }, {
        key: '320382',
        value: '邳州市'
      }]
    }, {
      key: '320400',
      value: '常州市',
      children: [{
        key: '320402',
        value: '天宁区'
      }, {
        key: '320404',
        value: '钟楼区'
      }, {
        key: '320411',
        value: '新北区'
      }, {
        key: '320412',
        value: '武进区'
      }, {
        key: '320413',
        value: '金坛区'
      }, {
        key: '320481',
        value: '溧阳市'
      }]
    }, {
      key: '320500',
      value: '苏州市',
      children: [{
        key: '320505',
        value: '虎丘区'
      }, {
        key: '320506',
        value: '吴中区'
      }, {
        key: '320507',
        value: '相城区'
      }, {
        key: '320508',
        value: '姑苏区'
      }, {
        key: '320509',
        value: '吴江区'
      }, {
        key: '320581',
        value: '常熟市'
      }, {
        key: '320582',
        value: '张家港市'
      }, {
        key: '320583',
        value: '昆山市'
      }, {
        key: '320585',
        value: '太仓市'
      }]
    }, {
      key: '320600',
      value: '南通市',
      children: [{
        key: '320602',
        value: '崇川区'
      }, {
        key: '320611',
        value: '港闸区'
      }, {
        key: '320612',
        value: '通州区'
      }, {
        key: '320621',
        value: '海安县'
      }, {
        key: '320623',
        value: '如东县'
      }, {
        key: '320681',
        value: '启东市'
      }, {
        key: '320682',
        value: '如皋市'
      }, {
        key: '320684',
        value: '海门市'
      }]
    }, {
      key: '320700',
      value: '连云港市',
      children: [{
        key: '320703',
        value: '连云区'
      }, {
        key: '320706',
        value: '海州区'
      }, {
        key: '320707',
        value: '赣榆区'
      }, {
        key: '320722',
        value: '东海县'
      }, {
        key: '320723',
        value: '灌云县'
      }, {
        key: '320724',
        value: '灌南县'
      }]
    }, {
      key: '320800',
      value: '淮安市',
      children: [{
        key: '320803',
        value: '淮安区'
      }, {
        key: '320804',
        value: '淮阴区'
      }, {
        key: '320812',
        value: '清江浦区'
      }, {
        key: '320813',
        value: '洪泽区'
      }, {
        key: '320826',
        value: '涟水县'
      }, {
        key: '320830',
        value: '盱眙县'
      }, {
        key: '320831',
        value: '金湖县'
      }]
    }, {
      key: '320900',
      value: '盐城市',
      children: [{
        key: '320902',
        value: '亭湖区'
      }, {
        key: '320903',
        value: '盐都区'
      }, {
        key: '320904',
        value: '大丰区'
      }, {
        key: '320921',
        value: '响水县'
      }, {
        key: '320922',
        value: '滨海县'
      }, {
        key: '320923',
        value: '阜宁县'
      }, {
        key: '320924',
        value: '射阳县'
      }, {
        key: '320925',
        value: '建湖县'
      }, {
        key: '320981',
        value: '东台市'
      }]
    }, {
      key: '321000',
      value: '扬州市',
      children: [{
        key: '321002',
        value: '广陵区'
      }, {
        key: '321003',
        value: '邗江区'
      }, {
        key: '321012',
        value: '江都区'
      }, {
        key: '321023',
        value: '宝应县'
      }, {
        key: '321081',
        value: '仪征市'
      }, {
        key: '321084',
        value: '高邮市'
      }]
    }, {
      key: '321100',
      value: '镇江市',
      children: [{
        key: '321102',
        value: '京口区'
      }, {
        key: '321111',
        value: '润州区'
      }, {
        key: '321112',
        value: '丹徒区'
      }, {
        key: '321181',
        value: '丹阳市'
      }, {
        key: '321182',
        value: '扬中市'
      }, {
        key: '321183',
        value: '句容市'
      }]
    }, {
      key: '321200',
      value: '泰州市',
      children: [{
        key: '321202',
        value: '海陵区'
      }, {
        key: '321203',
        value: '高港区'
      }, {
        key: '321204',
        value: '姜堰区'
      }, {
        key: '321281',
        value: '兴化市'
      }, {
        key: '321282',
        value: '靖江市'
      }, {
        key: '321283',
        value: '泰兴市'
      }]
    }, {
      key: '321300',
      value: '宿迁市',
      children: [{
        key: '321302',
        value: '宿城区'
      }, {
        key: '321311',
        value: '宿豫区'
      }, {
        key: '321322',
        value: '沭阳县'
      }, {
        key: '321323',
        value: '泗阳县'
      }, {
        key: '321324',
        value: '泗洪县'
      }]
    }]
  }, {
    key: '330000',
    value: '浙江省',
    children: [{
      key: '330100',
      value: '杭州市',
      children: [{
        key: '330102',
        value: '上城区'
      }, {
        key: '330103',
        value: '下城区'
      }, {
        key: '330104',
        value: '江干区'
      }, {
        key: '330105',
        value: '拱墅区'
      }, {
        key: '330106',
        value: '西湖区'
      }, {
        key: '330108',
        value: '滨江区'
      }, {
        key: '330109',
        value: '萧山区'
      }, {
        key: '330110',
        value: '余杭区'
      }, {
        key: '330111',
        value: '富阳区'
      }, {
        key: '330122',
        value: '桐庐县'
      }, {
        key: '330127',
        value: '淳安县'
      }, {
        key: '330182',
        value: '建德市'
      }, {
        key: '330185',
        value: '临安市'
      }]
    }, {
      key: '330200',
      value: '宁波市',
      children: [{
        key: '330203',
        value: '海曙区'
      }, {
        key: '330204',
        value: '江东区'
      }, {
        key: '330205',
        value: '江北区'
      }, {
        key: '330206',
        value: '北仑区'
      }, {
        key: '330211',
        value: '镇海区'
      }, {
        key: '330212',
        value: '鄞州区'
      }, {
        key: '330225',
        value: '象山县'
      }, {
        key: '330226',
        value: '宁海县'
      }, {
        key: '330281',
        value: '余姚市'
      }, {
        key: '330282',
        value: '慈溪市'
      }, {
        key: '330283',
        value: '奉化市'
      }]
    }, {
      key: '330300',
      value: '温州市',
      children: [{
        key: '330302',
        value: '鹿城区'
      }, {
        key: '330303',
        value: '龙湾区'
      }, {
        key: '330304',
        value: '瓯海区'
      }, {
        key: '330305',
        value: '洞头区'
      }, {
        key: '330324',
        value: '永嘉县'
      }, {
        key: '330326',
        value: '平阳县'
      }, {
        key: '330327',
        value: '苍南县'
      }, {
        key: '330328',
        value: '文成县'
      }, {
        key: '330329',
        value: '泰顺县'
      }, {
        key: '330381',
        value: '瑞安市'
      }, {
        key: '330382',
        value: '乐清市'
      }]
    }, {
      key: '330400',
      value: '嘉兴市',
      children: [{
        key: '330402',
        value: '南湖区'
      }, {
        key: '330411',
        value: '秀洲区'
      }, {
        key: '330421',
        value: '嘉善县'
      }, {
        key: '330424',
        value: '海盐县'
      }, {
        key: '330481',
        value: '海宁市'
      }, {
        key: '330482',
        value: '平湖市'
      }, {
        key: '330483',
        value: '桐乡市'
      }]
    }, {
      key: '330500',
      value: '湖州市',
      children: [{
        key: '330502',
        value: '吴兴区'
      }, {
        key: '330503',
        value: '南浔区'
      }, {
        key: '330521',
        value: '德清县'
      }, {
        key: '330522',
        value: '长兴县'
      }, {
        key: '330523',
        value: '安吉县'
      }]
    }, {
      key: '330600',
      value: '绍兴市',
      children: [{
        key: '330602',
        value: '越城区'
      }, {
        key: '330603',
        value: '柯桥区'
      }, {
        key: '330604',
        value: '上虞区'
      }, {
        key: '330624',
        value: '新昌县'
      }, {
        key: '330681',
        value: '诸暨市'
      }, {
        key: '330683',
        value: '嵊州市'
      }]
    }, {
      key: '330700',
      value: '金华市',
      children: [{
        key: '330702',
        value: '婺城区'
      }, {
        key: '330703',
        value: '金东区'
      }, {
        key: '330723',
        value: '武义县'
      }, {
        key: '330726',
        value: '浦江县'
      }, {
        key: '330727',
        value: '磐安县'
      }, {
        key: '330781',
        value: '兰溪市'
      }, {
        key: '330782',
        value: '义乌市'
      }, {
        key: '330783',
        value: '东阳市'
      }, {
        key: '330784',
        value: '永康市'
      }]
    }, {
      key: '330800',
      value: '衢州市',
      children: [{
        key: '330802',
        value: '柯城区'
      }, {
        key: '330803',
        value: '衢江区'
      }, {
        key: '330822',
        value: '常山县'
      }, {
        key: '330824',
        value: '开化县'
      }, {
        key: '330825',
        value: '龙游县'
      }, {
        key: '330881',
        value: '江山市'
      }]
    }, {
      key: '330900',
      value: '舟山市',
      children: [{
        key: '330902',
        value: '定海区'
      }, {
        key: '330903',
        value: '普陀区'
      }, {
        key: '330921',
        value: '岱山县'
      }, {
        key: '330922',
        value: '嵊泗县'
      }]
    }, {
      key: '331000',
      value: '台州市',
      children: [{
        key: '331002',
        value: '椒江区'
      }, {
        key: '331003',
        value: '黄岩区'
      }, {
        key: '331004',
        value: '路桥区'
      }, {
        key: '331021',
        value: '玉环县'
      }, {
        key: '331022',
        value: '三门县'
      }, {
        key: '331023',
        value: '天台县'
      }, {
        key: '331024',
        value: '仙居县'
      }, {
        key: '331081',
        value: '温岭市'
      }, {
        key: '331082',
        value: '临海市'
      }]
    }, {
      key: '331100',
      value: '丽水市',
      children: [{
        key: '331102',
        value: '莲都区'
      }, {
        key: '331121',
        value: '青田县'
      }, {
        key: '331122',
        value: '缙云县'
      }, {
        key: '331123',
        value: '遂昌县'
      }, {
        key: '331124',
        value: '松阳县'
      }, {
        key: '331125',
        value: '云和县'
      }, {
        key: '331126',
        value: '庆元县'
      }, {
        key: '331127',
        value: '景宁'
      }, {
        key: '331181',
        value: '龙泉市'
      }]
    }]
  }, {
    key: '340000',
    value: '安徽省',
    children: [{
      key: '340100',
      value: '合肥市',
      children: [{
        key: '340102',
        value: '瑶海区'
      }, {
        key: '340103',
        value: '庐阳区'
      }, {
        key: '340104',
        value: '蜀山区'
      }, {
        key: '340111',
        value: '包河区'
      }, {
        key: '340121',
        value: '长丰县'
      }, {
        key: '340122',
        value: '肥东县'
      }, {
        key: '340123',
        value: '肥西县'
      }, {
        key: '340124',
        value: '庐江县'
      }, {
        key: '340181',
        value: '巢湖市'
      }]
    }, {
      key: '340200',
      value: '芜湖市',
      children: [{
        key: '340202',
        value: '镜湖区'
      }, {
        key: '340203',
        value: '弋江区'
      }, {
        key: '340207',
        value: '鸠江区'
      }, {
        key: '340208',
        value: '三山区'
      }, {
        key: '340221',
        value: '芜湖县'
      }, {
        key: '340222',
        value: '繁昌县'
      }, {
        key: '340223',
        value: '南陵县'
      }, {
        key: '340225',
        value: '无为县'
      }]
    }, {
      key: '340300',
      value: '蚌埠市',
      children: [{
        key: '340302',
        value: '龙子湖区'
      }, {
        key: '340303',
        value: '蚌山区'
      }, {
        key: '340304',
        value: '禹会区'
      }, {
        key: '340311',
        value: '淮上区'
      }, {
        key: '340321',
        value: '怀远县'
      }, {
        key: '340322',
        value: '五河县'
      }, {
        key: '340323',
        value: '固镇县'
      }]
    }, {
      key: '340400',
      value: '淮南市',
      children: [{
        key: '340402',
        value: '大通区'
      }, {
        key: '340403',
        value: '田家庵区'
      }, {
        key: '340404',
        value: '谢家集区'
      }, {
        key: '340405',
        value: '八公山区'
      }, {
        key: '340406',
        value: '潘集区'
      }, {
        key: '340421',
        value: '凤台县'
      }, {
        key: '340422',
        value: '寿县'
      }]
    }, {
      key: '340500',
      value: '马鞍山市',
      children: [{
        key: '340503',
        value: '花山区'
      }, {
        key: '340504',
        value: '雨山区'
      }, {
        key: '340506',
        value: '博望区'
      }, {
        key: '340521',
        value: '当涂县'
      }, {
        key: '340522',
        value: '含山县'
      }, {
        key: '340523',
        value: '和县'
      }]
    }, {
      key: '340600',
      value: '淮北市',
      children: [{
        key: '340602',
        value: '杜集区'
      }, {
        key: '340603',
        value: '相山区'
      }, {
        key: '340604',
        value: '烈山区'
      }, {
        key: '340621',
        value: '濉溪县'
      }]
    }, {
      key: '340700',
      value: '铜陵市',
      children: [{
        key: '340705',
        value: '铜官区'
      }, {
        key: '340706',
        value: '义安区'
      }, {
        key: '340711',
        value: '郊区'
      }, {
        key: '340722',
        value: '枞阳县'
      }]
    }, {
      key: '340800',
      value: '安庆市',
      children: [{
        key: '340802',
        value: '迎江区'
      }, {
        key: '340803',
        value: '大观区'
      }, {
        key: '340811',
        value: '宜秀区'
      }, {
        key: '340822',
        value: '怀宁县'
      }, {
        key: '340824',
        value: '潜山县'
      }, {
        key: '340825',
        value: '太湖县'
      }, {
        key: '340826',
        value: '宿松县'
      }, {
        key: '340827',
        value: '望江县'
      }, {
        key: '340828',
        value: '岳西县'
      }, {
        key: '340881',
        value: '桐城市'
      }]
    }, {
      key: '341000',
      value: '黄山市',
      children: [{
        key: '341002',
        value: '屯溪区'
      }, {
        key: '341003',
        value: '黄山区'
      }, {
        key: '341004',
        value: '徽州区'
      }, {
        key: '341021',
        value: '歙县'
      }, {
        key: '341022',
        value: '休宁县'
      }, {
        key: '341023',
        value: '黟县'
      }, {
        key: '341024',
        value: '祁门县'
      }]
    }, {
      key: '341100',
      value: '滁州市',
      children: [{
        key: '341102',
        value: '琅琊区'
      }, {
        key: '341103',
        value: '南谯区'
      }, {
        key: '341122',
        value: '来安县'
      }, {
        key: '341124',
        value: '全椒县'
      }, {
        key: '341125',
        value: '定远县'
      }, {
        key: '341126',
        value: '凤阳县'
      }, {
        key: '341181',
        value: '天长市'
      }, {
        key: '341182',
        value: '明光市'
      }]
    }, {
      key: '341200',
      value: '阜阳市',
      children: [{
        key: '341202',
        value: '颍州区'
      }, {
        key: '341203',
        value: '颍东区'
      }, {
        key: '341204',
        value: '颍泉区'
      }, {
        key: '341221',
        value: '临泉县'
      }, {
        key: '341222',
        value: '太和县'
      }, {
        key: '341225',
        value: '阜南县'
      }, {
        key: '341226',
        value: '颍上县'
      }, {
        key: '341282',
        value: '界首市'
      }]
    }, {
      key: '341300',
      value: '宿州市',
      children: [{
        key: '341302',
        value: '埇桥区'
      }, {
        key: '341321',
        value: '砀山县'
      }, {
        key: '341322',
        value: '萧县'
      }, {
        key: '341323',
        value: '灵璧县'
      }, {
        key: '341324',
        value: '泗县'
      }]
    }, {
      key: '341500',
      value: '六安市',
      children: [{
        key: '341502',
        value: '金安区'
      }, {
        key: '341503',
        value: '裕安区'
      }, {
        key: '341504',
        value: '叶集区'
      }, {
        key: '341522',
        value: '霍邱县'
      }, {
        key: '341523',
        value: '舒城县'
      }, {
        key: '341524',
        value: '金寨县'
      }, {
        key: '341525',
        value: '霍山县'
      }]
    }, {
      key: '341600',
      value: '亳州市',
      children: [{
        key: '341602',
        value: '谯城区'
      }, {
        key: '341621',
        value: '涡阳县'
      }, {
        key: '341622',
        value: '蒙城县'
      }, {
        key: '341623',
        value: '利辛县'
      }]
    }, {
      key: '341700',
      value: '池州市',
      children: [{
        key: '341702',
        value: '贵池区'
      }, {
        key: '341721',
        value: '东至县'
      }, {
        key: '341722',
        value: '石台县'
      }, {
        key: '341723',
        value: '青阳县'
      }]
    }, {
      key: '341800',
      value: '宣城市',
      children: [{
        key: '341802',
        value: '宣州区'
      }, {
        key: '341821',
        value: '郎溪县'
      }, {
        key: '341822',
        value: '广德县'
      }, {
        key: '341823',
        value: '泾县'
      }, {
        key: '341824',
        value: '绩溪县'
      }, {
        key: '341825',
        value: '旌德县'
      }, {
        key: '341881',
        value: '宁国市'
      }]
    }]
  }, {
    key: '350000',
    value: '福建省',
    children: [{
      key: '350100',
      value: '福州市',
      children: [{
        key: '350102',
        value: '鼓楼区'
      }, {
        key: '350103',
        value: '台江区'
      }, {
        key: '350104',
        value: '仓山区'
      }, {
        key: '350105',
        value: '马尾区'
      }, {
        key: '350111',
        value: '晋安区'
      }, {
        key: '350121',
        value: '闽侯县'
      }, {
        key: '350122',
        value: '连江县'
      }, {
        key: '350123',
        value: '罗源县'
      }, {
        key: '350124',
        value: '闽清县'
      }, {
        key: '350125',
        value: '永泰县'
      }, {
        key: '350128',
        value: '平潭县'
      }, {
        key: '350181',
        value: '福清市'
      }, {
        key: '350182',
        value: '长乐市'
      }]
    }, {
      key: '350200',
      value: '厦门市',
      children: [{
        key: '350203',
        value: '思明区'
      }, {
        key: '350205',
        value: '海沧区'
      }, {
        key: '350206',
        value: '湖里区'
      }, {
        key: '350211',
        value: '集美区'
      }, {
        key: '350212',
        value: '同安区'
      }, {
        key: '350213',
        value: '翔安区'
      }]
    }, {
      key: '350300',
      value: '莆田市',
      children: [{
        key: '350302',
        value: '城厢区'
      }, {
        key: '350303',
        value: '涵江区'
      }, {
        key: '350304',
        value: '荔城区'
      }, {
        key: '350305',
        value: '秀屿区'
      }, {
        key: '350322',
        value: '仙游县'
      }]
    }, {
      key: '350400',
      value: '三明市',
      children: [{
        key: '350402',
        value: '梅列区'
      }, {
        key: '350403',
        value: '三元区'
      }, {
        key: '350421',
        value: '明溪县'
      }, {
        key: '350423',
        value: '清流县'
      }, {
        key: '350424',
        value: '宁化县'
      }, {
        key: '350425',
        value: '大田县'
      }, {
        key: '350426',
        value: '尤溪县'
      }, {
        key: '350427',
        value: '沙县'
      }, {
        key: '350428',
        value: '将乐县'
      }, {
        key: '350429',
        value: '泰宁县'
      }, {
        key: '350430',
        value: '建宁县'
      }, {
        key: '350481',
        value: '永安市'
      }]
    }, {
      key: '350500',
      value: '泉州市',
      children: [{
        key: '350502',
        value: '鲤城区'
      }, {
        key: '350503',
        value: '丰泽区'
      }, {
        key: '350504',
        value: '洛江区'
      }, {
        key: '350505',
        value: '泉港区'
      }, {
        key: '350521',
        value: '惠安县'
      }, {
        key: '350524',
        value: '安溪县'
      }, {
        key: '350525',
        value: '永春县'
      }, {
        key: '350526',
        value: '德化县'
      }, {
        key: '350527',
        value: '金门县'
      }, {
        key: '350581',
        value: '石狮市'
      }, {
        key: '350582',
        value: '晋江市'
      }, {
        key: '350583',
        value: '南安市'
      }]
    }, {
      key: '350600',
      value: '漳州市',
      children: [{
        key: '350602',
        value: '芗城区'
      }, {
        key: '350603',
        value: '龙文区'
      }, {
        key: '350622',
        value: '云霄县'
      }, {
        key: '350623',
        value: '漳浦县'
      }, {
        key: '350624',
        value: '诏安县'
      }, {
        key: '350625',
        value: '长泰县'
      }, {
        key: '350626',
        value: '东山县'
      }, {
        key: '350627',
        value: '南靖县'
      }, {
        key: '350628',
        value: '平和县'
      }, {
        key: '350629',
        value: '华安县'
      }, {
        key: '350681',
        value: '龙海市'
      }]
    }, {
      key: '350700',
      value: '南平市',
      children: [{
        key: '350702',
        value: '延平区'
      }, {
        key: '350703',
        value: '建阳区'
      }, {
        key: '350721',
        value: '顺昌县'
      }, {
        key: '350722',
        value: '浦城县'
      }, {
        key: '350723',
        value: '光泽县'
      }, {
        key: '350724',
        value: '松溪县'
      }, {
        key: '350725',
        value: '政和县'
      }, {
        key: '350781',
        value: '邵武市'
      }, {
        key: '350782',
        value: '武夷山市'
      }, {
        key: '350783',
        value: '建瓯市'
      }]
    }, {
      key: '350800',
      value: '龙岩市',
      children: [{
        key: '350802',
        value: '新罗区'
      }, {
        key: '350803',
        value: '永定区'
      }, {
        key: '350821',
        value: '长汀县'
      }, {
        key: '350823',
        value: '上杭县'
      }, {
        key: '350824',
        value: '武平县'
      }, {
        key: '350825',
        value: '连城县'
      }, {
        key: '350881',
        value: '漳平市'
      }]
    }, {
      key: '350900',
      value: '宁德市',
      children: [{
        key: '350902',
        value: '蕉城区'
      }, {
        key: '350921',
        value: '霞浦县'
      }, {
        key: '350922',
        value: '古田县'
      }, {
        key: '350923',
        value: '屏南县'
      }, {
        key: '350924',
        value: '寿宁县'
      }, {
        key: '350925',
        value: '周宁县'
      }, {
        key: '350926',
        value: '柘荣县'
      }, {
        key: '350981',
        value: '福安市'
      }, {
        key: '350982',
        value: '福鼎市'
      }]
    }]
  }, {
    key: '360000',
    value: '江西省',
    children: [{
      key: '360100',
      value: '南昌市',
      children: [{
        key: '360102',
        value: '东湖区'
      }, {
        key: '360103',
        value: '西湖区'
      }, {
        key: '360104',
        value: '青云谱区'
      }, {
        key: '360105',
        value: '湾里区'
      }, {
        key: '360111',
        value: '青山湖区'
      }, {
        key: '360112',
        value: '新建区'
      }, {
        key: '360121',
        value: '南昌县'
      }, {
        key: '360123',
        value: '安义县'
      }, {
        key: '360124',
        value: '进贤县'
      }]
    }, {
      key: '360200',
      value: '景德镇市',
      children: [{
        key: '360202',
        value: '昌江区'
      }, {
        key: '360203',
        value: '珠山区'
      }, {
        key: '360222',
        value: '浮梁县'
      }, {
        key: '360281',
        value: '乐平市'
      }]
    }, {
      key: '360300',
      value: '萍乡市',
      children: [{
        key: '360302',
        value: '安源区'
      }, {
        key: '360313',
        value: '湘东区'
      }, {
        key: '360321',
        value: '莲花县'
      }, {
        key: '360322',
        value: '上栗县'
      }, {
        key: '360323',
        value: '芦溪县'
      }]
    }, {
      key: '360400',
      value: '九江市',
      children: [{
        key: '360402',
        value: '濂溪区'
      }, {
        key: '360403',
        value: '浔阳区'
      }, {
        key: '360421',
        value: '九江县'
      }, {
        key: '360423',
        value: '武宁县'
      }, {
        key: '360424',
        value: '修水县'
      }, {
        key: '360425',
        value: '永修县'
      }, {
        key: '360426',
        value: '德安县'
      }, {
        key: '360428',
        value: '都昌县'
      }, {
        key: '360429',
        value: '湖口县'
      }, {
        key: '360430',
        value: '彭泽县'
      }, {
        key: '360481',
        value: '瑞昌市'
      }, {
        key: '360482',
        value: '共青城市'
      }, {
        key: '360483',
        value: '庐山市'
      }]
    }, {
      key: '360500',
      value: '新余市',
      children: [{
        key: '360502',
        value: '渝水区'
      }, {
        key: '360521',
        value: '分宜县'
      }]
    }, {
      key: '360600',
      value: '鹰潭市',
      children: [{
        key: '360602',
        value: '月湖区'
      }, {
        key: '360622',
        value: '余江县'
      }, {
        key: '360681',
        value: '贵溪市'
      }]
    }, {
      key: '360700',
      value: '赣州市',
      children: [{
        key: '360702',
        value: '章贡区'
      }, {
        key: '360703',
        value: '南康区'
      }, {
        key: '360721',
        value: '赣县'
      }, {
        key: '360722',
        value: '信丰县'
      }, {
        key: '360723',
        value: '大余县'
      }, {
        key: '360724',
        value: '上犹县'
      }, {
        key: '360725',
        value: '崇义县'
      }, {
        key: '360726',
        value: '安远县'
      }, {
        key: '360727',
        value: '龙南县'
      }, {
        key: '360728',
        value: '定南县'
      }, {
        key: '360729',
        value: '全南县'
      }, {
        key: '360730',
        value: '宁都县'
      }, {
        key: '360731',
        value: '于都县'
      }, {
        key: '360732',
        value: '兴国县'
      }, {
        key: '360733',
        value: '会昌县'
      }, {
        key: '360734',
        value: '寻乌县'
      }, {
        key: '360735',
        value: '石城县'
      }, {
        key: '360781',
        value: '瑞金市'
      }]
    }, {
      key: '360800',
      value: '吉安市',
      children: [{
        key: '360802',
        value: '吉州区'
      }, {
        key: '360803',
        value: '青原区'
      }, {
        key: '360821',
        value: '吉安县'
      }, {
        key: '360822',
        value: '吉水县'
      }, {
        key: '360823',
        value: '峡江县'
      }, {
        key: '360824',
        value: '新干县'
      }, {
        key: '360825',
        value: '永丰县'
      }, {
        key: '360826',
        value: '泰和县'
      }, {
        key: '360827',
        value: '遂川县'
      }, {
        key: '360828',
        value: '万安县'
      }, {
        key: '360829',
        value: '安福县'
      }, {
        key: '360830',
        value: '永新县'
      }, {
        key: '360881',
        value: '井冈山市'
      }]
    }, {
      key: '360900',
      value: '宜春市',
      children: [{
        key: '360902',
        value: '袁州区'
      }, {
        key: '360921',
        value: '奉新县'
      }, {
        key: '360922',
        value: '万载县'
      }, {
        key: '360923',
        value: '上高县'
      }, {
        key: '360924',
        value: '宜丰县'
      }, {
        key: '360925',
        value: '靖安县'
      }, {
        key: '360926',
        value: '铜鼓县'
      }, {
        key: '360981',
        value: '丰城市'
      }, {
        key: '360982',
        value: '樟树市'
      }, {
        key: '360983',
        value: '高安市'
      }]
    }, {
      key: '361000',
      value: '抚州市',
      children: [{
        key: '361002',
        value: '临川区'
      }, {
        key: '361021',
        value: '南城县'
      }, {
        key: '361022',
        value: '黎川县'
      }, {
        key: '361023',
        value: '南丰县'
      }, {
        key: '361024',
        value: '崇仁县'
      }, {
        key: '361025',
        value: '乐安县'
      }, {
        key: '361026',
        value: '宜黄县'
      }, {
        key: '361027',
        value: '金溪县'
      }, {
        key: '361028',
        value: '资溪县'
      }, {
        key: '361029',
        value: '东乡县'
      }, {
        key: '361030',
        value: '广昌县'
      }]
    }, {
      key: '361100',
      value: '上饶市',
      children: [{
        key: '361102',
        value: '信州区'
      }, {
        key: '361103',
        value: '广丰区'
      }, {
        key: '361121',
        value: '上饶县'
      }, {
        key: '361123',
        value: '玉山县'
      }, {
        key: '361124',
        value: '铅山县'
      }, {
        key: '361125',
        value: '横峰县'
      }, {
        key: '361126',
        value: '弋阳县'
      }, {
        key: '361127',
        value: '余干县'
      }, {
        key: '361128',
        value: '鄱阳县'
      }, {
        key: '361129',
        value: '万年县'
      }, {
        key: '361130',
        value: '婺源县'
      }, {
        key: '361181',
        value: '德兴市'
      }]
    }]
  }, {
    key: '370000',
    value: '山东省',
    children: [{
      key: '370100',
      value: '济南市',
      children: [{
        key: '370102',
        value: '历下区'
      }, {
        key: '370103',
        value: '市中区'
      }, {
        key: '370104',
        value: '槐荫区'
      }, {
        key: '370105',
        value: '天桥区'
      }, {
        key: '370112',
        value: '历城区'
      }, {
        key: '370113',
        value: '长清区'
      }, {
        key: '370124',
        value: '平阴县'
      }, {
        key: '370125',
        value: '济阳县'
      }, {
        key: '370126',
        value: '商河县'
      }, {
        key: '370181',
        value: '章丘市'
      }]
    }, {
      key: '370200',
      value: '青岛市',
      children: [{
        key: '370202',
        value: '市南区'
      }, {
        key: '370203',
        value: '市北区'
      }, {
        key: '370211',
        value: '黄岛区'
      }, {
        key: '370212',
        value: '崂山区'
      }, {
        key: '370213',
        value: '李沧区'
      }, {
        key: '370214',
        value: '城阳区'
      }, {
        key: '370281',
        value: '胶州市'
      }, {
        key: '370282',
        value: '即墨市'
      }, {
        key: '370283',
        value: '平度市'
      }, {
        key: '370285',
        value: '莱西市'
      }]
    }, {
      key: '370300',
      value: '淄博市',
      children: [{
        key: '370302',
        value: '淄川区'
      }, {
        key: '370303',
        value: '张店区'
      }, {
        key: '370304',
        value: '博山区'
      }, {
        key: '370305',
        value: '临淄区'
      }, {
        key: '370306',
        value: '周村区'
      }, {
        key: '370321',
        value: '桓台县'
      }, {
        key: '370322',
        value: '高青县'
      }, {
        key: '370323',
        value: '沂源县'
      }]
    }, {
      key: '370400',
      value: '枣庄市',
      children: [{
        key: '370402',
        value: '市中区'
      }, {
        key: '370403',
        value: '薛城区'
      }, {
        key: '370404',
        value: '峄城区'
      }, {
        key: '370405',
        value: '台儿庄区'
      }, {
        key: '370406',
        value: '山亭区'
      }, {
        key: '370481',
        value: '滕州市'
      }]
    }, {
      key: '370500',
      value: '东营市',
      children: [{
        key: '370502',
        value: '东营区'
      }, {
        key: '370503',
        value: '河口区'
      }, {
        key: '370505',
        value: '垦利区'
      }, {
        key: '370522',
        value: '利津县'
      }, {
        key: '370523',
        value: '广饶县'
      }]
    }, {
      key: '370600',
      value: '烟台市',
      children: [{
        key: '370602',
        value: '芝罘区'
      }, {
        key: '370611',
        value: '福山区'
      }, {
        key: '370612',
        value: '牟平区'
      }, {
        key: '370613',
        value: '莱山区'
      }, {
        key: '370634',
        value: '长岛县'
      }, {
        key: '370681',
        value: '龙口市'
      }, {
        key: '370682',
        value: '莱阳市'
      }, {
        key: '370683',
        value: '莱州市'
      }, {
        key: '370684',
        value: '蓬莱市'
      }, {
        key: '370685',
        value: '招远市'
      }, {
        key: '370686',
        value: '栖霞市'
      }, {
        key: '370687',
        value: '海阳市'
      }]
    }, {
      key: '370700',
      value: '潍坊市',
      children: [{
        key: '370702',
        value: '潍城区'
      }, {
        key: '370703',
        value: '寒亭区'
      }, {
        key: '370704',
        value: '坊子区'
      }, {
        key: '370705',
        value: '奎文区'
      }, {
        key: '370724',
        value: '临朐县'
      }, {
        key: '370725',
        value: '昌乐县'
      }, {
        key: '370781',
        value: '青州市'
      }, {
        key: '370782',
        value: '诸城市'
      }, {
        key: '370783',
        value: '寿光市'
      }, {
        key: '370784',
        value: '安丘市'
      }, {
        key: '370785',
        value: '高密市'
      }, {
        key: '370786',
        value: '昌邑市'
      }]
    }, {
      key: '370800',
      value: '济宁市',
      children: [{
        key: '370811',
        value: '任城区'
      }, {
        key: '370812',
        value: '兖州区'
      }, {
        key: '370826',
        value: '微山县'
      }, {
        key: '370827',
        value: '鱼台县'
      }, {
        key: '370828',
        value: '金乡县'
      }, {
        key: '370829',
        value: '嘉祥县'
      }, {
        key: '370830',
        value: '汶上县'
      }, {
        key: '370831',
        value: '泗水县'
      }, {
        key: '370832',
        value: '梁山县'
      }, {
        key: '370881',
        value: '曲阜市'
      }, {
        key: '370883',
        value: '邹城市'
      }]
    }, {
      key: '370900',
      value: '泰安市',
      children: [{
        key: '370902',
        value: '泰山区'
      }, {
        key: '370911',
        value: '岱岳区'
      }, {
        key: '370921',
        value: '宁阳县'
      }, {
        key: '370923',
        value: '东平县'
      }, {
        key: '370982',
        value: '新泰市'
      }, {
        key: '370983',
        value: '肥城市'
      }]
    }, {
      key: '371000',
      value: '威海市',
      children: [{
        key: '371002',
        value: '环翠区'
      }, {
        key: '371003',
        value: '文登区'
      }, {
        key: '371082',
        value: '荣成市'
      }, {
        key: '371083',
        value: '乳山市'
      }]
    }, {
      key: '371100',
      value: '日照市',
      children: [{
        key: '371102',
        value: '东港区'
      }, {
        key: '371103',
        value: '岚山区'
      }, {
        key: '371121',
        value: '五莲县'
      }, {
        key: '371122',
        value: '莒县'
      }]
    }, {
      key: '371200',
      value: '莱芜市',
      children: [{
        key: '371202',
        value: '莱城区'
      }, {
        key: '371203',
        value: '钢城区'
      }]
    }, {
      key: '371300',
      value: '临沂市',
      children: [{
        key: '371302',
        value: '兰山区'
      }, {
        key: '371311',
        value: '罗庄区'
      }, {
        key: '371312',
        value: '河东区'
      }, {
        key: '371321',
        value: '沂南县'
      }, {
        key: '371322',
        value: '郯城县'
      }, {
        key: '371323',
        value: '沂水县'
      }, {
        key: '371324',
        value: '兰陵县'
      }, {
        key: '371325',
        value: '费县'
      }, {
        key: '371326',
        value: '平邑县'
      }, {
        key: '371327',
        value: '莒南县'
      }, {
        key: '371328',
        value: '蒙阴县'
      }, {
        key: '371329',
        value: '临沭县'
      }]
    }, {
      key: '371400',
      value: '德州市',
      children: [{
        key: '371402',
        value: '德城区'
      }, {
        key: '371403',
        value: '陵城区'
      }, {
        key: '371422',
        value: '宁津县'
      }, {
        key: '371423',
        value: '庆云县'
      }, {
        key: '371424',
        value: '临邑县'
      }, {
        key: '371425',
        value: '齐河县'
      }, {
        key: '371426',
        value: '平原县'
      }, {
        key: '371427',
        value: '夏津县'
      }, {
        key: '371428',
        value: '武城县'
      }, {
        key: '371481',
        value: '乐陵市'
      }, {
        key: '371482',
        value: '禹城市'
      }]
    }, {
      key: '371500',
      value: '聊城市',
      children: [{
        key: '371502',
        value: '东昌府区'
      }, {
        key: '371521',
        value: '阳谷县'
      }, {
        key: '371522',
        value: '莘县'
      }, {
        key: '371523',
        value: '茌平县'
      }, {
        key: '371524',
        value: '东阿县'
      }, {
        key: '371525',
        value: '冠县'
      }, {
        key: '371526',
        value: '高唐县'
      }, {
        key: '371581',
        value: '临清市'
      }]
    }, {
      key: '371600',
      value: '滨州市',
      children: [{
        key: '371602',
        value: '滨城区'
      }, {
        key: '371603',
        value: '沾化区'
      }, {
        key: '371621',
        value: '惠民县'
      }, {
        key: '371622',
        value: '阳信县'
      }, {
        key: '371623',
        value: '无棣县'
      }, {
        key: '371625',
        value: '博兴县'
      }, {
        key: '371626',
        value: '邹平县'
      }]
    }, {
      key: '371700',
      value: '菏泽市',
      children: [{
        key: '371702',
        value: '牡丹区'
      }, {
        key: '371703',
        value: '定陶区'
      }, {
        key: '371721',
        value: '曹县'
      }, {
        key: '371722',
        value: '单县'
      }, {
        key: '371723',
        value: '成武县'
      }, {
        key: '371724',
        value: '巨野县'
      }, {
        key: '371725',
        value: '郓城县'
      }, {
        key: '371726',
        value: '鄄城县'
      }, {
        key: '371728',
        value: '东明县'
      }]
    }]
  }, {
    key: '410000',
    value: '河南省',
    children: [{
      key: '410100',
      value: '郑州市',
      children: [{
        key: '410102',
        value: '中原区'
      }, {
        key: '410103',
        value: '二七区'
      }, {
        key: '410104',
        value: '管城回族区'
      }, {
        key: '410105',
        value: '金水区'
      }, {
        key: '410106',
        value: '上街区'
      }, {
        key: '410108',
        value: '惠济区'
      }, {
        key: '410122',
        value: '中牟县'
      }, {
        key: '410181',
        value: '巩义市'
      }, {
        key: '410182',
        value: '荥阳市'
      }, {
        key: '410183',
        value: '新密市'
      }, {
        key: '410184',
        value: '新郑市'
      }, {
        key: '410185',
        value: '登封市'
      }]
    }, {
      key: '410200',
      value: '开封市',
      children: [{
        key: '410202',
        value: '龙亭区'
      }, {
        key: '410203',
        value: '顺河回族区'
      }, {
        key: '410204',
        value: '鼓楼区'
      }, {
        key: '410205',
        value: '禹王台区'
      }, {
        key: '410211',
        value: '金明区'
      }, {
        key: '410212',
        value: '祥符区'
      }, {
        key: '410221',
        value: '杞县'
      }, {
        key: '410222',
        value: '通许县'
      }, {
        key: '410223',
        value: '尉氏县'
      }, {
        key: '410225',
        value: '兰考县'
      }]
    }, {
      key: '410300',
      value: '洛阳市',
      children: [{
        key: '410302',
        value: '老城区'
      }, {
        key: '410303',
        value: '西工区'
      }, {
        key: '410304',
        value: '瀍河回族区'
      }, {
        key: '410305',
        value: '涧西区'
      }, {
        key: '410306',
        value: '吉利区'
      }, {
        key: '410311',
        value: '洛龙区'
      }, {
        key: '410322',
        value: '孟津县'
      }, {
        key: '410323',
        value: '新安县'
      }, {
        key: '410324',
        value: '栾川县'
      }, {
        key: '410325',
        value: '嵩县'
      }, {
        key: '410326',
        value: '汝阳县'
      }, {
        key: '410327',
        value: '宜阳县'
      }, {
        key: '410328',
        value: '洛宁县'
      }, {
        key: '410329',
        value: '伊川县'
      }, {
        key: '410381',
        value: '偃师市'
      }]
    }, {
      key: '410400',
      value: '平顶山市',
      children: [{
        key: '410402',
        value: '新华区'
      }, {
        key: '410403',
        value: '卫东区'
      }, {
        key: '410404',
        value: '石龙区'
      }, {
        key: '410411',
        value: '湛河区'
      }, {
        key: '410421',
        value: '宝丰县'
      }, {
        key: '410422',
        value: '叶县'
      }, {
        key: '410423',
        value: '鲁山县'
      }, {
        key: '410425',
        value: '郏县'
      }, {
        key: '410481',
        value: '舞钢市'
      }, {
        key: '410482',
        value: '汝州市'
      }]
    }, {
      key: '410500',
      value: '安阳市',
      children: [{
        key: '410502',
        value: '文峰区'
      }, {
        key: '410503',
        value: '北关区'
      }, {
        key: '410505',
        value: '殷都区'
      }, {
        key: '410506',
        value: '龙安区'
      }, {
        key: '410522',
        value: '安阳县'
      }, {
        key: '410523',
        value: '汤阴县'
      }, {
        key: '410526',
        value: '滑县'
      }, {
        key: '410527',
        value: '内黄县'
      }, {
        key: '410581',
        value: '林州市'
      }]
    }, {
      key: '410600',
      value: '鹤壁市',
      children: [{
        key: '410602',
        value: '鹤山区'
      }, {
        key: '410603',
        value: '山城区'
      }, {
        key: '410611',
        value: '淇滨区'
      }, {
        key: '410621',
        value: '浚县'
      }, {
        key: '410622',
        value: '淇县'
      }]
    }, {
      key: '410700',
      value: '新乡市',
      children: [{
        key: '410702',
        value: '红旗区'
      }, {
        key: '410703',
        value: '卫滨区'
      }, {
        key: '410704',
        value: '凤泉区'
      }, {
        key: '410711',
        value: '牧野区'
      }, {
        key: '410721',
        value: '新乡县'
      }, {
        key: '410724',
        value: '获嘉县'
      }, {
        key: '410725',
        value: '原阳县'
      }, {
        key: '410726',
        value: '延津县'
      }, {
        key: '410727',
        value: '封丘县'
      }, {
        key: '410728',
        value: '长垣县'
      }, {
        key: '410781',
        value: '卫辉市'
      }, {
        key: '410782',
        value: '辉县市'
      }]
    }, {
      key: '410800',
      value: '焦作市',
      children: [{
        key: '410802',
        value: '解放区'
      }, {
        key: '410803',
        value: '中站区'
      }, {
        key: '410804',
        value: '马村区'
      }, {
        key: '410811',
        value: '山阳区'
      }, {
        key: '410821',
        value: '修武县'
      }, {
        key: '410822',
        value: '博爱县'
      }, {
        key: '410823',
        value: '武陟县'
      }, {
        key: '410825',
        value: '温县'
      }, {
        key: '410882',
        value: '沁阳市'
      }, {
        key: '410883',
        value: '孟州市'
      }]
    }, {
      key: '410900',
      value: '濮阳市',
      children: [{
        key: '410902',
        value: '华龙区'
      }, {
        key: '410922',
        value: '清丰县'
      }, {
        key: '410923',
        value: '南乐县'
      }, {
        key: '410926',
        value: '范县'
      }, {
        key: '410927',
        value: '台前县'
      }, {
        key: '410928',
        value: '濮阳县'
      }]
    }, {
      key: '411000',
      value: '许昌市',
      children: [{
        key: '411002',
        value: '魏都区'
      }, {
        key: '411023',
        value: '许昌县'
      }, {
        key: '411024',
        value: '鄢陵县'
      }, {
        key: '411025',
        value: '襄城县'
      }, {
        key: '411081',
        value: '禹州市'
      }, {
        key: '411082',
        value: '长葛市'
      }]
    }, {
      key: '411100',
      value: '漯河市',
      children: [{
        key: '411102',
        value: '源汇区'
      }, {
        key: '411103',
        value: '郾城区'
      }, {
        key: '411104',
        value: '召陵区'
      }, {
        key: '411121',
        value: '舞阳县'
      }, {
        key: '411122',
        value: '临颍县'
      }]
    }, {
      key: '411200',
      value: '三门峡市',
      children: [{
        key: '411202',
        value: '湖滨区'
      }, {
        key: '411203',
        value: '陕州区'
      }, {
        key: '411221',
        value: '渑池县'
      }, {
        key: '411224',
        value: '卢氏县'
      }, {
        key: '411281',
        value: '义马市'
      }, {
        key: '411282',
        value: '灵宝市'
      }]
    }, {
      key: '411300',
      value: '南阳市',
      children: [{
        key: '411302',
        value: '宛城区'
      }, {
        key: '411303',
        value: '卧龙区'
      }, {
        key: '411321',
        value: '南召县'
      }, {
        key: '411322',
        value: '方城县'
      }, {
        key: '411323',
        value: '西峡县'
      }, {
        key: '411324',
        value: '镇平县'
      }, {
        key: '411325',
        value: '内乡县'
      }, {
        key: '411326',
        value: '淅川县'
      }, {
        key: '411327',
        value: '社旗县'
      }, {
        key: '411328',
        value: '唐河县'
      }, {
        key: '411329',
        value: '新野县'
      }, {
        key: '411330',
        value: '桐柏县'
      }, {
        key: '411381',
        value: '邓州市'
      }]
    }, {
      key: '411400',
      value: '商丘市',
      children: [{
        key: '411402',
        value: '梁园区'
      }, {
        key: '411403',
        value: '睢阳区'
      }, {
        key: '411421',
        value: '民权县'
      }, {
        key: '411422',
        value: '睢县'
      }, {
        key: '411423',
        value: '宁陵县'
      }, {
        key: '411424',
        value: '柘城县'
      }, {
        key: '411425',
        value: '虞城县'
      }, {
        key: '411426',
        value: '夏邑县'
      }, {
        key: '411481',
        value: '永城市'
      }]
    }, {
      key: '411500',
      value: '信阳市',
      children: [{
        key: '411502',
        value: '浉河区'
      }, {
        key: '411503',
        value: '平桥区'
      }, {
        key: '411521',
        value: '罗山县'
      }, {
        key: '411522',
        value: '光山县'
      }, {
        key: '411523',
        value: '新县'
      }, {
        key: '411524',
        value: '商城县'
      }, {
        key: '411525',
        value: '固始县'
      }, {
        key: '411526',
        value: '潢川县'
      }, {
        key: '411527',
        value: '淮滨县'
      }, {
        key: '411528',
        value: '息县'
      }]
    }, {
      key: '411600',
      value: '周口市',
      children: [{
        key: '411602',
        value: '川汇区'
      }, {
        key: '411621',
        value: '扶沟县'
      }, {
        key: '411622',
        value: '西华县'
      }, {
        key: '411623',
        value: '商水县'
      }, {
        key: '411624',
        value: '沈丘县'
      }, {
        key: '411625',
        value: '郸城县'
      }, {
        key: '411626',
        value: '淮阳县'
      }, {
        key: '411627',
        value: '太康县'
      }, {
        key: '411628',
        value: '鹿邑县'
      }, {
        key: '411681',
        value: '项城市'
      }]
    }, {
      key: '411700',
      value: '驻马店市',
      children: [{
        key: '411702',
        value: '驿城区'
      }, {
        key: '411721',
        value: '西平县'
      }, {
        key: '411722',
        value: '上蔡县'
      }, {
        key: '411723',
        value: '平舆县'
      }, {
        key: '411724',
        value: '正阳县'
      }, {
        key: '411725',
        value: '确山县'
      }, {
        key: '411726',
        value: '泌阳县'
      }, {
        key: '411727',
        value: '汝南县'
      }, {
        key: '411728',
        value: '遂平县'
      }, {
        key: '411729',
        value: '新蔡县'
      }]
    }, {
      key: '419001',
      value: '济源市'
    }]
  }, {
    key: '420000',
    value: '湖北省',
    children: [{
      key: '420100',
      value: '武汉市',
      children: [{
        key: '420102',
        value: '江岸区'
      }, {
        key: '420103',
        value: '江汉区'
      }, {
        key: '420104',
        value: '硚口区'
      }, {
        key: '420105',
        value: '汉阳区'
      }, {
        key: '420106',
        value: '武昌区'
      }, {
        key: '420107',
        value: '青山区'
      }, {
        key: '420111',
        value: '洪山区'
      }, {
        key: '420112',
        value: '东西湖区'
      }, {
        key: '420113',
        value: '汉南区'
      }, {
        key: '420114',
        value: '蔡甸区'
      }, {
        key: '420115',
        value: '江夏区'
      }, {
        key: '420116',
        value: '黄陂区'
      }, {
        key: '420117',
        value: '新洲区'
      }]
    }, {
      key: '420200',
      value: '黄石市',
      children: [{
        key: '420202',
        value: '黄石港区'
      }, {
        key: '420203',
        value: '西塞山区'
      }, {
        key: '420204',
        value: '下陆区'
      }, {
        key: '420205',
        value: '铁山区'
      }, {
        key: '420222',
        value: '阳新县'
      }, {
        key: '420281',
        value: '大冶市'
      }]
    }, {
      key: '420300',
      value: '十堰市',
      children: [{
        key: '420302',
        value: '茅箭区'
      }, {
        key: '420303',
        value: '张湾区'
      }, {
        key: '420304',
        value: '郧阳区'
      }, {
        key: '420322',
        value: '郧西县'
      }, {
        key: '420323',
        value: '竹山县'
      }, {
        key: '420324',
        value: '竹溪县'
      }, {
        key: '420325',
        value: '房县'
      }, {
        key: '420381',
        value: '丹江口市'
      }]
    }, {
      key: '420500',
      value: '宜昌市',
      children: [{
        key: '420502',
        value: '西陵区'
      }, {
        key: '420503',
        value: '伍家岗区'
      }, {
        key: '420504',
        value: '点军区'
      }, {
        key: '420505',
        value: '猇亭区'
      }, {
        key: '420506',
        value: '夷陵区'
      }, {
        key: '420525',
        value: '远安县'
      }, {
        key: '420526',
        value: '兴山县'
      }, {
        key: '420527',
        value: '秭归县'
      }, {
        key: '420528',
        value: '长阳县'
      }, {
        key: '420529',
        value: '五峰县'
      }, {
        key: '420581',
        value: '宜都市'
      }, {
        key: '420582',
        value: '当阳市'
      }, {
        key: '420583',
        value: '枝江市'
      }]
    }, {
      key: '420600',
      value: '襄阳市',
      children: [{
        key: '420602',
        value: '襄城区'
      }, {
        key: '420606',
        value: '樊城区'
      }, {
        key: '420607',
        value: '襄州区'
      }, {
        key: '420624',
        value: '南漳县'
      }, {
        key: '420625',
        value: '谷城县'
      }, {
        key: '420626',
        value: '保康县'
      }, {
        key: '420682',
        value: '老河口市'
      }, {
        key: '420683',
        value: '枣阳市'
      }, {
        key: '420684',
        value: '宜城市'
      }]
    }, {
      key: '420700',
      value: '鄂州市',
      children: [{
        key: '420702',
        value: '梁子湖区'
      }, {
        key: '420703',
        value: '华容区'
      }, {
        key: '420704',
        value: '鄂城区'
      }]
    }, {
      key: '420800',
      value: '荆门市',
      children: [{
        key: '420802',
        value: '东宝区'
      }, {
        key: '420804',
        value: '掇刀区'
      }, {
        key: '420821',
        value: '京山县'
      }, {
        key: '420822',
        value: '沙洋县'
      }, {
        key: '420881',
        value: '钟祥市'
      }]
    }, {
      key: '420900',
      value: '孝感市',
      children: [{
        key: '420902',
        value: '孝南区'
      }, {
        key: '420921',
        value: '孝昌县'
      }, {
        key: '420922',
        value: '大悟县'
      }, {
        key: '420923',
        value: '云梦县'
      }, {
        key: '420981',
        value: '应城市'
      }, {
        key: '420982',
        value: '安陆市'
      }, {
        key: '420984',
        value: '汉川市'
      }]
    }, {
      key: '421000',
      value: '荆州市',
      children: [{
        key: '421002',
        value: '沙市区'
      }, {
        key: '421003',
        value: '荆州区'
      }, {
        key: '421022',
        value: '公安县'
      }, {
        key: '421023',
        value: '监利县'
      }, {
        key: '421024',
        value: '江陵县'
      }, {
        key: '421081',
        value: '石首市'
      }, {
        key: '421083',
        value: '洪湖市'
      }, {
        key: '421087',
        value: '松滋市'
      }]
    }, {
      key: '421100',
      value: '黄冈市',
      children: [{
        key: '421102',
        value: '黄州区'
      }, {
        key: '421121',
        value: '团风县'
      }, {
        key: '421122',
        value: '红安县'
      }, {
        key: '421123',
        value: '罗田县'
      }, {
        key: '421124',
        value: '英山县'
      }, {
        key: '421125',
        value: '浠水县'
      }, {
        key: '421126',
        value: '蕲春县'
      }, {
        key: '421127',
        value: '黄梅县'
      }, {
        key: '421181',
        value: '麻城市'
      }, {
        key: '421182',
        value: '武穴市'
      }]
    }, {
      key: '421200',
      value: '咸宁市',
      children: [{
        key: '421202',
        value: '咸安区'
      }, {
        key: '421221',
        value: '嘉鱼县'
      }, {
        key: '421222',
        value: '通城县'
      }, {
        key: '421223',
        value: '崇阳县'
      }, {
        key: '421224',
        value: '通山县'
      }, {
        key: '421281',
        value: '赤壁市'
      }]
    }, {
      key: '421300',
      value: '随州市',
      children: [{
        key: '421303',
        value: '曾都区'
      }, {
        key: '421321',
        value: '随县'
      }, {
        key: '421381',
        value: '广水市'
      }]
    }, {
      key: '422800',
      value: '恩施州',
      children: [{
        key: '422801',
        value: '恩施市'
      }, {
        key: '422802',
        value: '利川市'
      }, {
        key: '422822',
        value: '建始县'
      }, {
        key: '422823',
        value: '巴东县'
      }, {
        key: '422825',
        value: '宣恩县'
      }, {
        key: '422826',
        value: '咸丰县'
      }, {
        key: '422827',
        value: '来凤县'
      }, {
        key: '422828',
        value: '鹤峰县'
      }]
    }, {
      key: '429004',
      value: '仙桃市'
    }, {
      key: '429005',
      value: '潜江市'
    }, {
      key: '429006',
      value: '天门市'
    }, {
      key: '429021',
      value: '神农架林区'
    }]
  }, {
    key: '430000',
    value: '湖南省',
    children: [{
      key: '430100',
      value: '长沙市',
      children: [{
        key: '430102',
        value: '芙蓉区'
      }, {
        key: '430103',
        value: '天心区'
      }, {
        key: '430104',
        value: '岳麓区'
      }, {
        key: '430105',
        value: '开福区'
      }, {
        key: '430111',
        value: '雨花区'
      }, {
        key: '430112',
        value: '望城区'
      }, {
        key: '430121',
        value: '长沙县'
      }, {
        key: '430124',
        value: '宁乡县'
      }, {
        key: '430181',
        value: '浏阳市'
      }]
    }, {
      key: '430200',
      value: '株洲市',
      children: [{
        key: '430202',
        value: '荷塘区'
      }, {
        key: '430203',
        value: '芦淞区'
      }, {
        key: '430204',
        value: '石峰区'
      }, {
        key: '430211',
        value: '天元区'
      }, {
        key: '430221',
        value: '株洲县'
      }, {
        key: '430223',
        value: '攸县'
      }, {
        key: '430224',
        value: '茶陵县'
      }, {
        key: '430225',
        value: '炎陵县'
      }, {
        key: '430281',
        value: '醴陵市'
      }]
    }, {
      key: '430300',
      value: '湘潭市',
      children: [{
        key: '430302',
        value: '雨湖区'
      }, {
        key: '430304',
        value: '岳塘区'
      }, {
        key: '430321',
        value: '湘潭县'
      }, {
        key: '430381',
        value: '湘乡市'
      }, {
        key: '430382',
        value: '韶山市'
      }]
    }, {
      key: '430400',
      value: '衡阳市',
      children: [{
        key: '430405',
        value: '珠晖区'
      }, {
        key: '430406',
        value: '雁峰区'
      }, {
        key: '430407',
        value: '石鼓区'
      }, {
        key: '430408',
        value: '蒸湘区'
      }, {
        key: '430412',
        value: '南岳区'
      }, {
        key: '430421',
        value: '衡阳县'
      }, {
        key: '430422',
        value: '衡南县'
      }, {
        key: '430423',
        value: '衡山县'
      }, {
        key: '430424',
        value: '衡东县'
      }, {
        key: '430426',
        value: '祁东县'
      }, {
        key: '430481',
        value: '耒阳市'
      }, {
        key: '430482',
        value: '常宁市'
      }]
    }, {
      key: '430500',
      value: '邵阳市',
      children: [{
        key: '430502',
        value: '双清区'
      }, {
        key: '430503',
        value: '大祥区'
      }, {
        key: '430511',
        value: '北塔区'
      }, {
        key: '430521',
        value: '邵东县'
      }, {
        key: '430522',
        value: '新邵县'
      }, {
        key: '430523',
        value: '邵阳县'
      }, {
        key: '430524',
        value: '隆回县'
      }, {
        key: '430525',
        value: '洞口县'
      }, {
        key: '430527',
        value: '绥宁县'
      }, {
        key: '430528',
        value: '新宁县'
      }, {
        key: '430529',
        value: '城步县'
      }, {
        key: '430581',
        value: '武冈市'
      }]
    }, {
      key: '430600',
      value: '岳阳市',
      children: [{
        key: '430602',
        value: '岳阳楼区'
      }, {
        key: '430603',
        value: '云溪区'
      }, {
        key: '430611',
        value: '君山区'
      }, {
        key: '430621',
        value: '岳阳县'
      }, {
        key: '430623',
        value: '华容县'
      }, {
        key: '430624',
        value: '湘阴县'
      }, {
        key: '430626',
        value: '平江县'
      }, {
        key: '430681',
        value: '汨罗市'
      }, {
        key: '430682',
        value: '临湘市'
      }]
    }, {
      key: '430700',
      value: '常德市',
      children: [{
        key: '430702',
        value: '武陵区'
      }, {
        key: '430703',
        value: '鼎城区'
      }, {
        key: '430721',
        value: '安乡县'
      }, {
        key: '430722',
        value: '汉寿县'
      }, {
        key: '430723',
        value: '澧县'
      }, {
        key: '430724',
        value: '临澧县'
      }, {
        key: '430725',
        value: '桃源县'
      }, {
        key: '430726',
        value: '石门县'
      }, {
        key: '430781',
        value: '津市市'
      }]
    }, {
      key: '430800',
      value: '张家界市',
      children: [{
        key: '430802',
        value: '永定区'
      }, {
        key: '430811',
        value: '武陵源区'
      }, {
        key: '430821',
        value: '慈利县'
      }, {
        key: '430822',
        value: '桑植县'
      }]
    }, {
      key: '430900',
      value: '益阳市',
      children: [{
        key: '430902',
        value: '资阳区'
      }, {
        key: '430903',
        value: '赫山区'
      }, {
        key: '430921',
        value: '南县'
      }, {
        key: '430922',
        value: '桃江县'
      }, {
        key: '430923',
        value: '安化县'
      }, {
        key: '430981',
        value: '沅江市'
      }]
    }, {
      key: '431000',
      value: '郴州市',
      children: [{
        key: '431002',
        value: '北湖区'
      }, {
        key: '431003',
        value: '苏仙区'
      }, {
        key: '431021',
        value: '桂阳县'
      }, {
        key: '431022',
        value: '宜章县'
      }, {
        key: '431023',
        value: '永兴县'
      }, {
        key: '431024',
        value: '嘉禾县'
      }, {
        key: '431025',
        value: '临武县'
      }, {
        key: '431026',
        value: '汝城县'
      }, {
        key: '431027',
        value: '桂东县'
      }, {
        key: '431028',
        value: '安仁县'
      }, {
        key: '431081',
        value: '资兴市'
      }]
    }, {
      key: '431100',
      value: '永州市',
      children: [{
        key: '431102',
        value: '零陵区'
      }, {
        key: '431103',
        value: '冷水滩区'
      }, {
        key: '431121',
        value: '祁阳县'
      }, {
        key: '431122',
        value: '东安县'
      }, {
        key: '431123',
        value: '双牌县'
      }, {
        key: '431124',
        value: '道县'
      }, {
        key: '431125',
        value: '江永县'
      }, {
        key: '431126',
        value: '宁远县'
      }, {
        key: '431127',
        value: '蓝山县'
      }, {
        key: '431128',
        value: '新田县'
      }, {
        key: '431129',
        value: '江华县'
      }]
    }, {
      key: '431200',
      value: '怀化市',
      children: [{
        key: '431202',
        value: '鹤城区'
      }, {
        key: '431221',
        value: '中方县'
      }, {
        key: '431222',
        value: '沅陵县'
      }, {
        key: '431223',
        value: '辰溪县'
      }, {
        key: '431224',
        value: '溆浦县'
      }, {
        key: '431225',
        value: '会同县'
      }, {
        key: '431226',
        value: '麻阳县'
      }, {
        key: '431227',
        value: '新晃县'
      }, {
        key: '431228',
        value: '芷江县'
      }, {
        key: '431229',
        value: '靖州县'
      }, {
        key: '431230',
        value: '通道县'
      }, {
        key: '431281',
        value: '洪江市'
      }]
    }, {
      key: '431300',
      value: '娄底市',
      children: [{
        key: '431302',
        value: '娄星区'
      }, {
        key: '431321',
        value: '双峰县'
      }, {
        key: '431322',
        value: '新化县'
      }, {
        key: '431381',
        value: '冷水江市'
      }, {
        key: '431382',
        value: '涟源市'
      }]
    }, {
      key: '433100',
      value: '湘西州',
      children: [{
        key: '433101',
        value: '吉首市'
      }, {
        key: '433122',
        value: '泸溪县'
      }, {
        key: '433123',
        value: '凤凰县'
      }, {
        key: '433124',
        value: '花垣县'
      }, {
        key: '433125',
        value: '保靖县'
      }, {
        key: '433126',
        value: '古丈县'
      }, {
        key: '433127',
        value: '永顺县'
      }, {
        key: '433130',
        value: '龙山县'
      }]
    }]
  }, {
    key: '440000',
    value: '广东省',
    children: [{
      key: '440100',
      value: '广州市',
      children: [{
        key: '440103',
        value: '荔湾区'
      }, {
        key: '440104',
        value: '越秀区'
      }, {
        key: '440105',
        value: '海珠区'
      }, {
        key: '440106',
        value: '天河区'
      }, {
        key: '440111',
        value: '白云区'
      }, {
        key: '440112',
        value: '黄埔区'
      }, {
        key: '440113',
        value: '番禺区'
      }, {
        key: '440114',
        value: '花都区'
      }, {
        key: '440115',
        value: '南沙区'
      }, {
        key: '440117',
        value: '从化区'
      }, {
        key: '440118',
        value: '增城区'
      }]
    }, {
      key: '440200',
      value: '韶关市',
      children: [{
        key: '440203',
        value: '武江区'
      }, {
        key: '440204',
        value: '浈江区'
      }, {
        key: '440205',
        value: '曲江区'
      }, {
        key: '440222',
        value: '始兴县'
      }, {
        key: '440224',
        value: '仁化县'
      }, {
        key: '440229',
        value: '翁源县'
      }, {
        key: '440232',
        value: '乳源县'
      }, {
        key: '440233',
        value: '新丰县'
      }, {
        key: '440281',
        value: '乐昌市'
      }, {
        key: '440282',
        value: '南雄市'
      }]
    }, {
      key: '440300',
      value: '深圳市',
      children: [{
        key: '440303',
        value: '罗湖区'
      }, {
        key: '440304',
        value: '福田区'
      }, {
        key: '440305',
        value: '南山区'
      }, {
        key: '440306',
        value: '宝安区'
      }, {
        key: '440307',
        value: '龙岗区'
      }, {
        key: '440308',
        value: '盐田区'
      }]
    }, {
      key: '440400',
      value: '珠海市',
      children: [{
        key: '440402',
        value: '香洲区'
      }, {
        key: '440403',
        value: '斗门区'
      }, {
        key: '440404',
        value: '金湾区'
      }]
    }, {
      key: '440500',
      value: '汕头市',
      children: [{
        key: '440507',
        value: '龙湖区'
      }, {
        key: '440511',
        value: '金平区'
      }, {
        key: '440512',
        value: '濠江区'
      }, {
        key: '440513',
        value: '潮阳区'
      }, {
        key: '440514',
        value: '潮南区'
      }, {
        key: '440515',
        value: '澄海区'
      }, {
        key: '440523',
        value: '南澳县'
      }]
    }, {
      key: '440600',
      value: '佛山市',
      children: [{
        key: '440604',
        value: '禅城区'
      }, {
        key: '440605',
        value: '南海区'
      }, {
        key: '440606',
        value: '顺德区'
      }, {
        key: '440607',
        value: '三水区'
      }, {
        key: '440608',
        value: '高明区'
      }]
    }, {
      key: '440700',
      value: '江门市',
      children: [{
        key: '440703',
        value: '蓬江区'
      }, {
        key: '440704',
        value: '江海区'
      }, {
        key: '440705',
        value: '新会区'
      }, {
        key: '440781',
        value: '台山市'
      }, {
        key: '440783',
        value: '开平市'
      }, {
        key: '440784',
        value: '鹤山市'
      }, {
        key: '440785',
        value: '恩平市'
      }]
    }, {
      key: '440800',
      value: '湛江市',
      children: [{
        key: '440802',
        value: '赤坎区'
      }, {
        key: '440803',
        value: '霞山区'
      }, {
        key: '440804',
        value: '坡头区'
      }, {
        key: '440811',
        value: '麻章区'
      }, {
        key: '440823',
        value: '遂溪县'
      }, {
        key: '440825',
        value: '徐闻县'
      }, {
        key: '440881',
        value: '廉江市'
      }, {
        key: '440882',
        value: '雷州市'
      }, {
        key: '440883',
        value: '吴川市'
      }]
    }, {
      key: '440900',
      value: '茂名市',
      children: [{
        key: '440902',
        value: '茂南区'
      }, {
        key: '440904',
        value: '电白区'
      }, {
        key: '440981',
        value: '高州市'
      }, {
        key: '440982',
        value: '化州市'
      }, {
        key: '440983',
        value: '信宜市'
      }]
    }, {
      key: '441200',
      value: '肇庆市',
      children: [{
        key: '441202',
        value: '端州区'
      }, {
        key: '441203',
        value: '鼎湖区'
      }, {
        key: '441204',
        value: '高要区'
      }, {
        key: '441223',
        value: '广宁县'
      }, {
        key: '441224',
        value: '怀集县'
      }, {
        key: '441225',
        value: '封开县'
      }, {
        key: '441226',
        value: '德庆县'
      }, {
        key: '441284',
        value: '四会市'
      }]
    }, {
      key: '441300',
      value: '惠州市',
      children: [{
        key: '441302',
        value: '惠城区'
      }, {
        key: '441303',
        value: '惠阳区'
      }, {
        key: '441322',
        value: '博罗县'
      }, {
        key: '441323',
        value: '惠东县'
      }, {
        key: '441324',
        value: '龙门县'
      }]
    }, {
      key: '441400',
      value: '梅州市',
      children: [{
        key: '441402',
        value: '梅江区'
      }, {
        key: '441403',
        value: '梅县区'
      }, {
        key: '441422',
        value: '大埔县'
      }, {
        key: '441423',
        value: '丰顺县'
      }, {
        key: '441424',
        value: '五华县'
      }, {
        key: '441426',
        value: '平远县'
      }, {
        key: '441427',
        value: '蕉岭县'
      }, {
        key: '441481',
        value: '兴宁市'
      }]
    }, {
      key: '441500',
      value: '汕尾市',
      children: [{
        key: '441502',
        value: '城区'
      }, {
        key: '441521',
        value: '海丰县'
      }, {
        key: '441523',
        value: '陆河县'
      }, {
        key: '441581',
        value: '陆丰市'
      }]
    }, {
      key: '441600',
      value: '河源市',
      children: [{
        key: '441602',
        value: '源城区'
      }, {
        key: '441621',
        value: '紫金县'
      }, {
        key: '441622',
        value: '龙川县'
      }, {
        key: '441623',
        value: '连平县'
      }, {
        key: '441624',
        value: '和平县'
      }, {
        key: '441625',
        value: '东源县'
      }]
    }, {
      key: '441700',
      value: '阳江市',
      children: [{
        key: '441702',
        value: '江城区'
      }, {
        key: '441704',
        value: '阳东区'
      }, {
        key: '441721',
        value: '阳西县'
      }, {
        key: '441781',
        value: '阳春市'
      }]
    }, {
      key: '441800',
      value: '清远市',
      children: [{
        key: '441802',
        value: '清城区'
      }, {
        key: '441803',
        value: '清新区'
      }, {
        key: '441821',
        value: '佛冈县'
      }, {
        key: '441823',
        value: '阳山县'
      }, {
        key: '441825',
        value: '连山县'
      }, {
        key: '441826',
        value: '连南县'
      }, {
        key: '441881',
        value: '英德市'
      }, {
        key: '441882',
        value: '连州市'
      }]
    }, {
      key: '441900',
      value: '东莞市'
    }, {
      key: '442000',
      value: '中山市'
    }, {
      key: '445100',
      value: '潮州市',
      children: [{
        key: '445102',
        value: '湘桥区'
      }, {
        key: '445103',
        value: '潮安区'
      }, {
        key: '445122',
        value: '饶平县'
      }]
    }, {
      key: '445200',
      value: '揭阳市',
      children: [{
        key: '445202',
        value: '榕城区'
      }, {
        key: '445203',
        value: '揭东区'
      }, {
        key: '445222',
        value: '揭西县'
      }, {
        key: '445224',
        value: '惠来县'
      }, {
        key: '445281',
        value: '普宁市'
      }]
    }, {
      key: '445300',
      value: '云浮市',
      children: [{
        key: '445302',
        value: '云城区'
      }, {
        key: '445303',
        value: '云安区'
      }, {
        key: '445321',
        value: '新兴县'
      }, {
        key: '445322',
        value: '郁南县'
      }, {
        key: '445381',
        value: '罗定市'
      }]
    }]
  }, {
    key: '450000',
    value: '广西省',
    children: [{
      key: '450100',
      value: '南宁市',
      children: [{
        key: '450102',
        value: '兴宁区'
      }, {
        key: '450103',
        value: '青秀区'
      }, {
        key: '450105',
        value: '江南区'
      }, {
        key: '450107',
        value: '西乡塘区'
      }, {
        key: '450108',
        value: '良庆区'
      }, {
        key: '450109',
        value: '邕宁区'
      }, {
        key: '450110',
        value: '武鸣区'
      }, {
        key: '450123',
        value: '隆安县'
      }, {
        key: '450124',
        value: '马山县'
      }, {
        key: '450125',
        value: '上林县'
      }, {
        key: '450126',
        value: '宾阳县'
      }, {
        key: '450127',
        value: '横县'
      }]
    }, {
      key: '450200',
      value: '柳州市',
      children: [{
        key: '450202',
        value: '城中区'
      }, {
        key: '450203',
        value: '鱼峰区'
      }, {
        key: '450204',
        value: '柳南区'
      }, {
        key: '450205',
        value: '柳北区'
      }, {
        key: '450206',
        value: '柳江区'
      }, {
        key: '450222',
        value: '柳城县'
      }, {
        key: '450223',
        value: '鹿寨县'
      }, {
        key: '450224',
        value: '融安县'
      }, {
        key: '450225',
        value: '融水县'
      }, {
        key: '450226',
        value: '三江县'
      }]
    }, {
      key: '450300',
      value: '桂林市',
      children: [{
        key: '450302',
        value: '秀峰区'
      }, {
        key: '450303',
        value: '叠彩区'
      }, {
        key: '450304',
        value: '象山区'
      }, {
        key: '450305',
        value: '七星区'
      }, {
        key: '450311',
        value: '雁山区'
      }, {
        key: '450312',
        value: '临桂区'
      }, {
        key: '450321',
        value: '阳朔县'
      }, {
        key: '450323',
        value: '灵川县'
      }, {
        key: '450324',
        value: '全州县'
      }, {
        key: '450325',
        value: '兴安县'
      }, {
        key: '450326',
        value: '永福县'
      }, {
        key: '450327',
        value: '灌阳县'
      }, {
        key: '450328',
        value: '龙胜县'
      }, {
        key: '450329',
        value: '资源县'
      }, {
        key: '450330',
        value: '平乐县'
      }, {
        key: '450331',
        value: '荔浦县'
      }, {
        key: '450332',
        value: '恭城县'
      }]
    }, {
      key: '450400',
      value: '梧州市',
      children: [{
        key: '450403',
        value: '万秀区'
      }, {
        key: '450405',
        value: '长洲区'
      }, {
        key: '450406',
        value: '龙圩区'
      }, {
        key: '450421',
        value: '苍梧县'
      }, {
        key: '450422',
        value: '藤县'
      }, {
        key: '450423',
        value: '蒙山县'
      }, {
        key: '450481',
        value: '岑溪市'
      }]
    }, {
      key: '450500',
      value: '北海市',
      children: [{
        key: '450502',
        value: '海城区'
      }, {
        key: '450503',
        value: '银海区'
      }, {
        key: '450512',
        value: '铁山港区'
      }, {
        key: '450521',
        value: '合浦县'
      }]
    }, {
      key: '450600',
      value: '防城港市',
      children: [{
        key: '450602',
        value: '港口区'
      }, {
        key: '450603',
        value: '防城区'
      }, {
        key: '450621',
        value: '上思县'
      }, {
        key: '450681',
        value: '东兴市'
      }]
    }, {
      key: '450700',
      value: '钦州市',
      children: [{
        key: '450702',
        value: '钦南区'
      }, {
        key: '450703',
        value: '钦北区'
      }, {
        key: '450721',
        value: '灵山县'
      }, {
        key: '450722',
        value: '浦北县'
      }]
    }, {
      key: '450800',
      value: '贵港市',
      children: [{
        key: '450802',
        value: '港北区'
      }, {
        key: '450803',
        value: '港南区'
      }, {
        key: '450804',
        value: '覃塘区'
      }, {
        key: '450821',
        value: '平南县'
      }, {
        key: '450881',
        value: '桂平市'
      }]
    }, {
      key: '450900',
      value: '玉林市',
      children: [{
        key: '450902',
        value: '玉州区'
      }, {
        key: '450903',
        value: '福绵区'
      }, {
        key: '450921',
        value: '容县'
      }, {
        key: '450922',
        value: '陆川县'
      }, {
        key: '450923',
        value: '博白县'
      }, {
        key: '450924',
        value: '兴业县'
      }, {
        key: '450981',
        value: '北流市'
      }]
    }, {
      key: '451000',
      value: '百色市',
      children: [{
        key: '451002',
        value: '右江区'
      }, {
        key: '451021',
        value: '田阳县'
      }, {
        key: '451022',
        value: '田东县'
      }, {
        key: '451023',
        value: '平果县'
      }, {
        key: '451024',
        value: '德保县'
      }, {
        key: '451026',
        value: '那坡县'
      }, {
        key: '451027',
        value: '凌云县'
      }, {
        key: '451028',
        value: '乐业县'
      }, {
        key: '451029',
        value: '田林县'
      }, {
        key: '451030',
        value: '西林县'
      }, {
        key: '451031',
        value: '隆林县'
      }, {
        key: '451081',
        value: '靖西市'
      }]
    }, {
      key: '451100',
      value: '贺州市',
      children: [{
        key: '451102',
        value: '八步区'
      }, {
        key: '451103',
        value: '平桂区'
      }, {
        key: '451121',
        value: '昭平县'
      }, {
        key: '451122',
        value: '钟山县'
      }, {
        key: '451123',
        value: '富川县'
      }]
    }, {
      key: '451200',
      value: '河池市',
      children: [{
        key: '451202',
        value: '金城江区'
      }, {
        key: '451221',
        value: '南丹县'
      }, {
        key: '451222',
        value: '天峨县'
      }, {
        key: '451223',
        value: '凤山县'
      }, {
        key: '451224',
        value: '东兰县'
      }, {
        key: '451225',
        value: '罗城县'
      }, {
        key: '451226',
        value: '环江县'
      }, {
        key: '451227',
        value: '巴马县'
      }, {
        key: '451228',
        value: '都安县'
      }, {
        key: '451229',
        value: '大化县'
      }, {
        key: '451281',
        value: '宜州市'
      }]
    }, {
      key: '451300',
      value: '来宾市',
      children: [{
        key: '451302',
        value: '兴宾区'
      }, {
        key: '451321',
        value: '忻城县'
      }, {
        key: '451322',
        value: '象州县'
      }, {
        key: '451323',
        value: '武宣县'
      }, {
        key: '451324',
        value: '金秀县'
      }, {
        key: '451381',
        value: '合山市'
      }]
    }, {
      key: '451400',
      value: '崇左市',
      children: [{
        key: '451402',
        value: '江州区'
      }, {
        key: '451421',
        value: '扶绥县'
      }, {
        key: '451422',
        value: '宁明县'
      }, {
        key: '451423',
        value: '龙州县'
      }, {
        key: '451424',
        value: '大新县'
      }, {
        key: '451425',
        value: '天等县'
      }, {
        key: '451481',
        value: '凭祥市'
      }]
    }]
  }, {
    key: '460000',
    value: '海南省',
    children: [{
      key: '460100',
      value: '海口市',
      children: [{
        key: '460105',
        value: '秀英区'
      }, {
        key: '460106',
        value: '龙华区'
      }, {
        key: '460107',
        value: '琼山区'
      }, {
        key: '460108',
        value: '美兰区'
      }]
    }, {
      key: '460200',
      value: '三亚市',
      children: [{
        key: '460202',
        value: '海棠区'
      }, {
        key: '460203',
        value: '吉阳区'
      }, {
        key: '460204',
        value: '天涯区'
      }, {
        key: '460205',
        value: '崖州区'
      }]
    }, {
      key: '460300',
      value: '三沙市'
    }, {
      key: '460400',
      value: '儋州市'
    }, {
      key: '469001',
      value: '五指山市'
    }, {
      key: '469002',
      value: '琼海市'
    }, {
      key: '469005',
      value: '文昌市'
    }, {
      key: '469006',
      value: '万宁市'
    }, {
      key: '469007',
      value: '东方市'
    }, {
      key: '469021',
      value: '定安县'
    }, {
      key: '469022',
      value: '屯昌县'
    }, {
      key: '469023',
      value: '澄迈县'
    }, {
      key: '469024',
      value: '临高县'
    }, {
      key: '469025',
      value: '白沙县'
    }, {
      key: '469026',
      value: '昌江县'
    }, {
      key: '469027',
      value: '乐东县'
    }, {
      key: '469028',
      value: '陵水县'
    }, {
      key: '469029',
      value: '保亭县'
    }, {
      key: '469030',
      value: '琼中县'
    }]
  }, {
    key: '500000',
    value: '重庆市',
    children: [{
      key: '500101',
      value: '万州区'
    }, {
      key: '500102',
      value: '涪陵区'
    }, {
      key: '500103',
      value: '渝中区'
    }, {
      key: '500104',
      value: '大渡口区'
    }, {
      key: '500105',
      value: '江北区'
    }, {
      key: '500106',
      value: '沙坪坝区'
    }, {
      key: '500107',
      value: '九龙坡区'
    }, {
      key: '500108',
      value: '南岸区'
    }, {
      key: '500109',
      value: '北碚区'
    }, {
      key: '500110',
      value: '綦江区'
    }, {
      key: '500111',
      value: '大足区'
    }, {
      key: '500112',
      value: '渝北区'
    }, {
      key: '500113',
      value: '巴南区'
    }, {
      key: '500114',
      value: '黔江区'
    }, {
      key: '500115',
      value: '长寿区'
    }, {
      key: '500116',
      value: '江津区'
    }, {
      key: '500117',
      value: '合川区'
    }, {
      key: '500118',
      value: '永川区'
    }, {
      key: '500119',
      value: '南川区'
    }, {
      key: '500120',
      value: '璧山区'
    }, {
      key: '500151',
      value: '铜梁区'
    }, {
      key: '500152',
      value: '潼南区'
    }, {
      key: '500153',
      value: '荣昌区'
    }, {
      key: '500154',
      value: '开州区'
    }, {
      key: '500228',
      value: '梁平县'
    }, {
      key: '500229',
      value: '城口县'
    }, {
      key: '500230',
      value: '丰都县'
    }, {
      key: '500231',
      value: '垫江县'
    }, {
      key: '500232',
      value: '武隆县'
    }, {
      key: '500233',
      value: '忠县'
    }, {
      key: '500235',
      value: '云阳县'
    }, {
      key: '500236',
      value: '奉节县'
    }, {
      key: '500237',
      value: '巫山县'
    }, {
      key: '500238',
      value: '巫溪县'
    }, {
      key: '500240',
      value: '石柱县'
    }, {
      key: '500241',
      value: '秀山县'
    }, {
      key: '500242',
      value: '酉阳县'
    }, {
      key: '500243',
      value: '彭水县'
    }]
  }, {
    key: '510000',
    value: '四川省',
    children: [{
      key: '510100',
      value: '成都市',
      children: [{
        key: '510104',
        value: '锦江区'
      }, {
        key: '510105',
        value: '青羊区'
      }, {
        key: '510106',
        value: '金牛区'
      }, {
        key: '510107',
        value: '武侯区'
      }, {
        key: '510108',
        value: '成华区'
      }, {
        key: '510112',
        value: '龙泉驿区'
      }, {
        key: '510113',
        value: '青白江区'
      }, {
        key: '510114',
        value: '新都区'
      }, {
        key: '510115',
        value: '温江区'
      }, {
        key: '510116',
        value: '双流区'
      }, {
        key: '510121',
        value: '金堂县'
      }, {
        key: '510124',
        value: '郫县'
      }, {
        key: '510129',
        value: '大邑县'
      }, {
        key: '510131',
        value: '蒲江县'
      }, {
        key: '510132',
        value: '新津县'
      }, {
        key: '510181',
        value: '都江堰市'
      }, {
        key: '510182',
        value: '彭州市'
      }, {
        key: '510183',
        value: '邛崃市'
      }, {
        key: '510184',
        value: '崇州市'
      }, {
        key: '510185',
        value: '简阳市'
      }]
    }, {
      key: '510300',
      value: '自贡市',
      children: [{
        key: '510302',
        value: '自流井区'
      }, {
        key: '510303',
        value: '贡井区'
      }, {
        key: '510304',
        value: '大安区'
      }, {
        key: '510311',
        value: '沿滩区'
      }, {
        key: '510321',
        value: '荣县'
      }, {
        key: '510322',
        value: '富顺县'
      }]
    }, {
      key: '510400',
      value: '攀枝花市',
      children: [{
        key: '510402',
        value: '东区'
      }, {
        key: '510403',
        value: '西区'
      }, {
        key: '510411',
        value: '仁和区'
      }, {
        key: '510421',
        value: '米易县'
      }, {
        key: '510422',
        value: '盐边县'
      }]
    }, {
      key: '510500',
      value: '泸州市',
      children: [{
        key: '510502',
        value: '江阳区'
      }, {
        key: '510503',
        value: '纳溪区'
      }, {
        key: '510504',
        value: '龙马潭区'
      }, {
        key: '510521',
        value: '泸县'
      }, {
        key: '510522',
        value: '合江县'
      }, {
        key: '510524',
        value: '叙永县'
      }, {
        key: '510525',
        value: '古蔺县'
      }]
    }, {
      key: '510600',
      value: '德阳市',
      children: [{
        key: '510603',
        value: '旌阳区'
      }, {
        key: '510623',
        value: '中江县'
      }, {
        key: '510626',
        value: '罗江县'
      }, {
        key: '510681',
        value: '广汉市'
      }, {
        key: '510682',
        value: '什邡市'
      }, {
        key: '510683',
        value: '绵竹市'
      }]
    }, {
      key: '510700',
      value: '绵阳市',
      children: [{
        key: '510703',
        value: '涪城区'
      }, {
        key: '510704',
        value: '游仙区'
      }, {
        key: '510705',
        value: '安州区'
      }, {
        key: '510722',
        value: '三台县'
      }, {
        key: '510723',
        value: '盐亭县'
      }, {
        key: '510725',
        value: '梓潼县'
      }, {
        key: '510726',
        value: '北川县'
      }, {
        key: '510727',
        value: '平武县'
      }, {
        key: '510781',
        value: '江油市'
      }]
    }, {
      key: '510800',
      value: '广元市',
      children: [{
        key: '510802',
        value: '利州区'
      }, {
        key: '510811',
        value: '昭化区'
      }, {
        key: '510812',
        value: '朝天区'
      }, {
        key: '510821',
        value: '旺苍县'
      }, {
        key: '510822',
        value: '青川县'
      }, {
        key: '510823',
        value: '剑阁县'
      }, {
        key: '510824',
        value: '苍溪县'
      }]
    }, {
      key: '510900',
      value: '遂宁市',
      children: [{
        key: '510903',
        value: '船山区'
      }, {
        key: '510904',
        value: '安居区'
      }, {
        key: '510921',
        value: '蓬溪县'
      }, {
        key: '510922',
        value: '射洪县'
      }, {
        key: '510923',
        value: '大英县'
      }]
    }, {
      key: '511000',
      value: '内江市',
      children: [{
        key: '511002',
        value: '市中区'
      }, {
        key: '511011',
        value: '东兴区'
      }, {
        key: '511024',
        value: '威远县'
      }, {
        key: '511025',
        value: '资中县'
      }, {
        key: '511028',
        value: '隆昌县'
      }]
    }, {
      key: '511100',
      value: '乐山市',
      children: [{
        key: '511102',
        value: '市中区'
      }, {
        key: '511111',
        value: '沙湾区'
      }, {
        key: '511112',
        value: '五通桥区'
      }, {
        key: '511113',
        value: '金口河区'
      }, {
        key: '511123',
        value: '犍为县'
      }, {
        key: '511124',
        value: '井研县'
      }, {
        key: '511126',
        value: '夹江县'
      }, {
        key: '511129',
        value: '沐川县'
      }, {
        key: '511132',
        value: '峨边县'
      }, {
        key: '511133',
        value: '马边县'
      }, {
        key: '511181',
        value: '峨眉山市'
      }]
    }, {
      key: '511300',
      value: '南充市',
      children: [{
        key: '511302',
        value: '顺庆区'
      }, {
        key: '511303',
        value: '高坪区'
      }, {
        key: '511304',
        value: '嘉陵区'
      }, {
        key: '511321',
        value: '南部县'
      }, {
        key: '511322',
        value: '营山县'
      }, {
        key: '511323',
        value: '蓬安县'
      }, {
        key: '511324',
        value: '仪陇县'
      }, {
        key: '511325',
        value: '西充县'
      }, {
        key: '511381',
        value: '阆中市'
      }]
    }, {
      key: '511400',
      value: '眉山市',
      children: [{
        key: '511402',
        value: '东坡区'
      }, {
        key: '511403',
        value: '彭山区'
      }, {
        key: '511421',
        value: '仁寿县'
      }, {
        key: '511423',
        value: '洪雅县'
      }, {
        key: '511424',
        value: '丹棱县'
      }, {
        key: '511425',
        value: '青神县'
      }]
    }, {
      key: '511500',
      value: '宜宾市',
      children: [{
        key: '511502',
        value: '翠屏区'
      }, {
        key: '511503',
        value: '南溪区'
      }, {
        key: '511521',
        value: '宜宾县'
      }, {
        key: '511523',
        value: '江安县'
      }, {
        key: '511524',
        value: '长宁县'
      }, {
        key: '511525',
        value: '高县'
      }, {
        key: '511526',
        value: '珙县'
      }, {
        key: '511527',
        value: '筠连县'
      }, {
        key: '511528',
        value: '兴文县'
      }, {
        key: '511529',
        value: '屏山县'
      }]
    }, {
      key: '511600',
      value: '广安市',
      children: [{
        key: '511602',
        value: '广安区'
      }, {
        key: '511603',
        value: '前锋区'
      }, {
        key: '511621',
        value: '岳池县'
      }, {
        key: '511622',
        value: '武胜县'
      }, {
        key: '511623',
        value: '邻水县'
      }, {
        key: '511681',
        value: '华蓥市'
      }]
    }, {
      key: '511700',
      value: '达州市',
      children: [{
        key: '511702',
        value: '通川区'
      }, {
        key: '511703',
        value: '达川区'
      }, {
        key: '511722',
        value: '宣汉县'
      }, {
        key: '511723',
        value: '开江县'
      }, {
        key: '511724',
        value: '大竹县'
      }, {
        key: '511725',
        value: '渠县'
      }, {
        key: '511781',
        value: '万源市'
      }]
    }, {
      key: '511800',
      value: '雅安市',
      children: [{
        key: '511802',
        value: '雨城区'
      }, {
        key: '511803',
        value: '名山区'
      }, {
        key: '511822',
        value: '荥经县'
      }, {
        key: '511823',
        value: '汉源县'
      }, {
        key: '511824',
        value: '石棉县'
      }, {
        key: '511825',
        value: '天全县'
      }, {
        key: '511826',
        value: '芦山县'
      }, {
        key: '511827',
        value: '宝兴县'
      }]
    }, {
      key: '511900',
      value: '巴中市',
      children: [{
        key: '511902',
        value: '巴州区'
      }, {
        key: '511903',
        value: '恩阳区'
      }, {
        key: '511921',
        value: '通江县'
      }, {
        key: '511922',
        value: '南江县'
      }, {
        key: '511923',
        value: '平昌县'
      }]
    }, {
      key: '512000',
      value: '资阳市',
      children: [{
        key: '512002',
        value: '雁江区'
      }, {
        key: '512021',
        value: '安岳县'
      }, {
        key: '512022',
        value: '乐至县'
      }]
    }, {
      key: '513200',
      value: '阿坝州',
      children: [{
        key: '513201',
        value: '马尔康市'
      }, {
        key: '513221',
        value: '汶川县'
      }, {
        key: '513222',
        value: '理县'
      }, {
        key: '513223',
        value: '茂县'
      }, {
        key: '513224',
        value: '松潘县'
      }, {
        key: '513225',
        value: '九寨沟县'
      }, {
        key: '513226',
        value: '金川县'
      }, {
        key: '513227',
        value: '小金县'
      }, {
        key: '513228',
        value: '黑水县'
      }, {
        key: '513230',
        value: '壤塘县'
      }, {
        key: '513231',
        value: '阿坝县'
      }, {
        key: '513232',
        value: '若尔盖县'
      }, {
        key: '513233',
        value: '红原县'
      }]
    }, {
      key: '513300',
      value: '甘孜州',
      children: [{
        key: '513301',
        value: '康定市'
      }, {
        key: '513322',
        value: '泸定县'
      }, {
        key: '513323',
        value: '丹巴县'
      }, {
        key: '513324',
        value: '九龙县'
      }, {
        key: '513325',
        value: '雅江县'
      }, {
        key: '513326',
        value: '道孚县'
      }, {
        key: '513327',
        value: '炉霍县'
      }, {
        key: '513328',
        value: '甘孜县'
      }, {
        key: '513329',
        value: '新龙县'
      }, {
        key: '513330',
        value: '德格县'
      }, {
        key: '513331',
        value: '白玉县'
      }, {
        key: '513332',
        value: '石渠县'
      }, {
        key: '513333',
        value: '色达县'
      }, {
        key: '513334',
        value: '理塘县'
      }, {
        key: '513335',
        value: '巴塘县'
      }, {
        key: '513336',
        value: '乡城县'
      }, {
        key: '513337',
        value: '稻城县'
      }, {
        key: '513338',
        value: '得荣县'
      }]
    }, {
      key: '513400',
      value: '凉山州',
      children: [{
        key: '513401',
        value: '西昌市'
      }, {
        key: '513422',
        value: '木里县'
      }, {
        key: '513423',
        value: '盐源县'
      }, {
        key: '513424',
        value: '德昌县'
      }, {
        key: '513425',
        value: '会理县'
      }, {
        key: '513426',
        value: '会东县'
      }, {
        key: '513427',
        value: '宁南县'
      }, {
        key: '513428',
        value: '普格县'
      }, {
        key: '513429',
        value: '布拖县'
      }, {
        key: '513430',
        value: '金阳县'
      }, {
        key: '513431',
        value: '昭觉县'
      }, {
        key: '513432',
        value: '喜德县'
      }, {
        key: '513433',
        value: '冕宁县'
      }, {
        key: '513434',
        value: '越西县'
      }, {
        key: '513435',
        value: '甘洛县'
      }, {
        key: '513436',
        value: '美姑县'
      }, {
        key: '513437',
        value: '雷波县'
      }]
    }]
  }, {
    key: '520000',
    value: '贵州省',
    children: [{
      key: '520100',
      value: '贵阳市',
      children: [{
        key: '520102',
        value: '南明区'
      }, {
        key: '520103',
        value: '云岩区'
      }, {
        key: '520111',
        value: '花溪区'
      }, {
        key: '520112',
        value: '乌当区'
      }, {
        key: '520113',
        value: '白云区'
      }, {
        key: '520115',
        value: '观山湖区'
      }, {
        key: '520121',
        value: '开阳县'
      }, {
        key: '520122',
        value: '息烽县'
      }, {
        key: '520123',
        value: '修文县'
      }, {
        key: '520181',
        value: '清镇市'
      }]
    }, {
      key: '520200',
      value: '六盘水市',
      children: [{
        key: '520201',
        value: '钟山区'
      }, {
        key: '520203',
        value: '六枝特区'
      }, {
        key: '520221',
        value: '水城县'
      }, {
        key: '520222',
        value: '盘县'
      }]
    }, {
      key: '520300',
      value: '遵义市',
      children: [{
        key: '520302',
        value: '红花岗区'
      }, {
        key: '520303',
        value: '汇川区'
      }, {
        key: '520304',
        value: '播州区'
      }, {
        key: '520322',
        value: '桐梓县'
      }, {
        key: '520323',
        value: '绥阳县'
      }, {
        key: '520324',
        value: '正安县'
      }, {
        key: '520325',
        value: '道真县'
      }, {
        key: '520326',
        value: '务川县'
      }, {
        key: '520327',
        value: '凤冈县'
      }, {
        key: '520328',
        value: '湄潭县'
      }, {
        key: '520329',
        value: '余庆县'
      }, {
        key: '520330',
        value: '习水县'
      }, {
        key: '520381',
        value: '赤水市'
      }, {
        key: '520382',
        value: '仁怀市'
      }]
    }, {
      key: '520400',
      value: '安顺市',
      children: [{
        key: '520402',
        value: '西秀区'
      }, {
        key: '520403',
        value: '平坝区'
      }, {
        key: '520422',
        value: '普定县'
      }, {
        key: '520423',
        value: '镇宁县'
      }, {
        key: '520424',
        value: '关岭县'
      }, {
        key: '520425',
        value: '紫云县'
      }]
    }, {
      key: '520500',
      value: '毕节市',
      children: [{
        key: '520502',
        value: '七星关区'
      }, {
        key: '520521',
        value: '大方县'
      }, {
        key: '520522',
        value: '黔西县'
      }, {
        key: '520523',
        value: '金沙县'
      }, {
        key: '520524',
        value: '织金县'
      }, {
        key: '520525',
        value: '纳雍县'
      }, {
        key: '520526',
        value: '威宁县'
      }, {
        key: '520527',
        value: '赫章县'
      }]
    }, {
      key: '520600',
      value: '铜仁市',
      children: [{
        key: '520602',
        value: '碧江区'
      }, {
        key: '520603',
        value: '万山区'
      }, {
        key: '520621',
        value: '江口县'
      }, {
        key: '520622',
        value: '玉屏县'
      }, {
        key: '520623',
        value: '石阡县'
      }, {
        key: '520624',
        value: '思南县'
      }, {
        key: '520625',
        value: '印江县'
      }, {
        key: '520626',
        value: '德江县'
      }, {
        key: '520627',
        value: '沿河县'
      }, {
        key: '520628',
        value: '松桃县'
      }]
    }, {
      key: '522300',
      value: '黔西南',
      children: [{
        key: '522301',
        value: '兴义市'
      }, {
        key: '522322',
        value: '兴仁县'
      }, {
        key: '522323',
        value: '普安县'
      }, {
        key: '522324',
        value: '晴隆县'
      }, {
        key: '522325',
        value: '贞丰县'
      }, {
        key: '522326',
        value: '望谟县'
      }, {
        key: '522327',
        value: '册亨县'
      }, {
        key: '522328',
        value: '安龙县'
      }]
    }, {
      key: '522600',
      value: '黔东南',
      children: [{
        key: '522601',
        value: '凯里市'
      }, {
        key: '522622',
        value: '黄平县'
      }, {
        key: '522623',
        value: '施秉县'
      }, {
        key: '522624',
        value: '三穗县'
      }, {
        key: '522625',
        value: '镇远县'
      }, {
        key: '522626',
        value: '岑巩县'
      }, {
        key: '522627',
        value: '天柱县'
      }, {
        key: '522628',
        value: '锦屏县'
      }, {
        key: '522629',
        value: '剑河县'
      }, {
        key: '522630',
        value: '台江县'
      }, {
        key: '522631',
        value: '黎平县'
      }, {
        key: '522632',
        value: '榕江县'
      }, {
        key: '522633',
        value: '从江县'
      }, {
        key: '522634',
        value: '雷山县'
      }, {
        key: '522635',
        value: '麻江县'
      }, {
        key: '522636',
        value: '丹寨县'
      }]
    }, {
      key: '522700',
      value: '黔南',
      children: [{
        key: '522701',
        value: '都匀市'
      }, {
        key: '522702',
        value: '福泉市'
      }, {
        key: '522722',
        value: '荔波县'
      }, {
        key: '522723',
        value: '贵定县'
      }, {
        key: '522725',
        value: '瓮安县'
      }, {
        key: '522726',
        value: '独山县'
      }, {
        key: '522727',
        value: '平塘县'
      }, {
        key: '522728',
        value: '罗甸县'
      }, {
        key: '522729',
        value: '长顺县'
      }, {
        key: '522730',
        value: '龙里县'
      }, {
        key: '522731',
        value: '惠水县'
      }, {
        key: '522732',
        value: '三都县'
      }]
    }]
  }, {
    key: '530000',
    value: '云南省',
    children: [{
      key: '530100',
      value: '昆明市',
      children: [{
        key: '530102',
        value: '五华区'
      }, {
        key: '530103',
        value: '盘龙区'
      }, {
        key: '530111',
        value: '官渡区'
      }, {
        key: '530112',
        value: '西山区'
      }, {
        key: '530113',
        value: '东川区'
      }, {
        key: '530114',
        value: '呈贡区'
      }, {
        key: '530122',
        value: '晋宁县'
      }, {
        key: '530124',
        value: '富民县'
      }, {
        key: '530125',
        value: '宜良县'
      }, {
        key: '530126',
        value: '石林县'
      }, {
        key: '530127',
        value: '嵩明县'
      }, {
        key: '530128',
        value: '禄劝县'
      }, {
        key: '530129',
        value: '寻甸县'
      }, {
        key: '530181',
        value: '安宁市'
      }]
    }, {
      key: '530300',
      value: '曲靖市',
      children: [{
        key: '530302',
        value: '麒麟区'
      }, {
        key: '530303',
        value: '沾益区'
      }, {
        key: '530321',
        value: '马龙县'
      }, {
        key: '530322',
        value: '陆良县'
      }, {
        key: '530323',
        value: '师宗县'
      }, {
        key: '530324',
        value: '罗平县'
      }, {
        key: '530325',
        value: '富源县'
      }, {
        key: '530326',
        value: '会泽县'
      }, {
        key: '530381',
        value: '宣威市'
      }]
    }, {
      key: '530400',
      value: '玉溪市',
      children: [{
        key: '530402',
        value: '红塔区'
      }, {
        key: '530403',
        value: '江川区'
      }, {
        key: '530422',
        value: '澄江县'
      }, {
        key: '530423',
        value: '通海县'
      }, {
        key: '530424',
        value: '华宁县'
      }, {
        key: '530425',
        value: '易门县'
      }, {
        key: '530426',
        value: '峨山县'
      }, {
        key: '530427',
        value: '新平县'
      }, {
        key: '530428',
        value: '元江县'
      }]
    }, {
      key: '530500',
      value: '保山市',
      children: [{
        key: '530502',
        value: '隆阳区'
      }, {
        key: '530521',
        value: '施甸县'
      }, {
        key: '530523',
        value: '龙陵县'
      }, {
        key: '530524',
        value: '昌宁县'
      }, {
        key: '530581',
        value: '腾冲市'
      }]
    }, {
      key: '530600',
      value: '昭通市',
      children: [{
        key: '530602',
        value: '昭阳区'
      }, {
        key: '530621',
        value: '鲁甸县'
      }, {
        key: '530622',
        value: '巧家县'
      }, {
        key: '530623',
        value: '盐津县'
      }, {
        key: '530624',
        value: '大关县'
      }, {
        key: '530625',
        value: '永善县'
      }, {
        key: '530626',
        value: '绥江县'
      }, {
        key: '530627',
        value: '镇雄县'
      }, {
        key: '530628',
        value: '彝良县'
      }, {
        key: '530629',
        value: '威信县'
      }, {
        key: '530630',
        value: '水富县'
      }]
    }, {
      key: '530700',
      value: '丽江市',
      children: [{
        key: '530702',
        value: '古城区'
      }, {
        key: '530721',
        value: '玉龙县'
      }, {
        key: '530722',
        value: '永胜县'
      }, {
        key: '530723',
        value: '华坪县'
      }, {
        key: '530724',
        value: '宁蒗县'
      }]
    }, {
      key: '530800',
      value: '普洱市',
      children: [{
        key: '530802',
        value: '思茅区'
      }, {
        key: '530821',
        value: '宁洱县'
      }, {
        key: '530822',
        value: '墨江县'
      }, {
        key: '530823',
        value: '景东县'
      }, {
        key: '530824',
        value: '景谷县'
      }, {
        key: '530825',
        value: '镇沅县'
      }, {
        key: '530826',
        value: '江城县'
      }, {
        key: '530827',
        value: '孟连县'
      }, {
        key: '530828',
        value: '澜沧县'
      }, {
        key: '530829',
        value: '西盟县'
      }]
    }, {
      key: '530900',
      value: '临沧市',
      children: [{
        key: '530902',
        value: '临翔区'
      }, {
        key: '530921',
        value: '凤庆县'
      }, {
        key: '530922',
        value: '云县'
      }, {
        key: '530923',
        value: '永德县'
      }, {
        key: '530924',
        value: '镇康县'
      }, {
        key: '530925',
        value: '双江县'
      }, {
        key: '530926',
        value: '耿马县'
      }, {
        key: '530927',
        value: '沧源县'
      }]
    }, {
      key: '532300',
      value: '楚雄州',
      children: [{
        key: '532301',
        value: '楚雄市'
      }, {
        key: '532322',
        value: '双柏县'
      }, {
        key: '532323',
        value: '牟定县'
      }, {
        key: '532324',
        value: '南华县'
      }, {
        key: '532325',
        value: '姚安县'
      }, {
        key: '532326',
        value: '大姚县'
      }, {
        key: '532327',
        value: '永仁县'
      }, {
        key: '532328',
        value: '元谋县'
      }, {
        key: '532329',
        value: '武定县'
      }, {
        key: '532331',
        value: '禄丰县'
      }]
    }, {
      key: '532500',
      value: '红河州',
      children: [{
        key: '532501',
        value: '个旧市'
      }, {
        key: '532502',
        value: '开远市'
      }, {
        key: '532503',
        value: '蒙自市'
      }, {
        key: '532504',
        value: '弥勒市'
      }, {
        key: '532523',
        value: '屏边县'
      }, {
        key: '532524',
        value: '建水县'
      }, {
        key: '532525',
        value: '石屏县'
      }, {
        key: '532527',
        value: '泸西县'
      }, {
        key: '532528',
        value: '元阳县'
      }, {
        key: '532529',
        value: '红河县'
      }, {
        key: '532530',
        value: '金平县'
      }, {
        key: '532531',
        value: '绿春县'
      }, {
        key: '532532',
        value: '河口县'
      }]
    }, {
      key: '532600',
      value: '文山州',
      children: [{
        key: '532601',
        value: '文山市'
      }, {
        key: '532622',
        value: '砚山县'
      }, {
        key: '532623',
        value: '西畴县'
      }, {
        key: '532624',
        value: '麻栗坡县'
      }, {
        key: '532625',
        value: '马关县'
      }, {
        key: '532626',
        value: '丘北县'
      }, {
        key: '532627',
        value: '广南县'
      }, {
        key: '532628',
        value: '富宁县'
      }]
    }, {
      key: '532800',
      value: '西双版纳',
      children: [{
        key: '532801',
        value: '景洪市'
      }, {
        key: '532822',
        value: '勐海县'
      }, {
        key: '532823',
        value: '勐腊县'
      }]
    }, {
      key: '532900',
      value: '大理',
      children: [{
        key: '532901',
        value: '大理市'
      }, {
        key: '532922',
        value: '漾濞县'
      }, {
        key: '532923',
        value: '祥云县'
      }, {
        key: '532924',
        value: '宾川县'
      }, {
        key: '532925',
        value: '弥渡县'
      }, {
        key: '532926',
        value: '南涧县'
      }, {
        key: '532927',
        value: '巍山县'
      }, {
        key: '532928',
        value: '永平县'
      }, {
        key: '532929',
        value: '云龙县'
      }, {
        key: '532930',
        value: '洱源县'
      }, {
        key: '532931',
        value: '剑川县'
      }, {
        key: '532932',
        value: '鹤庆县'
      }]
    }, {
      key: '533100',
      value: '德宏州',
      children: [{
        key: '533102',
        value: '瑞丽市'
      }, {
        key: '533103',
        value: '芒市'
      }, {
        key: '533122',
        value: '梁河县'
      }, {
        key: '533123',
        value: '盈江县'
      }, {
        key: '533124',
        value: '陇川县'
      }]
    }, {
      key: '533300',
      value: '怒江州',
      children: [{
        key: '533301',
        value: '泸水市'
      }, {
        key: '533323',
        value: '福贡县'
      }, {
        key: '533324',
        value: '贡山县'
      }, {
        key: '533325',
        value: '兰坪县'
      }]
    }, {
      key: '533400',
      value: '迪庆州',
      children: [{
        key: '533401',
        value: '香格里拉市'
      }, {
        key: '533422',
        value: '德钦县'
      }, {
        key: '533423',
        value: '维西县'
      }]
    }]
  }, {
    key: '540000',
    value: '西藏',
    children: [{
      key: '540100',
      value: '拉萨市',
      children: [{
        key: '540102',
        value: '城关区'
      }, {
        key: '540103',
        value: '堆龙德庆区'
      }, {
        key: '540121',
        value: '林周县'
      }, {
        key: '540122',
        value: '当雄县'
      }, {
        key: '540123',
        value: '尼木县'
      }, {
        key: '540124',
        value: '曲水县'
      }, {
        key: '540126',
        value: '达孜县'
      }, {
        key: '540127',
        value: '墨竹工卡县'
      }]
    }, {
      key: '540200',
      value: '日喀则市',
      children: [{
        key: '540202',
        value: '桑珠孜区'
      }, {
        key: '540221',
        value: '南木林县'
      }, {
        key: '540222',
        value: '江孜县'
      }, {
        key: '540223',
        value: '定日县'
      }, {
        key: '540224',
        value: '萨迦县'
      }, {
        key: '540225',
        value: '拉孜县'
      }, {
        key: '540226',
        value: '昂仁县'
      }, {
        key: '540227',
        value: '谢通门县'
      }, {
        key: '540228',
        value: '白朗县'
      }, {
        key: '540229',
        value: '仁布县'
      }, {
        key: '540230',
        value: '康马县'
      }, {
        key: '540231',
        value: '定结县'
      }, {
        key: '540232',
        value: '仲巴县'
      }, {
        key: '540233',
        value: '亚东县'
      }, {
        key: '540234',
        value: '吉隆县'
      }, {
        key: '540235',
        value: '聂拉木县'
      }, {
        key: '540236',
        value: '萨嘎县'
      }, {
        key: '540237',
        value: '岗巴县'
      }]
    }, {
      key: '540300',
      value: '昌都市',
      children: [{
        key: '540302',
        value: '卡若区'
      }, {
        key: '540321',
        value: '江达县'
      }, {
        key: '540322',
        value: '贡觉县'
      }, {
        key: '540323',
        value: '类乌齐县'
      }, {
        key: '540324',
        value: '丁青县'
      }, {
        key: '540325',
        value: '察雅县'
      }, {
        key: '540326',
        value: '八宿县'
      }, {
        key: '540327',
        value: '左贡县'
      }, {
        key: '540328',
        value: '芒康县'
      }, {
        key: '540329',
        value: '洛隆县'
      }, {
        key: '540330',
        value: '边坝县'
      }]
    }, {
      key: '540400',
      value: '林芝市',
      children: [{
        key: '540402',
        value: '巴宜区'
      }, {
        key: '540421',
        value: '工布江达县'
      }, {
        key: '540422',
        value: '米林县'
      }, {
        key: '540423',
        value: '墨脱县'
      }, {
        key: '540424',
        value: '波密县'
      }, {
        key: '540425',
        value: '察隅县'
      }, {
        key: '540426',
        value: '朗县'
      }]
    }, {
      key: '540500',
      value: '山南市',
      children: [{
        key: '540502',
        value: '乃东区'
      }, {
        key: '540521',
        value: '扎囊县'
      }, {
        key: '540522',
        value: '贡嘎县'
      }, {
        key: '540523',
        value: '桑日县'
      }, {
        key: '540524',
        value: '琼结县'
      }, {
        key: '540525',
        value: '曲松县'
      }, {
        key: '540526',
        value: '措美县'
      }, {
        key: '540527',
        value: '洛扎县'
      }, {
        key: '540528',
        value: '加查县'
      }, {
        key: '540529',
        value: '隆子县'
      }, {
        key: '540530',
        value: '错那县'
      }, {
        key: '540531',
        value: '浪卡子县'
      }]
    }, {
      key: '542400',
      value: '那曲',
      children: [{
        key: '542421',
        value: '那曲县'
      }, {
        key: '542422',
        value: '嘉黎县'
      }, {
        key: '542423',
        value: '比如县'
      }, {
        key: '542424',
        value: '聂荣县'
      }, {
        key: '542425',
        value: '安多县'
      }, {
        key: '542426',
        value: '申扎县'
      }, {
        key: '542427',
        value: '索县'
      }, {
        key: '542428',
        value: '班戈县'
      }, {
        key: '542429',
        value: '巴青县'
      }, {
        key: '542430',
        value: '尼玛县'
      }, {
        key: '542431',
        value: '双湖县'
      }]
    }, {
      key: '542500',
      value: '阿里',
      children: [{
        key: '542521',
        value: '普兰县'
      }, {
        key: '542522',
        value: '札达县'
      }, {
        key: '542523',
        value: '噶尔县'
      }, {
        key: '542524',
        value: '日土县'
      }, {
        key: '542525',
        value: '革吉县'
      }, {
        key: '542526',
        value: '改则县'
      }, {
        key: '542527',
        value: '措勤县'
      }]
    }]
  }, {
    key: '610000',
    value: '陕西省',
    children: [{
      key: '610100',
      value: '西安市',
      children: [{
        key: '610102',
        value: '新城区'
      }, {
        key: '610103',
        value: '碑林区'
      }, {
        key: '610104',
        value: '莲湖区'
      }, {
        key: '610111',
        value: '灞桥区'
      }, {
        key: '610112',
        value: '未央区'
      }, {
        key: '610113',
        value: '雁塔区'
      }, {
        key: '610114',
        value: '阎良区'
      }, {
        key: '610115',
        value: '临潼区'
      }, {
        key: '610116',
        value: '长安区'
      }, {
        key: '610117',
        value: '高陵区'
      }, {
        key: '610122',
        value: '蓝田县'
      }, {
        key: '610124',
        value: '周至县'
      }, {
        key: '610125',
        value: '户县'
      }]
    }, {
      key: '610200',
      value: '铜川市',
      children: [{
        key: '610202',
        value: '王益区'
      }, {
        key: '610203',
        value: '印台区'
      }, {
        key: '610204',
        value: '耀州区'
      }, {
        key: '610222',
        value: '宜君县'
      }]
    }, {
      key: '610300',
      value: '宝鸡市',
      children: [{
        key: '610302',
        value: '渭滨区'
      }, {
        key: '610303',
        value: '金台区'
      }, {
        key: '610304',
        value: '陈仓区'
      }, {
        key: '610322',
        value: '凤翔县'
      }, {
        key: '610323',
        value: '岐山县'
      }, {
        key: '610324',
        value: '扶风县'
      }, {
        key: '610326',
        value: '眉县'
      }, {
        key: '610327',
        value: '陇县'
      }, {
        key: '610328',
        value: '千阳县'
      }, {
        key: '610329',
        value: '麟游县'
      }, {
        key: '610330',
        value: '凤县'
      }, {
        key: '610331',
        value: '太白县'
      }]
    }, {
      key: '610400',
      value: '咸阳市',
      children: [{
        key: '610402',
        value: '秦都区'
      }, {
        key: '610403',
        value: '杨陵区'
      }, {
        key: '610404',
        value: '渭城区'
      }, {
        key: '610422',
        value: '三原县'
      }, {
        key: '610423',
        value: '泾阳县'
      }, {
        key: '610424',
        value: '乾县'
      }, {
        key: '610425',
        value: '礼泉县'
      }, {
        key: '610426',
        value: '永寿县'
      }, {
        key: '610427',
        value: '彬县'
      }, {
        key: '610428',
        value: '长武县'
      }, {
        key: '610429',
        value: '旬邑县'
      }, {
        key: '610430',
        value: '淳化县'
      }, {
        key: '610431',
        value: '武功县'
      }, {
        key: '610481',
        value: '兴平市'
      }]
    }, {
      key: '610500',
      value: '渭南市',
      children: [{
        key: '610502',
        value: '临渭区'
      }, {
        key: '610503',
        value: '华州区'
      }, {
        key: '610522',
        value: '潼关县'
      }, {
        key: '610523',
        value: '大荔县'
      }, {
        key: '610524',
        value: '合阳县'
      }, {
        key: '610525',
        value: '澄城县'
      }, {
        key: '610526',
        value: '蒲城县'
      }, {
        key: '610527',
        value: '白水县'
      }, {
        key: '610528',
        value: '富平县'
      }, {
        key: '610581',
        value: '韩城市'
      }, {
        key: '610582',
        value: '华阴市'
      }]
    }, {
      key: '610600',
      value: '延安市',
      children: [{
        key: '610602',
        value: '宝塔区'
      }, {
        key: '610603',
        value: '安塞区'
      }, {
        key: '610621',
        value: '延长县'
      }, {
        key: '610622',
        value: '延川县'
      }, {
        key: '610623',
        value: '子长县'
      }, {
        key: '610625',
        value: '志丹县'
      }, {
        key: '610626',
        value: '吴起县'
      }, {
        key: '610627',
        value: '甘泉县'
      }, {
        key: '610628',
        value: '富县'
      }, {
        key: '610629',
        value: '洛川县'
      }, {
        key: '610630',
        value: '宜川县'
      }, {
        key: '610631',
        value: '黄龙县'
      }, {
        key: '610632',
        value: '黄陵县'
      }]
    }, {
      key: '610700',
      value: '汉中市',
      children: [{
        key: '610702',
        value: '汉台区'
      }, {
        key: '610721',
        value: '南郑县'
      }, {
        key: '610722',
        value: '城固县'
      }, {
        key: '610723',
        value: '洋县'
      }, {
        key: '610724',
        value: '西乡县'
      }, {
        key: '610725',
        value: '勉县'
      }, {
        key: '610726',
        value: '宁强县'
      }, {
        key: '610727',
        value: '略阳县'
      }, {
        key: '610728',
        value: '镇巴县'
      }, {
        key: '610729',
        value: '留坝县'
      }, {
        key: '610730',
        value: '佛坪县'
      }]
    }, {
      key: '610800',
      value: '榆林市',
      children: [{
        key: '610802',
        value: '榆阳区'
      }, {
        key: '610803',
        value: '横山区'
      }, {
        key: '610821',
        value: '神木县'
      }, {
        key: '610822',
        value: '府谷县'
      }, {
        key: '610824',
        value: '靖边县'
      }, {
        key: '610825',
        value: '定边县'
      }, {
        key: '610826',
        value: '绥德县'
      }, {
        key: '610827',
        value: '米脂县'
      }, {
        key: '610828',
        value: '佳县'
      }, {
        key: '610829',
        value: '吴堡县'
      }, {
        key: '610830',
        value: '清涧县'
      }, {
        key: '610831',
        value: '子洲县'
      }]
    }, {
      key: '610900',
      value: '安康市',
      children: [{
        key: '610902',
        value: '汉滨区'
      }, {
        key: '610921',
        value: '汉阴县'
      }, {
        key: '610922',
        value: '石泉县'
      }, {
        key: '610923',
        value: '宁陕县'
      }, {
        key: '610924',
        value: '紫阳县'
      }, {
        key: '610925',
        value: '岚皋县'
      }, {
        key: '610926',
        value: '平利县'
      }, {
        key: '610927',
        value: '镇坪县'
      }, {
        key: '610928',
        value: '旬阳县'
      }, {
        key: '610929',
        value: '白河县'
      }]
    }, {
      key: '611000',
      value: '商洛市',
      children: [{
        key: '611002',
        value: '商州区'
      }, {
        key: '611021',
        value: '洛南县'
      }, {
        key: '611022',
        value: '丹凤县'
      }, {
        key: '611023',
        value: '商南县'
      }, {
        key: '611024',
        value: '山阳县'
      }, {
        key: '611025',
        value: '镇安县'
      }, {
        key: '611026',
        value: '柞水县'
      }]
    }]
  }, {
    key: '620000',
    value: '甘肃省',
    children: [{
      key: '620100',
      value: '兰州市',
      children: [{
        key: '620102',
        value: '城关区'
      }, {
        key: '620103',
        value: '七里河区'
      }, {
        key: '620104',
        value: '西固区'
      }, {
        key: '620105',
        value: '安宁区'
      }, {
        key: '620111',
        value: '红古区'
      }, {
        key: '620121',
        value: '永登县'
      }, {
        key: '620122',
        value: '皋兰县'
      }, {
        key: '620123',
        value: '榆中县'
      }]
    }, {
      key: '620200',
      value: '嘉峪关市',
      children: [{}]
    }, {
      key: '620300',
      value: '金昌市',
      children: [{
        key: '620302',
        value: '金川区'
      }, {
        key: '620321',
        value: '永昌县'
      }]
    }, {
      key: '620400',
      value: '白银市',
      children: [{
        key: '620402',
        value: '白银区'
      }, {
        key: '620403',
        value: '平川区'
      }, {
        key: '620421',
        value: '靖远县'
      }, {
        key: '620422',
        value: '会宁县'
      }, {
        key: '620423',
        value: '景泰县'
      }]
    }, {
      key: '620500',
      value: '天水市',
      children: [{
        key: '620502',
        value: '秦州区'
      }, {
        key: '620503',
        value: '麦积区'
      }, {
        key: '620521',
        value: '清水县'
      }, {
        key: '620522',
        value: '秦安县'
      }, {
        key: '620523',
        value: '甘谷县'
      }, {
        key: '620524',
        value: '武山县'
      }, {
        key: '620525',
        value: '张家川县'
      }]
    }, {
      key: '620600',
      value: '武威市',
      children: [{
        key: '620602',
        value: '凉州区'
      }, {
        key: '620621',
        value: '民勤县'
      }, {
        key: '620622',
        value: '古浪县'
      }, {
        key: '620623',
        value: '天祝县'
      }]
    }, {
      key: '620700',
      value: '张掖市',
      children: [{
        key: '620702',
        value: '甘州区'
      }, {
        key: '620721',
        value: '肃南县'
      }, {
        key: '620722',
        value: '民乐县'
      }, {
        key: '620723',
        value: '临泽县'
      }, {
        key: '620724',
        value: '高台县'
      }, {
        key: '620725',
        value: '山丹县'
      }]
    }, {
      key: '620800',
      value: '平凉市',
      children: [{
        key: '620802',
        value: '崆峒区'
      }, {
        key: '620821',
        value: '泾川县'
      }, {
        key: '620822',
        value: '灵台县'
      }, {
        key: '620823',
        value: '崇信县'
      }, {
        key: '620824',
        value: '华亭县'
      }, {
        key: '620825',
        value: '庄浪县'
      }, {
        key: '620826',
        value: '静宁县'
      }]
    }, {
      key: '620900',
      value: '酒泉市',
      children: [{
        key: '620902',
        value: '肃州区'
      }, {
        key: '620921',
        value: '金塔县'
      }, {
        key: '620922',
        value: '瓜州县'
      }, {
        key: '620923',
        value: '肃北县'
      }, {
        key: '620924',
        value: '阿克塞县'
      }, {
        key: '620981',
        value: '玉门市'
      }, {
        key: '620982',
        value: '敦煌市'
      }]
    }, {
      key: '621000',
      value: '庆阳市',
      children: [{
        key: '621002',
        value: '西峰区'
      }, {
        key: '621021',
        value: '庆城县'
      }, {
        key: '621022',
        value: '环县'
      }, {
        key: '621023',
        value: '华池县'
      }, {
        key: '621024',
        value: '合水县'
      }, {
        key: '621025',
        value: '正宁县'
      }, {
        key: '621026',
        value: '宁县'
      }, {
        key: '621027',
        value: '镇原县'
      }]
    }, {
      key: '621100',
      value: '定西市',
      children: [{
        key: '621102',
        value: '安定区'
      }, {
        key: '621121',
        value: '通渭县'
      }, {
        key: '621122',
        value: '陇西县'
      }, {
        key: '621123',
        value: '渭源县'
      }, {
        key: '621124',
        value: '临洮县'
      }, {
        key: '621125',
        value: '漳县'
      }, {
        key: '621126',
        value: '岷县'
      }]
    }, {
      key: '621200',
      value: '陇南市',
      children: [{
        key: '621202',
        value: '武都区'
      }, {
        key: '621221',
        value: '成县'
      }, {
        key: '621222',
        value: '文县'
      }, {
        key: '621223',
        value: '宕昌县'
      }, {
        key: '621224',
        value: '康县'
      }, {
        key: '621225',
        value: '西和县'
      }, {
        key: '621226',
        value: '礼县'
      }, {
        key: '621227',
        value: '徽县'
      }, {
        key: '621228',
        value: '两当县'
      }]
    }, {
      key: '622900',
      value: '临夏州',
      children: [{
        key: '622901',
        value: '临夏市'
      }, {
        key: '622921',
        value: '临夏县'
      }, {
        key: '622922',
        value: '康乐县'
      }, {
        key: '622923',
        value: '永靖县'
      }, {
        key: '622924',
        value: '广河县'
      }, {
        key: '622925',
        value: '和政县'
      }, {
        key: '622926',
        value: '东乡'
      }, {
        key: '622927',
        value: '积石山'
      }]
    }, {
      key: '623000',
      value: '甘南州',
      children: [{
        key: '623001',
        value: '合作市'
      }, {
        key: '623021',
        value: '临潭县'
      }, {
        key: '623022',
        value: '卓尼县'
      }, {
        key: '623023',
        value: '舟曲县'
      }, {
        key: '623024',
        value: '迭部县'
      }, {
        key: '623025',
        value: '玛曲县'
      }, {
        key: '623026',
        value: '碌曲县'
      }, {
        key: '623027',
        value: '夏河县'
      }]
    }]
  }, {
    key: '630000',
    value: '青海省',
    children: [{
      key: '630100',
      value: '西宁市',
      children: [{
        key: '630102',
        value: '城东区'
      }, {
        key: '630103',
        value: '城中区'
      }, {
        key: '630104',
        value: '城西区'
      }, {
        key: '630105',
        value: '城北区'
      }, {
        key: '630121',
        value: '大通县'
      }, {
        key: '630122',
        value: '湟中县'
      }, {
        key: '630123',
        value: '湟源县'
      }]
    }, {
      key: '630200',
      value: '海东市',
      children: [{
        key: '630202',
        value: '乐都区'
      }, {
        key: '630203',
        value: '平安区'
      }, {
        key: '630222',
        value: '民和县'
      }, {
        key: '630223',
        value: '互助县'
      }, {
        key: '630224',
        value: '化隆县'
      }, {
        key: '630225',
        value: '循化县'
      }]
    }, {
      key: '632200',
      value: '海北州',
      children: [{
        key: '632221',
        value: '门源县'
      }, {
        key: '632222',
        value: '祁连县'
      }, {
        key: '632223',
        value: '海晏县'
      }, {
        key: '632224',
        value: '刚察县'
      }]
    }, {
      key: '632300',
      value: '黄南州',
      children: [{
        key: '632321',
        value: '同仁县'
      }, {
        key: '632322',
        value: '尖扎县'
      }, {
        key: '632323',
        value: '泽库县'
      }, {
        key: '632324',
        value: '河南县'
      }]
    }, {
      key: '632500',
      value: '海南州',
      children: [{
        key: '632521',
        value: '共和县'
      }, {
        key: '632522',
        value: '同德县'
      }, {
        key: '632523',
        value: '贵德县'
      }, {
        key: '632524',
        value: '兴海县'
      }, {
        key: '632525',
        value: '贵南县'
      }]
    }, {
      key: '632600',
      value: '果洛州',
      children: [{
        key: '632621',
        value: '玛沁县'
      }, {
        key: '632622',
        value: '班玛县'
      }, {
        key: '632623',
        value: '甘德县'
      }, {
        key: '632624',
        value: '达日县'
      }, {
        key: '632625',
        value: '久治县'
      }, {
        key: '632626',
        value: '玛多县'
      }]
    }, {
      key: '632700',
      value: '玉树州',
      children: [{
        key: '632701',
        value: '玉树市'
      }, {
        key: '632722',
        value: '杂多县'
      }, {
        key: '632723',
        value: '称多县'
      }, {
        key: '632724',
        value: '治多县'
      }, {
        key: '632725',
        value: '囊谦县'
      }, {
        key: '632726',
        value: '曲麻莱县'
      }]
    }, {
      key: '632800',
      value: '海西州',
      children: [{
        key: '632801',
        value: '格尔木市'
      }, {
        key: '632802',
        value: '德令哈市'
      }, {
        key: '632821',
        value: '乌兰县'
      }, {
        key: '632822',
        value: '都兰县'
      }, {
        key: '632823',
        value: '天峻县'
      }]
    }]
  }, {
    key: '640000',
    value: '宁夏',
    children: [{
      key: '640100',
      value: '银川市',
      children: [{
        key: '640104',
        value: '兴庆区'
      }, {
        key: '640105',
        value: '西夏区'
      }, {
        key: '640106',
        value: '金凤区'
      }, {
        key: '640121',
        value: '永宁县'
      }, {
        key: '640122',
        value: '贺兰县'
      }, {
        key: '640181',
        value: '灵武市'
      }]
    }, {
      key: '640200',
      value: '石嘴山市',
      children: [{
        key: '640202',
        value: '大武口区'
      }, {
        key: '640205',
        value: '惠农区'
      }, {
        key: '640221',
        value: '平罗县'
      }]
    }, {
      key: '640300',
      value: '吴忠市',
      children: [{
        key: '640302',
        value: '利通区'
      }, {
        key: '640303',
        value: '红寺堡区'
      }, {
        key: '640323',
        value: '盐池县'
      }, {
        key: '640324',
        value: '同心县'
      }, {
        key: '640381',
        value: '青铜峡市'
      }]
    }, {
      key: '640400',
      value: '固原市',
      children: [{
        key: '640402',
        value: '原州区'
      }, {
        key: '640422',
        value: '西吉县'
      }, {
        key: '640423',
        value: '隆德县'
      }, {
        key: '640424',
        value: '泾源县'
      }, {
        key: '640425',
        value: '彭阳县'
      }]
    }, {
      key: '640500',
      value: '中卫市',
      children: [{
        key: '640502',
        value: '沙坡头区'
      }, {
        key: '640521',
        value: '中宁县'
      }, {
        key: '640522',
        value: '海原县'
      }]
    }]
  }, {
    key: '650000',
    value: '新疆',
    children: [{
      key: '650100',
      value: '乌鲁木齐市',
      children: [{
        key: '650102',
        value: '天山区'
      }, {
        key: '650103',
        value: '沙依巴克区'
      }, {
        key: '650104',
        value: '新市区'
      }, {
        key: '650105',
        value: '水磨沟区'
      }, {
        key: '650106',
        value: '头屯河区'
      }, {
        key: '650107',
        value: '达坂城区'
      }, {
        key: '650109',
        value: '米东区'
      }, {
        key: '650121',
        value: '乌鲁木齐县'
      }]
    }, {
      key: '650200',
      value: '克拉玛依市',
      children: [{
        key: '650202',
        value: '独山子区'
      }, {
        key: '650203',
        value: '克拉玛依区'
      }, {
        key: '650204',
        value: '白碱滩区'
      }, {
        key: '650205',
        value: '乌尔禾区'
      }]
    }, {
      key: '650400',
      value: '吐鲁番',
      children: [{
        key: '650402',
        value: '高昌区'
      }, {
        key: '650421',
        value: '鄯善县'
      }, {
        key: '650422',
        value: '托克逊县'
      }]
    }, {
      key: '650500',
      value: '哈密',
      children: [{
        key: '650502',
        value: '伊州区'
      }, {
        key: '650521',
        value: '巴里坤县'
      }, {
        key: '650522',
        value: '伊吾县'
      }]
    }, {
      key: '652300',
      value: '昌吉',
      children: [{
        key: '652301',
        value: '昌吉市'
      }, {
        key: '652302',
        value: '阜康市'
      }, {
        key: '652323',
        value: '呼图壁县'
      }, {
        key: '652324',
        value: '玛纳斯县'
      }, {
        key: '652325',
        value: '奇台县'
      }, {
        key: '652327',
        value: '吉木萨尔县'
      }, {
        key: '652328',
        value: '木垒县'
      }]
    }, {
      key: '652700',
      value: '博尔塔拉',
      children: [{
        key: '652701',
        value: '博乐市'
      }, {
        key: '652702',
        value: '阿拉山口市'
      }, {
        key: '652722',
        value: '精河县'
      }, {
        key: '652723',
        value: '温泉县'
      }]
    }, {
      key: '652800',
      value: '巴音郭楞',
      children: [{
        key: '652801',
        value: '库尔勒市'
      }, {
        key: '652822',
        value: '轮台县'
      }, {
        key: '652823',
        value: '尉犁县'
      }, {
        key: '652824',
        value: '若羌县'
      }, {
        key: '652825',
        value: '且末县'
      }, {
        key: '652826',
        value: '焉耆县'
      }, {
        key: '652827',
        value: '和静县'
      }, {
        key: '652828',
        value: '和硕县'
      }, {
        key: '652829',
        value: '博湖县'
      }]
    }, {
      key: '652900',
      value: '阿克苏',
      children: [{
        key: '652901',
        value: '阿克苏市'
      }, {
        key: '652922',
        value: '温宿县'
      }, {
        key: '652923',
        value: '库车县'
      }, {
        key: '652924',
        value: '沙雅县'
      }, {
        key: '652925',
        value: '新和县'
      }, {
        key: '652926',
        value: '拜城县'
      }, {
        key: '652927',
        value: '乌什县'
      }, {
        key: '652928',
        value: '阿瓦提县'
      }, {
        key: '652929',
        value: '柯坪县'
      }]
    }, {
      key: '653000',
      value: '克孜勒苏柯尔克孜',
      children: [{
        key: '653001',
        value: '阿图什市'
      }, {
        key: '653022',
        value: '阿克陶县'
      }, {
        key: '653023',
        value: '阿合奇县'
      }, {
        key: '653024',
        value: '乌恰县'
      }]
    }, {
      key: '653100',
      value: '喀什',
      children: [{
        key: '653101',
        value: '喀什市'
      }, {
        key: '653121',
        value: '疏附县'
      }, {
        key: '653122',
        value: '疏勒县'
      }, {
        key: '653123',
        value: '英吉沙县'
      }, {
        key: '653124',
        value: '泽普县'
      }, {
        key: '653125',
        value: '莎车县'
      }, {
        key: '653126',
        value: '叶城县'
      }, {
        key: '653127',
        value: '麦盖提县'
      }, {
        key: '653128',
        value: '岳普湖县'
      }, {
        key: '653129',
        value: '伽师县'
      }, {
        key: '653130',
        value: '巴楚县'
      }, {
        key: '653131',
        value: '塔什库尔干'
      }]
    }, {
      key: '653200',
      value: '和田',
      children: [{
        key: '653201',
        value: '和田市'
      }, {
        key: '653221',
        value: '和田县'
      }, {
        key: '653222',
        value: '墨玉县'
      }, {
        key: '653223',
        value: '皮山县'
      }, {
        key: '653224',
        value: '洛浦县'
      }, {
        key: '653225',
        value: '策勒县'
      }, {
        key: '653226',
        value: '于田县'
      }, {
        key: '653227',
        value: '民丰县'
      }]
    }, {
      key: '654000',
      value: '伊犁',
      children: [{
        key: '654002',
        value: '伊宁市'
      }, {
        key: '654003',
        value: '奎屯市'
      }, {
        key: '654004',
        value: '霍尔果斯市'
      }, {
        key: '654021',
        value: '伊宁县'
      }, {
        key: '654022',
        value: '察布查尔县'
      }, {
        key: '654023',
        value: '霍城县'
      }, {
        key: '654024',
        value: '巩留县'
      }, {
        key: '654025',
        value: '新源县'
      }, {
        key: '654026',
        value: '昭苏县'
      }, {
        key: '654027',
        value: '特克斯县'
      }, {
        key: '654028',
        value: '尼勒克县'
      }]
    }, {
      key: '654200',
      value: '塔城',
      children: [{
        key: '654201',
        value: '塔城市'
      }, {
        key: '654202',
        value: '乌苏市'
      }, {
        key: '654221',
        value: '额敏县'
      }, {
        key: '654223',
        value: '沙湾县'
      }, {
        key: '654224',
        value: '托里县'
      }, {
        key: '654225',
        value: '裕民县'
      }, {
        key: '654226',
        value: '和布克赛尔'
      }]
    }, {
      key: '654300',
      value: '阿勒泰',
      children: [{
        key: '654301',
        value: '阿勒泰市'
      }, {
        key: '654321',
        value: '布尔津县'
      }, {
        key: '654322',
        value: '富蕴县'
      }, {
        key: '654323',
        value: '福海县'
      }, {
        key: '654324',
        value: '哈巴河县'
      }, {
        key: '654325',
        value: '青河县'
      }, {
        key: '654326',
        value: '吉木乃县'
      }]
    }, {
      key: '659001',
      value: '石河子市'
    }, {
      key: '659002',
      value: '阿拉尔市'
    }, {
      key: '659003',
      value: '图木舒克市'
    }, {
      key: '659004',
      value: '五家渠市'
    }, {
      key: '659006',
      value: '铁门关市'
    }]
  },
  {
    key: '710000',
    value: '台湾',
    children: [{
      key: '710100',
      value: '台北市',
      children: [{
        key: '710101',
        value: '中正区'
      }, {
        key: '710102',
        value: '大同区'
      }, {
        key: '710103',
        value: '中山区'
      }, {
        key: '710104',
        value: '松山区'
      }, {
        key: '710105',
        value: '大安区'
      }, {
        key: '710106',
        value: '万华区'
      }, {
        key: '710107',
        value: '信义区'
      }, {
        key: '710108',
        value: '士林区'
      }, {
        key: '710109',
        value: '北投区'
      }, {
        key: '710110',
        value: '内湖区'
      }, {
        key: '710111',
        value: '南港区'
      }, {
        key: '710112',
        value: '文山区'
      }]
    }, {
      key: '710200',
      value: '高雄市',
      children: [{
        key: '710201',
        value: '新兴区'
      }, {
        key: '710202',
        value: '前金区'
      }, {
        key: '710203',
        value: '芩雅区'
      }, {
        key: '710204',
        value: '盐埕区'
      }, {
        key: '710205',
        value: '鼓山区'
      }, {
        key: '710206',
        value: '旗津区'
      }, {
        key: '710207',
        value: '前镇区'
      }, {
        key: '710208',
        value: '三民区'
      }, {
        key: '710209',
        value: '左营区'
      }, {
        key: '710210',
        value: '楠梓区'
      }, {
        key: '710211',
        value: '小港区'
      }]
    }, {
      key: '710300',
      value: '台南市',
      children: [{
        key: '710301',
        value: '中西区'
      }, {
        key: '710302',
        value: '东区'
      }, {
        key: '710303',
        value: '南区'
      }, {
        key: '710304',
        value: '北区'
      }, {
        key: '710305',
        value: '安平区'
      }, {
        key: '710306',
        value: '安南区'
      }]
    }, {
      key: '710400',
      value: '台中市',
      children: [{
        key: '710401',
        value: '中区'
      }, {
        key: '710402',
        value: '东区'
      }, {
        key: '710403',
        value: '南区'
      }, {
        key: '710404',
        value: '西区'
      }, {
        key: '710405',
        value: '北区'
      }, {
        key: '710406',
        value: '北屯区'
      }, {
        key: '710407',
        value: '西屯区'
      }, {
        key: '710408',
        value: '南屯区'
      }]
    }, {
      key: '710500',
      value: '金门县'
    }, {
      key: '710600',
      value: '南投县'
    }, {
      key: '710700',
      value: '基隆市',
      children: [{
        key: '710701',
        value: '仁爱区'
      }, {
        key: '710702',
        value: '信义区'
      }, {
        key: '710703',
        value: '中正区'
      }, {
        key: '710704',
        value: '中山区'
      }, {
        key: '710705',
        value: '安乐区'
      }, {
        key: '710706',
        value: '暖暖区'
      }, {
        key: '710707',
        value: '七堵区'
      }]
    }, {
      key: '710800',
      value: '新竹市',
      children: [{
        key: '710801',
        value: '东区'
      }, {
        key: '710802',
        value: '北区'
      }, {
        key: '710803',
        value: '香山区'
      }]
    }, {
      key: '710900',
      value: '嘉义市',
      children: [{
        key: '710901',
        value: '东区'
      }, {
        key: '710902',
        value: '西区'
      }]
    }, {
      key: '711100',
      value: '新北市'
    }, {
      key: '711200',
      value: '宜兰县'
    }, {
      key: '711300',
      value: '新竹县'
    }, {
      key: '711400',
      value: '桃园县'
    }, {
      key: '711500',
      value: '苗栗县'
    }, {
      key: '711700',
      value: '彰化县'
    }, {
      key: '711900',
      value: '嘉义县'
    }, {
      key: '712100',
      value: '云林县'
    }, {
      key: '712400',
      value: '屏东县'
    }, {
      key: '712500',
      value: '台东县'
    }, {
      key: '712600',
      value: '花莲县'
    }, {
      key: '712700',
      value: '澎湖县'
    }]
  },
  {
    key: '810000',
    value: '香港',
    children: [{
      key: '810200',
      value: '九龙',
      children: [{
        key: '810201',
        value: '九龙城区'
      }, {
        key: '810202',
        value: '油尖旺区'
      }, {
        key: '810203',
        value: '深水埗区'
      }, {
        key: '810204',
        value: '黄大仙区'
      }, {
        key: '810205',
        value: '观塘区'
      }]
    },
    {
      key: '810100',
      value: '香港岛',
      children: [{
        key: '810101',
        value: '中西区'
      }, {
        key: '810102',
        value: '湾仔'
      }, {
        key: '810103',
        value: '东区'
      }, {
        key: '810104',
        value: '南区'
      }]
    },
    {
      key: '810300',
      value: '新界',
      children: [{
        key: '810301',
        value: '北区'
      }, {
        key: '810302',
        value: '大埔区'
      }, {
        key: '810303',
        value: '沙田区'
      }, {
        key: '810304',
        value: '西贡区'
      }, {
        key: '810305',
        value: '元朗区'
      }, {
        key: '810306',
        value: '屯门区'
      }, {
        key: '810307',
        value: '荃湾区'
      }, {
        key: '810308',
        value: '葵青区'
      }, {
        key: '810309',
        value: '离岛区'
      }]
    }]
  },
  {
    key: '820000',
    value: '澳门',
    children: [{
      key: '820100',
      value: '澳门半岛'
    }, {
      key: '820200',
      value: '离岛'
    }]
  }
]

;//export default citys


//import Picker from './picker.js'
// 扩展picker地区控件 (require pikcer.js)
var PickerCity = function (params) {
  // 参数改写
  var onCityClickDone = params.onClickDone
  var onCityScrollEnd = params.onScrollEnd
  params.onClickDone = undefined
  params.onScrollEnd = undefined
  /* --------------------
    Model
    -------------------- */
  var defaults = {
    viewType: 'area',
    data: null,

    defaultProvince: '',
    defaultCity: '',
    defaultArea: '',

    defaultProvinceKey: '',
    defaultCityKey: '',
    defaultAreaKey: '',

    provinceClass: 'text-center',
    cityClass: 'text-center',
    areaClass: 'text-center',

    defaultValues: [{
      key: '',
      value: '----'
    }],
    onClickDone: function (e) {
      e.activeText = getActiveText(e.activeOptions)
      setActiveKeys(e.activeOptions)
      if (onCityClickDone) onCityClickDone(e)
    },
    onScrollEnd: function (e) {
      // var activeOption = e.activeSlot.values[e.activeSlot.activeIndex]
      var activeOption = e.activeOptions[e.activeSlot.index]
      if (e.activeSlot.index === 0) { // 滚动省
        var city = replaceCity(activeOption.key) // 修改第二项
        replaceArea(city[0].key) // 修改第三项
      } else if (e.activeSlot.index === 1) { // 滚动市
        replaceArea(activeOption.key) // 修改第三项
      }
      // 回调
      if (onCityScrollEnd) onCityScrollEnd(e)
    }
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = new Picker(params)

  // Data
  s.data = s.params.data
  if (!s.data) return

  // 省、市、区数据
  s.province = null
  s.city = null
  s.area = null

  function trim (str) {
    return str.replace(/(^\s*)|(\s*$)/g, '')
  }
  // 设置默认值
  s.setDefaultProvince = function (province) {
    s.params.defaultProvince = trim('' + province)
  }
  s.setDefaultCity = function (city) {
    s.params.defaultCity = trim('' + city)
  }
  s.setDefaultArea = function (area) {
    s.params.defaultArea = trim('' + area)
  }
  s.setDefaultProvinceKey = function (province) {
    s.params.defaultProvinceKey = trim('' + province)
  }
  s.setDefaultCityKey = function (city) {
    s.params.defaultCityKey = trim('' + city)
  }
  s.setDefaultAreaKey = function (area) {
    s.params.defaultAreaKey = trim('' + area)
  }

  /* --------------------
  Method
  -------------------- */
  function getActiveText (activeData) {
    var activeValues = activeData.map(function (n, i, a) {
      return n['value']
    })
    var activeText = ''
    if (activeValues[0]) activeText += activeValues[0]
    if (activeValues[1]) activeText += '-' + activeValues[1]
    if (activeValues[2] && activeValues[2] !== s.params.defaultValues[0].value) activeText += '-' + activeValues[2]
    return activeText
  }

  function setActiveKeys (activeData) {
    var activeKeys = activeData.map(function (n, i, a) {
      return n['key']
    })
    if (activeKeys[0]) s.setDefaultProvinceKey(activeKeys[0])
    if (activeKeys[1]) s.setDefaultCityKey(activeKeys[1])
    if (activeKeys[2]) s.setDefaultAreaKey(activeKeys[2])
  }

  // 获得第一层
  function getPureArray (array) {
    var arr = []
    /* eslint-disable */
    for (var i = 0, opt; opt = array[i++];) {
      arr.push({
        key: opt.key,
        value: opt.value
      })
    }
    /* eslint-enable */
    return arr
  }

  // 根据key获得children
  function getChildren (key) {
    // 如果没有传key，表示获得第一层
    if (!key) return getPureArray(s.params.data)
    // 如果传key，则找到对应key的子级
    /* eslint-disable */
    for (var i = 0, province; province = s.params.data[i++];) {
      if (province.key === key) return getPureArray(province.children)
      for (var j = 0, city; city = province.children[j++];) {
        if (!city.children) break
        if (city.key === key) return getPureArray(city.children)
      }
    }
    /* eslint-enable */
    return null
  }
  // 根据value获得key
  function getKey (value, key) {
    var data = null
    if (!key) {
      data = s.params.data
    } else {
      data = getChildren(key)
    }
    if (!data) {
      return 0
    }
    /* eslint-disable */
    for (var i = 0, row; row = data[i++];) {
      if (row.value === value) return row.key
    }
    /* eslint-enable */
  }
  /* ----------------
  Init
  ---------------- */
  function replaceProvince (defaultKey) {
    var province = getChildren()
    var defKey = province[0].key
    if (defaultKey) defKey = defaultKey
    s.replaceSlot(0, province, defKey, s.params.cityClass) // 修改第一项
    return province
  }
  function replaceCity (key, defaultKey) {
    var city = getChildren(key)
    var defKey = city[0].key
    if (defaultKey) defKey = defaultKey
    s.replaceSlot(1, city, defKey, s.params.cityClass) // 修改第二项
    return city
  }
  function replaceArea (key, defaultKey) {
    if (s.params.viewType !== 'area') return
    var area = getChildren(key)
    if (area) {
      var defKey = area[0].key
      if (defaultKey) defKey = defaultKey
      s.replaceSlot(2, area, defKey, s.params.areaClass) // 修改第三项
    } else {
      s.replaceSlot(2, s.params.defaultValues, s.params.defaultValues['key'], s.params.areaClass) // 修改第三项
    }
  }
  s.update = function () {
    replaceProvince(s.params.defaultProvinceKey)
    replaceCity(s.params.defaultProvinceKey, s.params.defaultCityKey)
    replaceArea(s.params.defaultCityKey, s.params.defaultAreaKey)
  }
  function addProvince () {
    // 初始化省
    if (!s.province) {
      s.province = getChildren()
    }
    if (!s.params.defaultProvinceKey) {
      s.setDefaultProvinceKey(s.province[0].key)
    }
    s.addSlot(s.province, s.params.defaultProvinceKey, s.params.provinceClass)
  }
  function addCity () {
    // 初始化市
    s.city = getChildren(s.params.defaultProvinceKey)
    if (!s.params.defaultCityKey) {
      s.setDefaultCityKey(s.city[0].key)
    }
    s.addSlot(s.city, s.params.defaultCityKey, s.params.cityClass)
  }
  function addArea () {
    if (s.params.viewType !== 'area') return
    // 初始化区
    s.area = getChildren(s.params.defaultCityKey)
    if (!s.params.defaultAreaKey) {
      s.setDefaultAreaKey(s.city[0].key)
    }
    if (s.area) {
      s.addSlot(s.area, s.params.defaultAreaKey, s.params.areaClass)
    } else {
      s.addSlot(s.params.defaultValues, '', s.params.areaClass)
    }
  }
  function initKeys () {
    if (s.params.defaultProvince) s.setDefaultProvinceKey(getKey(s.params.defaultProvince))
    if (s.params.defaultCity) s.setDefaultCityKey(getKey(s.params.defaultCity, s.params.defaultProvinceKey))
    if (s.params.defaultArea) s.setDefaultAreaKey(getKey(s.params.defaultArea, s.params.defaultCityKey))
  }
  function initSlots () {
    // 把传入的value转为key
    initKeys()
    // 渲染
    addProvince()
    addCity()
    addArea()
  }
  initSlots()
  return s
}

;//export default PickerCity


// Tree 树结构
var Tree = function (container, params) {
  function getElementByParent (parent, selector) {
    return (typeof selector === 'string' && selector !== '') ? parent.querySelector(selector) : selector
  }
  /* ------------------
  Model
  ------------------ */
  var defaults = {
    // DATA
    data: null,
    // DOM
    bar: null,
    barOptionClass: 'tree-bar-button',

    extandClass: 'extand',
    activeClass: 'active',

    treeClass: 'tree',
    lineClass: 'tree-line', // 行
    titleClass: 'tree-title', // 标题
    arrowClass: 'tree-icon-arrow',
    iconClass: 'tree-icon', // 左侧图标

    btnAddFinalClass: 'tree-btnadd',
    btnAddClass: 'icon-rdoadd-fill',
    btnDelFinalClass: 'tree-btndel',
    btnDelClass: 'icon-rdoclose-fill',

    idAttr: 'data-id',
    parentidAttr: 'data-parentid',
    nameAttr: 'data-name',
    showSelect: false

    /*
    callbacks
    onClick:function(Tree)
    onClickLastChild:function(Tree)
    onData:function(option)
    */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  // Tree
  var s = this

  // Params
  s.params = params

  // Container
  s.container = getElementByParent(document, container)
  if (!s.container) {
    console.log('SeedsUI Error：未找到Tree的DOM对象，请检查传入参数是否正确')
    return
  }

  // Bar
  s.updateBar = function () {
    if (s.params.bar) {
      s.bar = getElementByParent(document, s.params.bar)
      if (!s.bar) {
        console.log('SeedsUI Error：未找到Bar的DOM对象，请检查传入参数是否正确')
        return
      }
    }
  }
  s.updateBar()
  s.setBar = function (bar) {
    s.params.bar = bar
  }

  // Selected
  s.selected = {}
  var _data = s.params.data
  s.getChildren = function (id) {
    var children = []
    /* eslint-disable */
    for (var i = 0, child; child = _data[i++];) {
      if (id && child.parentid === id.toString()) {
        children.push(child)
      }
    }
    /* eslint-enable */
    return children
  }
  s.initData = function (id, ulContainer) { // 指定的部门id，根节点为-1
    var group = s.getChildren(id)
    /* eslint-disable */
    for (var i = 0, option; option = group[i++];) {
      // 拷贝option，方便传入回调中而不影响原option
      var copyOption = Object.create(option)
      // line的data-xxx属性html
      var lineDataHTML = ''
      for (var n in option) {
        lineDataHTML += 'data-' + n + '="' + option[n] + '" '
      }

      // tree-icon和tree-title的html
      copyOption.html = '<div class="' + s.params.iconClass + '">' +
        '<i class="' + s.params.arrowClass + '"></i>' +
        '</div>' +
        '<div class="' + s.params.titleClass + '">' + option.name + '</div>'
      // Callback onData
      if (s.params.onData) s.params.onData(copyOption)

      var li = document.createElement('li')

      // tree-btnadd
      var addBtnHTML = ''
      if (s.params.showSelect) {
        if (!s.selected[option.id]) {
          addBtnHTML = '<span class="' + s.params.iconClass + ' ' + s.params.btnAddClass + ' ' + s.params.btnAddFinalClass + '"></span>'
          addBtnHTML += '<span class="' + s.params.iconClass + ' ' + s.params.btnDelClass + ' ' + s.params.btnDelFinalClass + '"></span>'
        }
      } else {
        addBtnHTML = ''
      }

      // 判断当前option和父级是否已经被选中
      var activeClass = '', isSelected = s.isSelected(option.id, option.parentid)
      if (isSelected === 2) { // 父级和当前都被选中
        s.removeSelected(option.id)
      } else if (isSelected === 1) { // 当前选中
        activeClass = ' ' + s.params.activeClass
      }
      // 生成完整的html
      var html = '<div class="' + s.params.lineClass + activeClass + '" ' + lineDataHTML + '>' + copyOption.html + addBtnHTML + '</div><ul></ul>'
      li.innerHTML = html

      ulContainer.appendChild(li)
      var ul = s.container.querySelector('[' + s.params.idAttr + '="' + option.id + '"]').nextElementSibling
      s.initData(option.id, ul)
    }
    /* eslint-enable */
  }
  s.update = function () {
    if (!s.params.data) {
      console.log('SeedsUI Warn：未找到Tree的Data数据，可在初始化时传入data参数，或者通过setData方法设置数据')
      return
    }
    if (!s.params.data[0].id || !s.params.data[0].parentid || !s.params.data[0].name) {
      console.log('SeedsUI Error：Tree的Data数据格式不正确，请检查data参数是否有id、name、parentid属性')
      return
    }
    s.updateBar()

    s.container.innerHTML = ''
    s.initData(-1, s.container)// 根节点
  }
  // s.update()
  /* ------------------
    Method
    ------------------ */
  s.setData = function (data) {
    _data = s.params.data = data
  }
  // 添加数据
  s.addData = function (data, id, childNode) {
    _data = data
    s.initData(id, childNode)
  }
  // 获得数据
  s.getDataByTarget = function (target) {
    var opts = {}
    /* eslint-disable */
    for (var i = 0, att; att = target.attributes[i++];) {
      if (att.nodeName.indexOf('data-') !== -1) {
        opts[att.nodeName.substring(5)] = att.nodeValue
      }
    }
    /* eslint-enable */
    return opts
  }
  // 异步添加节点，判断节点是否已经被选中
  // 当前被选中返回1，父级被选中返回-1，当前和父级都被选中返回2，没有被选中返回0
  s.isSelected = function (id, parentid) {
    var currentFlag = 0
    var parentFlag = 0
    // 判断当前是否被选中
    if (s.selected[id]) {
      currentFlag = 1
    }
    // 判断父级是否被选中
    if (s.selected[parentid]) {
      parentFlag = -1
    }

    // 判断树中是否存在此ID
    var parentNode = s.container.querySelector('[' + s.params.idAttr + '="' + parentid + '"]')
    if (!parentNode) {
      return 0
    }

    // 向上查询是否已添加到选中项，一直查到顶级
    while (!parentNode.classList.contains(s.params.treeClass) && parentNode.tagName !== 'BODY') {
      parentNode = parentNode.parentNode.parentNode
      var lineNode = parentNode.previousElementSibling
      if (lineNode && lineNode.classList.contains(s.params.lineClass)) {
        var dataId = lineNode.getAttribute(s.params.idAttr)
        if (s.selected[dataId]) {
          parentFlag = -1
          break
        }
      }
    }

    if (currentFlag && parentFlag) return 2
    return currentFlag + parentFlag

    // 经过以上过滤，仍然未找到存在于选中项的迹象，说明没有存在于选中列表中
    // return 0
  }

  // Json是否为空
  s.isEmptyJson = function (json) {
    var temp = ''
    for (var j in json) {
      temp += j
    }
    if (temp === '') return true
    return false
  }
  // 创建选中项
  s.createBarOption = function (id, name, parentid) {
    var div = document.createElement('span')
    div.setAttribute('class', s.params.barOptionClass)
    div.setAttribute(s.params.idAttr, id)
    if (parentid) div.setAttribute(s.params.parentidAttr, parentid)
    div.setAttribute(s.params.nameAttr, name)

    var label = document.createElement('label')
    label.innerHTML = name

    var del = document.createElement('a')
    del.classList.add(s.params.btnDelFinalClass, s.params.btnDelClass)

    div.appendChild(label)
    div.appendChild(del)
    return div
  }
  // 删除选中项
  s.removeSelected = function (id) {
    if (s.selected[id]) {
      // 删除数组
      delete s.selected[id]
      // 删除bar上元素
      if (s.bar) s.bar.removeChild(s.bar.querySelector('[' + s.params.idAttr + '="' + id + '"]'))
      // 清空树上的选中状态
      var node = s.container.querySelector('[' + s.params.idAttr + '="' + id + '"]')
      if (node) node.classList.remove(s.params.activeClass)
    }
  }
  s.removeAllSelected = function () {
    for (var id in s.selected) {
      s.removeSelected(id)
    }
    s.hideBar()
  }
  s.removeAllExtand = function () {
    var extands = s.container.querySelectorAll('.' + s.params.extandClass)
    /* eslint-disable */
    for (var i = 0, ex; ex = extands[i++];) {
      ex.classList.remove(s.params.extandClass)
    }
    /* eslint-enable */
  }
  s.addSelected = function (opts) {
    if (!opts.id || !opts.name || !opts.parentid) {
      console.log('SeedsUI Error:id、name、parentid三个参数不正确')
      return
    }
    if (s.selected[opts.id]) {
      console.log('SeedsUI Info:您要选中的节点已经选中')
      return
    }
    if (s.isSelected(opts.id, opts.parentid)) {
      console.log('SeedsUI Info:您要选中的节点已经选中')
      return
    }

    // bar上添加选中
    if (s.bar) {
      var barOption = s.createBarOption(opts.id, opts.name, opts.parentid)
      s.bar.appendChild(barOption)
      s.showBar()
    }

    // tree中激活选中
    var treeOption = s.container.querySelector('[' + s.params.idAttr + '="' + opts.id + '"]')
    if (treeOption) treeOption.classList.add(s.params.activeClass)

    // s.selected中添加选中
    s.selected[opts.id] = opts
  }
  // 显示选中项
  s.showBar = function () {
    s.bar.classList.add(s.params.activeClass)
  }
  // 隐藏选中项
  s.hideBar = function () {
    s.bar.classList.remove(s.params.activeClass)
  }

  s.reset = function () {
    s.removeAllSelected()
    s.removeAllExtand()
  }
  /* ------------------
    Events
    ------------------ */
  // 绑定事件
  s.events = function (detach) {
    var action = detach ? 'removeEventListener' : 'addEventListener'
    // 树结构
    s.container[action]('touchstart', s.onTouchStart, false)
    s.container[action]('touchend', s.onTouchEnd, false)
    // 选中容器
    if (s.bar) {
      s.bar[action]('click', s.onClickBar, false)
    }
  }
  // attach、dettach事件
  s.attach = function (event) {
    s.events()
  }
  s.detach = function (event) {
    s.events(true)
  }
  /* ------------------
    Event Handler
    ------------------ */
  // Tap
  s.touches = {
    startX: 0,
    startY: 0,
    endX: 0,
    endY: 0,
    diffX: 0,
    diffY: 0,
  }
  s.onTouchStart = function (e) {
    s.touches.startX = e.touches[0].clientX
    s.touches.startY = e.touches[0].clientY
  }
  s.onTouchEnd = function (e) {
    s.touches.endX = e.changedTouches[0].clientX
    s.touches.endY = e.changedTouches[0].clientY
    s.touches.diffX = s.touches.startX - s.touches.endX
    s.touches.diffY = s.touches.startY - s.touches.endY
    // 单击事件
    if (Math.abs(s.touches.diffX) < 6 && Math.abs(s.touches.diffY) < 6) {
      s.onClickTree(e)
    }
  }
  // 点击树
  s.onClickTree = function (e) {
    // 点击树
    s.targetLi
    s.targetLine
    s.target = e.target

    if (s.target.classList.contains(s.params.lineClass)) { // 点击二级
      s.targetLine = s.target
      s.targetLi = s.target.parentNode
    } else if (s.target.classList.contains(s.params.iconClass) ||
      s.target.classList.contains(s.params.titleClass)) { // 点击三级
      s.targetLine = s.target.parentNode
      s.targetLi = s.target.parentNode.parentNode
    }
    if (s.target.classList.contains(s.params.btnAddFinalClass)) { // 点击添加
      s.onClickBtnAdd(e)
    } else if (s.target.classList.contains(s.params.btnDelFinalClass)) { // 点击删除
      s.onClickBtnDel(e)
    } else { // 点击其它元素
      // 展开与收缩
      s.targetLine.classList.toggle(s.params.extandClass)
      var lines = s.targetLine.nextElementSibling.querySelectorAll('li > .' + s.params.lineClass)
      /* eslint-disable */
      for (var i = 0, line; line = lines[i++];) {
        if (s.selected[line.getAttribute(s.params.idAttr)]) {
          line.classList.add(s.params.activeClass)
        }
      }
      /* eslint-enable */

      // Callback onClickLastChild(点击底层)
      if ((!s.targetLine.nextElementSibling || !s.targetLine.nextElementSibling.hasChildNodes()) && s.params.onClickLastChild) s.params.onClickLastChild(s)
    }
    // Callback onClick
    if (s.params.onClick) s.params.onClick(s)
  }
  // 点击添加按钮
  s.onClickBtnAdd = function (e) {
    var elLine = e.target.parentNode
    // 删除子级
    var elLines = elLine.parentNode.querySelectorAll('.' + s.params.lineClass)
    /* eslint-disable */
    for (var i = 0, el; el = elLines[i++];) {
      var elId = el.getAttribute(s.params.idAttr)
      s.removeSelected(elId)
    }
    /* eslint-enable */
    // 显示此级
    elLine.classList.add(s.params.activeClass)
    /*
    var id=elLine.getAttribute(s.params.idAttr)
    var name=elLine.getAttribute(s.params.nameAttr)
    var parentid=elLine.getAttribute(s.params.parentidAttr)
    */
    var opts = s.getDataByTarget(elLine)
    // 添加到s.selected
    s.addSelected(opts)
  }
  // 点击树bar
  s.onClickBar = function (e) {
    if (e.target.classList.contains(s.params.btnDelFinalClass)) {
      s.onClickBtnDel(e)
    }
  }
  // 点击删除按钮
  s.onClickBtnDel = function (e) {
    s.option = e.target.parentNode
    s.target = e.target
    // 选中选中项
    var id = s.option.getAttribute(s.params.idAttr)
    s.removeSelected(id)
    // 如果为空，则隐藏选中容器
    if (s.isEmptyJson(s.selected)) {
      if (s.bar) s.hideBar()
    }
  }

  // 主函数
  s.init = function () {
    s.attach()
  }
  s.init()
};


//Indexbar 索引控件
(function(window,document,undefined){
	window.Indexbar=function(container,params){
		/*=========================
          Params
          ===========================*/
		var defaults={
			"indexbarClass":"indexbar",
			"indexbarActiveClass":"active",
			"indexActiveClass":"active",
			"toolTipClass":"indexbar-tooltip",
			"indexlistClass":"indexlist"
		}
		params=params||{};
		for(var def in defaults){
			if(params[def]===undefined){
				params[def]=defaults[def];
			}
		}
		//Indexbar
		var s=this;

		//Params
		s.params = params;

		//Container
		s.container=typeof container=="string"?document.querySelector(container):container;
		if(!s.container){
            console.log("SeedsUI Error：未找到Indexbar的DOM对象，请检查传入参数是否正确");
            return;
        }

		//IndexList
		s.indexList=s.container.querySelector("."+s.params.indexlistClass);

		//IndexbarContainer
		s.indexBar,s.toolTip;
		s.createIndexBar=function(){
			var indexBar=document.createElement("div")
            indexBar.setAttribute("class",s.params.indexbarClass);
            return indexBar;
		}
		var arrIndexChar=["A","B","C","D","E","F","G","H","I","G","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];
		s.createIndexs=function(){
			var indexs=[];
			arrIndexChar.forEach(function(n,i,a){
				var indexChar=document.createElement("a");
				indexChar.innerHTML=n;
				indexs.push(indexChar);
			});
            return indexs;
		}
		s.createToolTip=function(){
			var toolTip=document.createElement("div")
            toolTip.setAttribute("class",s.params.toolTipClass);
            return toolTip;
		}
		s.create=function(){
			s.indexBar=s.createIndexBar();
			s.indexs=s.createIndexs();
			s.indexs.forEach(function(n,i,a){
				s.indexBar.appendChild(n);
			});
			s.toolTip=s.createToolTip();
			s.container.appendChild(s.indexBar);
			s.container.appendChild(s.toolTip);
		}
		s.create();

		//Indexs
		s.indexs=s.indexBar.querySelectorAll("a");
		s.updateContainerSize=function(){
			s.indexHeight=s.indexBar.clientHeight/s.indexs.length;
			[].slice.call(s.indexs).forEach(function(n,i,a){
				n.style.height=s.indexHeight+"px";
				n.style.lineHeight=s.indexHeight+"px";
			})
		}
		s.updateContainerSize();

		//Tooltip
		s.tooltip=s.indexBar.parentNode.querySelector("."+s.params.toolTipClass);


		//Controller
		/*=========================
          Touch Events
          ===========================*/
		//body事件绑定
		var touchTarget=s.container;
		s.events=function(detach){
			var action=detach?"removeEventListener":"addEventListener";
			touchTarget[action]("touchmove",s.onTouchMove,false);
			touchTarget[action]("touchend",s.onTouchEnd,false);
			touchTarget[action]("touchcancel",s.onTouchEnd,false);
		}
		//attach、dettach事件
		s.attach=function(event){
			s.events();
		}
		s.detach=function(event){
			s.events(true);
		}
		/*=========================
          Touch Handler
          ===========================*/
        //Touch信息
        s.touches={
        	startX:0,
        	startY:0,
        	currentX:0,
        	currentY:0,
        	endX:0,
        	endY:0
        };
        //索引
        function preventDefault(e){
			e.preventDefault();
		}
		s.onTouchMove=function(e){
			s.touches.currentY=e.touches[0].clientY;
			s.goIndex(s.touches.currentY);
		};
		s.onTouchEnd=function(e){
			touchTarget.removeEventListener("touchmove",preventDefault,false);
			s.detach();
			//移除激活indexbar
			s.indexBar.classList.remove(s.params.indexbarActiveClass);
		};
		s.indexBar.addEventListener("touchstart",function(e){
			touchTarget.addEventListener("touchmove",preventDefault,false);
			s.touches.startX=e.touches[0].clientX;
			s.touches.startY=e.touches[0].clientY;
			//给body绑定触摸事件
			s.attach();
			//滚动到指定位置
			s.goIndex(s.touches.startY);
			//激活indexbar
			s.indexBar.classList.add(s.params.indexbarActiveClass);
		},false);
		/*=========================
          Method
          ===========================*/
        s.indexHTML="A";
        s.goIndex=function(y){
        	//修改文字
        	s.index=document.elementFromPoint(s.touches.startX,y);
        	if(!s.index.parentNode || s.index.parentNode!=s.indexBar)return;
        	s.indexHTML=s.index.innerHTML;
        	s.tooltip.innerHTML=s.indexHTML;
        	s.indexLI=s.container.querySelector('[data-index='+s.indexHTML+']');
        	//移动位置
        	if(s.indexLI)s.indexList.scrollTop=s.indexLI.offsetTop-s.indexList.offsetTop;
        }
	}
})(window,document,undefined);

//Loading
(function(window,document,undefined){
	
	window.Loading=function(params){
		function getElementByParent (parent, selector) {
	    return (typeof selector === 'string' && selector !== '') ? parent.querySelector(selector) : selector
	  }
		/*================
		Model
		================*/
		var defaults={
			parent:document.body,
			container:null,

			containerClass:["mask","loading-mask"],

			/*html:'<div class="loading-spinning">'+
		            '<div class="loading-spinning-wrapper"></div>'+
		        '</div>',*/
		    html:'<div class="loading-floating">'+
			            '<div class="loading-floating-wrapper">'+
			                '<div class="loading-floating-blade"></div>'+
			                '<div class="loading-floating-blade"></div>'+
			                '<div class="loading-floating-blade"></div>'+
			                '<div class="loading-floating-blade"></div>'+
			                '<div class="loading-floating-blade"></div>'+
			                '<div class="loading-floating-blade"></div>'+
			                '<div class="loading-floating-blade"></div>'+
			                '<div class="loading-floating-blade"></div>'+
			                '<div class="loading-floating-blade"></div>'+
			                '<div class="loading-floating-blade"></div>'+
			                '<div class="loading-floating-blade"></div>'+
			                '<div class="loading-floating-blade"></div>'+
			            '</div>'+
			            '<div class="loading-floating-caption">加载中...</div>'+
			        '</div>',

		    isClickAllow:false,
			clickAllowClass:"loading-propagation",

			activeClass:"active"
			/*
            Callbacks:
            onClick:function(Loading)
			*/
		}
		params=params||{};
		for(var def in defaults){
			if(params[def]==undefined){
				params[def]=defaults[def];
			}
		}
		var s=this;
		s.params=params;
		s.parent=typeof s.params.parent=="string"?document.querySelector(s.params.parent):s.params.parent;
		s.container;
		//Container
		s.createContainer=function(){
			var container=document.createElement("div");
            container.classList.add.apply(container.classList,s.params.containerClass);
            container.innerHTML=s.params.html;
            if(s.params.isClickAllow)container.classList.add(s.params.clickAllowClass);
            return container;
		}
		s.create=function(){
			if(s.params.container){
				s.container=getElementByParent(document, s.params.container);
				if(s.container)return;
			}
			s.container=s.createContainer();
			s.parent.appendChild(s.container);
		}
		s.create();
		/*================
		Method
		================*/
		s.isHid=true;
		s.hide=function(){
			s.isHid=true;
        	s.container.classList.remove(s.params.activeClass);
		};
		s.show=function(){
			s.isHid=false;
            s.container.classList.add(s.params.activeClass);
		};
		s.destroy=function(){
			//移动事件监听
			s.detach();
			//移除遮罩
			s.parent.removeChild(s.container);
		};
		//动态设置
		s.setOnClick=function(fn){
        	s.params.onClick=fn;
        }
		/*================
		Control
		================*/
        s.events=function(detach){
            var touchTarget=s.container;
            var action=detach?"removeEventListener":"addEventListener";
            touchTarget[action]("click",s.onClick,false);
        }
        //attach、dettach事件
        s.attach=function(event){
            s.events();
        }
        s.detach=function(event){
            s.events(true);
        }
		s.onClick=function(e){
			s.target=e.target;
			if(s.params.onClick)s.params.onClick(s);
		}
		/*================
		Init
		================*/
		s.init=function(){
			s.attach();
		}
		s.init();
	}
})(window,document,undefined);

// Timepart 时间段
var Timepart = function (container, params) {
  /* -----------------------
  Model
  ----------------------- */
  var defaults = {
    rowClass: 'timepart-row',
    progressClass: 'timepart-progress',
    progressCaptionClass: 'progress-caption',
    dataProgressAttr: 'data-progress',
    partClass: 'timepart-part',
    partStartClass: 'timepart-startTime',
    partEndClass: 'timepart-endTime',
    activeClass: 'active',
    disableClass: 'disabled',

    colCount: 6, // 一行6格
    partMinute: 30, // 一格的30分钟
    startTime: '7:00',
    endTime: '22:00',

    colAttr: 'data-col',

    isEnableActive: true // 是否启用点击选中

    /*
    Callbacks:
    onConflictOver:function(Timepart)
    onConflictContain:function(Timepart)
    onClick:function(Timepart)
    onClickDisabled:function(Timepart)
    onClickActive:function(Timepart)
    onClickChoose:function(Timepart)
    onClickValid:function(Timepart)
    */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  // Params
  s.params = params
  // Container
  s.container = typeof container === 'string' ? document.querySelector(container) : container
  // 设置Container的data-col
  s.container.setAttribute(s.params.colAttr, s.params.colCount)

  if (!s.container) {
    console.log('SeedsUI Error：未找到Timepart的DOM对象，请检查传入参数是否正确')
    return
  }
  // 点击次数
  s.clickCount = 0

  var partMilliSecond = s.params.partMinute * 60 * 1000
  // 行
  s.rows = []
  s.rowsCount
  var rowMilliSecond = partMilliSecond * s.params.colCount

  // 字符串转换成Date对象，参数格式如8:00
  s.parseDate = function (timeStr) {
    var date = new Date()
    var hour = timeStr.split(':')[0]
    var minute = timeStr.split(':')[1]
    date.setYear(0)
    date.setMonth(0, 0)
    date.setHours(hour)
    date.setMinutes(minute)
    date.setSeconds(0, 0)
    return date
  }
  // 开始和结束时间
  s.startTime = s.parseDate(s.params.startTime)
  s.endTime = s.parseDate(s.params.endTime)

  // 总格数
  s.partsCount = 0
  s.updateParsCount = function () {
    var startTime = s.parseDate(s.params.startTime)
    var endTime = s.parseDate(s.params.endTime)
    s.partsCount = (endTime.getTime() - startTime.getTime()) / partMilliSecond
    if (Math.ceil(s.partsCount) !== s.partsCount) { // 是否是整数
      s.partsCount = 0
      console.log('SeedsUI Error：时间区间参数partMinute不正确，不能整除')
      return
    }
    return s.partsCount
  }
  // 总行数
  s.updateRowsCount = function () {
    if (s.partsCount === 0) s.updateParsCount()
    s.rowsCount = Math.ceil(s.partsCount / s.params.colCount)
    return s.rowsCount
  }
  // 创建时间段
  s.createParts = function () {
    s.updateRowsCount()
    // 总格数
    s.parts = []
    // 总行数
    s.rows = []
    // 创建行
    for (var i = 0; i < s.rowsCount; i++) {
      var rowStartTime = s.startTime.getTime() + (rowMilliSecond * i)
      var rowEndTime = rowStartTime + rowMilliSecond
      if (rowEndTime > s.endTime.getTime()) rowEndTime = s.endTime.getTime()

      var row = document.createElement('div')
      row.setAttribute('class', s.params.rowClass)
      row.startTime = new Date(rowStartTime)
      row.endTime = new Date(rowEndTime)

      s.rows.push(row)
      s.container.appendChild(row)

      // 创建列
      for (var j = 0; j < s.params.colCount; j++) {
        var partStartTime = rowStartTime + (partMilliSecond * j)
        var partEndTime = partStartTime + partMilliSecond
        if (partStartTime > s.endTime.getTime() || partEndTime > s.endTime.getTime()) return

        var part = document.createElement('label')
        part.setAttribute('class', s.params.partClass)
        part.startTime = new Date(partStartTime)
        part.endTime = new Date(partEndTime)

        var startHour = part.startTime.getHours() < 10 ? '0' + part.startTime.getHours() : part.startTime.getHours()
        var startMinute = part.startTime.getMinutes() < 10 ? '0' + part.startTime.getMinutes() : part.startTime.getMinutes()
        var endHour = part.endTime.getHours() < 10 ? '0' + part.endTime.getHours() : part.endTime.getHours()
        var endMinute = part.endTime.getMinutes() < 10 ? '0' + part.endTime.getMinutes() : part.endTime.getMinutes()
        part.innerHTML = '<span class=' + s.params.partStartClass + '>' + startHour + ':' + startMinute + '</span>' +
          '<span class=' + s.params.partEndClass + '>' + endHour + ':' + endMinute + '</span>'
        s.parts.push(part)
        row.appendChild(part)
      }
    }
  }
  s.createParts()

  /* -----------------------
  Method
  ----------------------- */
  s.reset = function () {
    // 重置点击次数
    s.clickCount = 0
    // 清空容器
    s.container.innerHTML = ''
    // 重新绘制时间段
    s.createParts()
  }
  // 获得进度条的开始行数、结束行数、开始位置、结束位置、开始段数、结束段数
  s.getTimesRange = function (startTime, endTime) {
    // 开始结束位置总比例
    var startRatio = ((startTime.getTime() - s.startTime.getTime()) / rowMilliSecond).toString()
    var endRatio = ((endTime.getTime() - s.startTime.getTime()) / rowMilliSecond).toString()
    /*
     *行数:开始结束位置行数
     */
    var startRow = Math.floor(startRatio)
    var endRow = Math.floor(endRatio)
    /*
     *左右:开始结束行左右值
     */
    var left = Math.round(startRatio.replace(/\d+\./, '0.') * 100)
    var right = Math.round(100 - endRatio.replace(/\d+\./, '0.') * 100)

    /*
     *段数:开始结束段数字
     */
    var startNum = Math.floor(startRatio * s.params.colCount)
    var endNum = Math.floor(endRatio * s.params.colCount) - 1// 半格的情况，则此格为正常状态，所以-1
    /*
     *整比例
     */
    // 结束比例为整数时得减1
    if (endRatio % 1 === 0) {
      endRow--
      right = 0
    }
    // 结束时间是一格的倍数得减1
    /*
    if(endTime.getMinutes()%s.params.partMinute===0){
        endNum++
    }
    */
    // 如果开始位置在最左边，则左边间距为0
    if (startRatio % 1 === 0) {
      left = 0
    }

    return {
      startRatio: startRatio,
      endRatio: endRatio,

      startRow: startRow,
      endRow: endRow,

      left: left,
      right: right,

      startNum: startNum,
      endNum: endNum
    }
  }
  s.hasProgress = function (startTime, endTime, isCallback) {
    var progress = s.container.querySelectorAll('.progress-caption')
    s.conflictTimes = {
      conflictStartTime: startTime,
      conflictEndTime: endTime
    }
    /* eslint-disable */
    for (var i = 0, pro; pro = progress[i++];) {
      // 相交
      if ((startTime > pro.startTime && startTime < pro.endTime) || (endTime > pro.startTime && endTime < pro.endTime)) {
        s.target = pro
        if (s.params.onConflictContain && isCallback) s.params.onConflictContain(s)
        return true
      }
      // 包含
      if ((pro.startTime > startTime && pro.startTime < endTime) || (pro.endTime > startTime && pro.endTime < endTime)) {
        s.target = pro
        if (s.params.onConflictOver && isCallback) s.params.onConflictOver(s)
        return true
      }
    }
    /* eslint-enable */
    return false
  }

  // 设置进度条
  s.setProgress = function (startTime, endTime, classes, data, isListenerConflict) {
    /* eslint-disable */
    var startTime = Object.prototype.toString.call(startTime) === '[object Date]' ? startTime : s.parseDate(startTime || s.params.startTime)
    var endTime = Object.prototype.toString.call(endTime) === '[object Date]' ? endTime : s.parseDate(endTime || s.params.endTime)
    var classes = classes && Object.prototype.toString.call(classes) === '[object Array]' ? classes : []
    /* eslint-enable */
    startTime.setYear(0)
    startTime.setMonth(0, 0)
    startTime.setSeconds(0, 0)

    endTime.setYear(0)
    endTime.setMonth(0, 0)
    endTime.setSeconds(0, 0)

    // 时间范围限制
    if (startTime.getTime() < s.startTime.getTime()) {
      startTime = s.startTime
    } else if (startTime.getTime() > s.endTime.getTime()) {
      startTime = s.endTime
    }
    if (endTime.getTime() < s.startTime.getTime()) {
      endTime = s.startTime
    } else if (endTime.getTime() > s.endTime.getTime()) {
      endTime = s.endTime
    }
    // 如果开启冲突监听，并且存在冲突，则停止进度条绘制
    if (isListenerConflict && s.hasProgress(startTime, endTime, true)) return false

    var range = s.getTimesRange(startTime, endTime)

    // 设置parts的class
    /*
    for(var i=range.startNum;i<=range.endNum;i++){
        for(var k=0,className;className=classes[k++];){
            s.parts[i].classList.add(className)
        }
    }
    */

    // 设置progress的left和right
    for (var j = range.startRow; j <= range.endRow; j++) {
      var progress = document.createElement('div')
      progress.setAttribute('class', s.params.progressClass)

      // 设置classes
      /* eslint-disable */
      for (var l = 0, className; className = classes[l++];) {
        progress.classList.add(className)
      }
      /* eslint-enable */

      // 设置style
      progress.style.display = 'block'
      progress.style.left = 0
      progress.style.right = 0

      // 设置data
      if (data) progress.setAttribute(s.params.dataProgressAttr, data)

      if (j === range.startRow) {
        progress.style.left = range.left + '%'

        progress.startTime = startTime
        progress.endTime = endTime
        progress.classList.add(s.params.progressCaptionClass)
        progress.setAttribute('data-starttime', startTime)
        progress.setAttribute('data-endtime', endTime)
      }
      if (j === range.endRow) {
        progress.style.right = range.right + '%'
      }

      s.rows[j].appendChild(progress)
    }
    return true
  }
  s.activeTimes = function (startTime, endTime, classes, data) {
    /* eslint-disable */
    var classes = classes ? [s.params.activeClass].concat(classes) : [s.params.activeClass]
    var data = data || ''
    /* eslint-enable */
    var isDrawed = s.setProgress(startTime, endTime, classes, data, true)
    if (isDrawed) {
      s.clickCount = 2
    }
  }
  s.disableTimes = function (startTime, endTime, classes, data) {
    /* eslint-disable */
    var classes = classes ? [s.params.disableClass].concat(classes) : [s.params.disableClass]
    var data = data || ''
    /* eslint-enable */
    s.setProgress(startTime, endTime, classes, data, true)
  }
  s.chooseTimes = function (startTime, endTime, classes, data) {
    s.setProgress(startTime, endTime, classes, data)
  }
  // 获取选中的时间段
  s.getActiveTimes = function () {
    var activeProgress = s.container.querySelectorAll('.' + s.params.progressCaptionClass + '.' + s.params.activeClass)
    if (activeProgress.length === 0) {
      activeProgress = s.container.querySelectorAll('.' + s.params.partClass + '.' + s.params.activeClass)
    }
    if (activeProgress.length <= 0) {
      return {
        startTime: null,
        endTime: null,
        startTimeString: null,
        endTimeString: null
      }
    }
    var startTime = activeProgress[0].startTime
    var startHour = startTime.getHours() < 10 ? '0' + startTime.getHours() : startTime.getHours()
    var startMinute = startTime.getMinutes() < 10 ? '0' + startTime.getMinutes() : startTime.getMinutes()

    var endTime = activeProgress[activeProgress.length - 1].endTime
    var endHour = endTime.getHours() < 10 ? '0' + endTime.getHours() : endTime.getHours()
    var endMinute = endTime.getMinutes() < 10 ? '0' + endTime.getMinutes() : endTime.getMinutes()

    return {
      startTime: startTime,
      endTime: endTime,
      startTimeString: startHour + ':' + startMinute,
      endTimeString: endHour + ':' + endMinute
    }
  }

  // 删除进度条
  s.removeProgress = function (className) {
    // 清空parts
    /* eslint-disable */
    for (var i = 0, part; part = s.parts[i++];) {
      part.classList.remove(className)
    }
    /* eslint-enable */
    // 清空progress
    var activeProgress = s.container.querySelectorAll('.' + s.params.progressClass + '.' + className)
    Array.prototype.slice.call(activeProgress).forEach(function (n, i) {
      n.parentNode.removeChild(n)
    })
  }
  s.removeAllActive = function () {
    s.clickCount = 0

    s.removeProgress(s.params.activeClass)
  }
  s.removeAllDisabled = function () {
    s.removeProgress(s.params.disableClass)
  }
  // 时间排序
  s.sortTimes = function () {
    var args = [].slice.call(arguments)
    var sortArr = args.sort(function (x, y) {
      if (x < y) return -1
      if (x === y) return 0
      if (x > y) return 1
    })
    return sortArr
  }
  // 根据段获得时间
  s.getTimesByParts = function (part1, part2) {
    var times = s.sortTimes(part1.startTime, part1.endTime, part2.startTime, part2.endTime)
    return {
      startTime: times[0],
      endTime: times[times.length - 1]
    }
  }
  /* -----------------------
  Events
  ----------------------- */
  s.events = function (detach) {
    var target = s.container
    var action = detach ? 'removeEventListener' : 'addEventListener'
    target[action]('click', s.onClickContainer, false)
  }
  // attach、dettach事件
  s.attach = function (event) {
    s.events()
  }
  s.detach = function (event) {
    s.events(true)
  }
  /* -----------------------
  Events Handler
  ----------------------- */
  s.onClickContainer = function (e) {
    if (e.target.classList.contains(s.params.partClass) || e.target.classList.contains(s.params.progressClass)) { // 点击part
      s.onClickPart(e)
    }
  }
  s.onClickPart = function (e) {
    s.target = e.target
    // Callback onClick
    if (s.params.onClick) s.params.onClick(s)

    // 点击禁用
    if (s.target.classList.contains(s.params.disableClass)) {
      // Callback onClickDisabled
      if (s.params.onClickDisabled) s.params.onClickDisabled(s)
      return
    }
    // 点击激活
    if (s.target.classList.contains(s.params.activeClass)) {
      // Callback onClickActive
      if (s.params.onClickActive) s.params.onClickActive(s)
      return
    }
    // 点击进度条
    if (s.target.classList.contains(s.params.progressClass)) {
      // Callback onClickChoose
      if (s.params.onClickChoose) s.params.onClickChoose(s)
      return
    }

    // 记录点击次数
    s.clickCount++

    // 点击合法区域
    // Callback onClick
    if (s.params.onClickValid) s.params.onClickValid(s)
  }
  /* -----------------------
  Init
  ----------------------- */
  s.init = function () {
    s.attach()
  }
  s.init()
}

;//export default Timepart


//ListPull 列表滑动菜单
(function(window,document,undefined){
	window.ListPull=function(container,params){
		/*================
		Model
		================*/
		var defaults={
			leftClass:"listpull-left",
			rightClass:"listpull-right",
			handlerClass:"listpull-handler",
			handlerActiveClass:"listpull-active",
			threshold:50,
			duration:150
			/*
            Callbacks:
            onClick:function(ListPull)

            onPull:function(ListPull)
            onPullEnd:function(ListPull)

            onHid:function(ListPull)
            onShowed:function(ListPull)

            onLeftHid:function(ListPull)
            onLeftShowed:function(ListPull)

			onRightHid:function(ListPull)
            onRightShowed:function(ListPull)
			*/
		}
		params=params||{};
		for(var def in defaults){
			if(params[def]===undefined){
				params[def]=defaults[def];
			}
		}
		var s=this;
		//Params
		s.params=params;
		//Container(Element)
		s.container=typeof container === "string"?document.querySelector(container):container;
		/*================
		Method
		================*/
		s.dragHorizontal=0;//设置左右方向(-1左 | 1右)
		s.hide=function(dragContainer,horizontalFlag){
			var dragContainer=dragContainer;
			if(!dragContainer){
				var dragContainer=s.container.querySelectorAll("."+s.params.handlerActiveClass)[0];
			}

			dragContainer.style.webkitTransitionDuration=s.params.duration+"ms";
			dragContainer.style.webkitTransform='translate3d(0px,0px,0px)';
			dragContainer.classList.remove(s.params.handlerActiveClass);

			if(isNaN(horizontalFlag)){
				s.dragHorizontal=s.moveX>0?-2:2
			}else{
				s.dragHorizontal=horizontalFlag;
			}
		}
		s.show=function(dragContainer,x,horizontalFlag){
			dragContainer.style.webkitTransitionDuration=s.params.duration+"ms";
			dragContainer.style.webkitTransform='translate3d(' +x+ 'px,0px,0px)';

			dragContainer.classList.add(s.params.handlerActiveClass);
			s.dragHorizontal=horizontalFlag;
		}
		/*================
		Controller
		================*/
		s.events=function(detach){
			var touchTarget=s.container;
			var action=detach?"removeEventListener":"addEventListener";
			touchTarget[action]("touchstart",s.onTouchStart,false);
			touchTarget[action]("touchmove",s.onTouchMove,false);
			touchTarget[action]("touchend",s.onTouchEnd,false);
			touchTarget[action]("touchcancel",s.onTouchEnd,false);

			touchTarget[action]("webkitTransitionEnd",s.onTransitionEnd,false);
		}
		s.attach=function(event){
            s.events();
        }
        s.detach=function(event){
            s.events(true);
        }
        /*=========================
          Touch Handler
          ===========================*/
        //Touch信息
        s.touches={
			direction:0,
			vertical:0,
			horizontal:0,
			startX:0,
			startY:0,
			currentX:0,
        	currentY:0,
			endX:0,
			endY:0,
			diffX:0,
			diffY:0
		};
        //索引
        s.activeIndex=0;
        function preventDefault(e){
			e.preventDefault();
		}
		
		s.onTouchStart=function(e){
			s.container.addEventListener("touchmove",preventDefault,false);
			s.touches.startX=e.touches[0].clientX;
			s.touches.startY=e.touches[0].clientY;
			//初始化拉动对象参数
			s.dragContainer=null,s.dragLeftMax=0,s.dragRightMax=-0,s.moveX=0;
			//Callback onClick
			s.target=e.target;
			if(s.params.onClick)s.params.onClick(s);
			//如果点击时有展开的列表项，则先收缩
			var handlerActives=s.container.querySelectorAll("."+s.params.handlerActiveClass);
			if(handlerActives.length>0){
				e.preventDefault();
				s.hide(handlerActives[0],s.moveX>0?-2:2);
				s.container.removeEventListener("touchmove",preventDefault,false);
				return;
			}
			//拉动对象
			if(e.target.classList.contains(s.params.handlerClass)){
				s.dragContainer=e.target;
				var left=s.dragContainer.parentNode.querySelector("."+s.params.leftClass);
				var right=s.dragContainer.parentNode.querySelector("."+s.params.rightClass);
				if(left)s.dragLeftMax=left.clientWidth;
				if(right)s.dragRightMax=-right.clientWidth;
			}else{
				s.container.removeEventListener("touchmove",preventDefault,false);
			}
		};
		s.onTouchMove=function(e){
			s.touches.currentX=e.touches[0].clientX;
			s.touches.currentY=e.touches[0].clientY;
			s.touches.diffX=s.touches.startX-s.touches.currentX;
			s.touches.diffY=s.touches.startY-s.touches.currentY;

			//设置滑动方向
			if(s.touches.direction === 0) {//设置滑动方向(-1上下 | 1左右)
				s.touches.direction = Math.abs(s.touches.diffX) > Math.abs(s.touches.diffY) ? 1 : -1;
			}
			if (s.touches.direction === -1) {//设置垂直方向(-1上 | 1下)
				s.touches.vertical = s.touches.diffY < 0 ? 1 : -1;
			}
			if (s.touches.direction === 1) {//设置左右方向(-1左 | 1右)
				s.touches.horizontal = s.touches.diffX < 0 ? 1 : -1;
			}
			
			//如果是上下滑动则不工作
			if(s.touches.vertical !=0 ){
				s.container.removeEventListener("touchmove",preventDefault,false);
				return;
			}

			//如果滑动了，则禁止事件向下传播
			e.stopPropagation();

			s.moveX=-s.touches.diffX;
			if(s.moveX<s.dragRightMax)s.moveX=s.dragRightMax;
			if(s.moveX>s.dragLeftMax)s.moveX=s.dragLeftMax;
			//Callback onPull
			if(s.params.onPull)s.params.onPull(s);

			//滑动
			if(s.dragContainer)s.dragContainer.style.webkitTransform='translate3d(' +s.moveX+ 'px,0px,0px)';
		};
		s.onTouchEnd=function(e){
			if(s.params.onPullEnd){
				s.params.onPullEnd(s);
				if(s.break===true){
					s.break=null;
					return;
				}
			}
			if(s.moveX>0){//左pull
				if(Math.abs(s.moveX)>s.params.threshold){
					s.show(s.dragContainer,s.dragLeftMax,-1);
				}else{
					s.hide(s.dragContainer,-2);
				}
			}else if(s.moveX<0){//右pull
				if(Math.abs(s.moveX)>s.params.threshold){
					s.show(s.dragContainer,s.dragRightMax,1);
				}else{
					s.hide(s.dragContainer,2);
				}
			}
			//清空滑动方向
			s.touches.direction=0;
			s.touches.vertical=0;
			s.touches.horizontal=0;
		};
		s.onTransitionEnd=function(e){
			if(!e.target.classList.contains(s.params.handlerClass) || e.propertyName=="visibility")return;
			//有效的显示状态
			if(s.dragHorizontal===-2 || s.dragHorizontal===2){
				//Callback onHid
                if(s.params.onHid)s.params.onHid(s);
			}
			if(s.dragHorizontal===-1 || s.dragHorizontal===1){
				//Callback onShowed
                if(s.params.onShowed)s.params.onShowed(s);
			}

			if(s.dragHorizontal===-1){//左显示
                //Callback onLeftShowed
                if(s.params.onLeftShowed)s.params.onLeftShowed(s);
            }else if(s.dragHorizontal===-2){//左隐藏
                //Callback onLeftHid
                if(s.params.onLeftHid)s.params.onLeftHid(s);
            }else if(s.dragHorizontal===1){//右显示
                //Callback onRightShowed
                if(s.params.onRightShowed)s.params.onRightShowed(s);
            }else if(s.dragHorizontal===2){//右隐藏
                //Callback onRightHid
                if(s.params.onRightHid)s.params.onRightHid(s);
            }
		};
        //Init
        s.init=function(){
        	s.attach();
        }
        s.init();
	}
})(window,document,undefined);

//Weather 天气控件 @require Ajax
(function(window,document,undefined){
	window.Weather=function(container,params){
		//Model
	    var defaults={
	    	city:"南京",
	    	expires:null
	    };
	    params=params||{};
	    for(var def in defaults){
	    	if(params[def]==undefined){
	    		params[def]=defaults[def];
	    	}
	    };
	    var s=this;
	    s.params=params;

		//URL
	    s.weatherURL='http://api.map.baidu.com/telematics/v3/weather?location='+s.params.city+'&output=json&ak=W79uNeeyw7QXp6FGUzR6r8lY';
	    //s.weatherURL='http://api.map.baidu.com/telematics/v3/weather?location=南京';
	    //Ajax
	    s.ajax;
		//Icon
		s.icon={
			"qing" : "icon-weaqing",
			"duoyun" : "icon-weaduoyun",
			"zhenyu" : "icon-weazhenyu",
			"leizhenyu" : "icon-wealeizhenyu",
			"leizhenyubanyoubingbao" : "icon-wealeizhenyubanyoubingbao",
			"yujiaxue" : "icon-weayujiaxue",
			"xiaoyu" : "icon-weaxiaoyu",
			"zhongyu" : "icon-weazhongyu",
			"dayu" : "icon-weadayu",
			"baoyu" : "icon-weabaoyu",
			"dabaoyu" : "icon-weadabaoyu",
			"tedabaoyu" : "icon-weatedabaoyu",
			"zhenxue" : "icon-weazhenxue",
			"xiaoxue" : "icon-weaxiaoxue",
			"zhongxue" : "icon-weazhongxue",
			"daxue" : "icon-weadaxue",
			"baoxue" : "icon-weabaoxue",
			"wu" : "icon-weawu",
			"dongyu" : "icon-weadongyu",
			"shachenbao" : "icon-weashachenbao",
			"xiaoyuzhuanzhongyu" : "icon-weaxiaoyuzhuanzhongyu",
			"zhongyuzhuandayu" : "icon-weazhongyuzhuandayu",
			"dayuzhuanbaoyu" : "icon-weadayuzhuanbaoyu",
			"baoyuzhuandabaoyu" : "icon-weabaoyuzhuandabaoyu",
			"dabaoyuzhuantedabaoyu" : "icon-weadabaoyuzhuantedabaoyu",
			"xiaoxuezhuanzhongxue" : "icon-weaxiaoxuezhuanzhongxue",
			"zhongxuezhuandaxue" : "icon-weazhongxuezhuandaxue",
			"daxuezhuanbaoxue" : "icon-weadaxuezhuanbaoxue",
			"fuchen" : "icon-weafuchen",
			"yangsha" : "icon-weayangsha",
			"qiangshachenbao" : "icon-weaqiangshachenbao",
			"mai" : "icon-weamai",
			"yin" : "icon-weayin"
		};
		//Container
	    s.container=typeof container=="string"?document.querySelector(container):container;
	    if(!s.container){
            console.log("SeedsUI Error：未找到Weather的DOM对象，请检查传入参数是否正确");
            return;
        }
	    //Expires保存时效
		if(s.params.expires instanceof Date == false){
			console.log("expires参数:请传入Date对象");
			return;
		}
	    //Citys
	    s.citysEl=[].slice.call(s.container.querySelectorAll(".weather-current-city"));
	    //Date
	    s.dateEl=s.container.querySelector("#weather-current-date");
	    //Temprature当前温度
	    s.tempratureEl=s.container.querySelector("#weather-current-temperature");
	    //NowTemprature今天温度
	    s.todayTempratureEl=s.container.querySelector("#weather-today-temperature");
	    //Pm2.5
	    s.pm25sEl=[].slice.call(s.container.querySelectorAll(".weather-current-pm25"));
	    //Quality
	    s.qualitysEl=[].slice.call(s.container.querySelectorAll(".weather-air-quality"));
	    //NowIcon当前天气图标
	    s.iconEl=s.container.querySelector("#weather-current-icon");
	    //NowName当前天气名称
	    s.weathersEl=[].slice.call(s.container.querySelectorAll(".weather-name"));
	    //Wind当前天气风级
	    s.windEl=s.container.querySelector("#weather-current-wind");
	    //OtherDays其它天气
	    s.otherDaysEl=s.container.querySelectorAll(".weather-otherday li");
	    //数据
	    s.todayData={
	    	/*"iconClass":"",
	    	"city":"",
	    	"date":"",
	    	"week":"",
	    	"weather":"",
	    	"temprature":"",
	    	"nowTemprature":"",
	    	"quality":"",
	    	"wind":""*/
	    }
	    s.otherDaysData=[
	    	/*{"iconClass":"","temprature":"","week":""},
	    	{"iconClass":"","temprature":"","week":""},
	    	{"iconClass":"","temprature":"","week":""},
	    	{"iconClass":"","temprature":"","week":""}*/
	    ]
		/*===========================
	    Method
	    ===========================*/
	    s.parseIcon=function(weatherImg){
	    	var weatherImgName = weatherImg.substring(weatherImg.lastIndexOf('/')+1, weatherImg.lastIndexOf('.'));
			return this.icon[weatherImgName];
	    }
	    s.getAirLvl=function(pm25){
	    	var airquality="";
			if(pm25<=50){
				airquality="优";
			}else if(pm25>50 && pm25<=100){
				airquality="良";
			}else if(pm25>100 && pm25<=150){
				airquality="轻度污染";
			}else if(pm25>150 && pm25<=200){
				airquality="中度污染";
			}else if(pm25>200 && pm25<=300){
				airquality="重度污染";
			}else{
				airquality="严重污染";
			}
			return airquality;
	    }
		s.initData=function(){
			var cache=JSON.parse(window.localStorage.getItem("weatherJson"));
			var cacheExpires=new Date(window.localStorage.getItem("weatherJson_expires"));
			if(!cache || cache.status != "success" || cacheExpires < new Date()){
				console.log("不读缓存");
				s.loadData();
				return;
			}
			s.render(cache);
		};
		s.loadData=function(){
			$.ajax({
				type:"post",
				dataType:"jsonp",
				url:s.weatherURL,
				success:s.onSuccess,
				error:s.onError
			})
		};
		//适配数据
	    s.adapterData=function(data){
	    	var temperatureExpr=/(-)?\d*℃/;
			var weekExpr=/(周|星期|礼拜)[1-7一二三四五六七天日]/;
			var todayData=data.results[0].weather_data[0].date;

			var iconClass=s.parseIcon(data.results[0].weather_data[0].dayPictureUrl);
			var city=data.results[0].currentCity;
			var date=data.date;
			var week=weekExpr.exec(todayData)[0];
			var weather=data.results[0].weather_data[0].weather;
			var temprature=temperatureExpr.exec(todayData)[0];
			var nowTemprature=temperatureExpr.exec(todayData)[0];
			var pm25=data.results[0].pm25;
			var quality=s.getAirLvl(pm25);
			var wind=data.results[0].weather_data[0].wind;

	    	s.todayData={
		    	"iconClass":iconClass,
		    	"city":city,
		    	"date":date,
		    	"week":week,
		    	"weather":weather,
		    	"temprature":temprature,
		    	"nowTemprature":nowTemprature,
		    	"pm25":pm25,
		    	"quality":quality,
		    	"wind":wind
		    }
		    
		    for(var i=0;i<4;i++){
		    	var otherIconClass=s.parseIcon(data.results[0].weather_data[i].dayPictureUrl);
		    	var otherTemprature=data.results[0].weather_data[i].temperature;
		    	var otherWeek=data.results[0].weather_data[i].date;
		    	if(i==0)otherWeek=week;
		    	s.otherDaysData[i]={
		    		"iconClass":otherIconClass,
		    		"temprature":otherTemprature,
		    		"week":otherWeek
		    	}
		    	//白天与夜间判断
				/*if (6 < date.hour() < 18) {
					s.otherDaysEl[i].querySelector("i").setAttribute("class",s.parseIcon(json.results[0].weather_data[i].dayPictureUrl));
				}else{
					s.otherDaysEl[i].querySelector("i").setAttribute("class",s.parseIcon(json.results[0].weather_data[i].dayPictureUrl));
				}*/
			}
	    }
	    s.render=function(data){
	    	s.adapterData(data);
	    	//获得当前城市
			s.citysEl.forEach(function(n,i,a){
				n.innerHTML=s.todayData.city;
			})
			//获得当前日期
			s.dateEl.innerHTML=s.todayData.date;
			//获得今天周
			s.todayWeek=s.todayData.week;
			//获得当前温度
			s.tempratureEl.innerHTML=s.todayData.nowTemprature;
			//获得当天温度
			s.todayTempratureEl.innerHTML=s.todayData.temprature;
			//获得当前空气pm2.5
			s.pm25sEl.forEach(function(n,i,a){
				n.innerHTML=s.todayData.pm25;
			})
			//获得当前空气质量
			s.qualitysEl.forEach(function(n,i,a){
				n.innerHTML=s.todayData.quality;
			})
			//获得当前天气图标
			s.iconEl.setAttribute("class",s.todayData.iconClass);
			//获得当天天气名称
			s.weathersEl.forEach(function(n,i,a){
				n.innerHTML=s.todayData.weather;
			})
			//获得当天风向与级数
			s.windEl.innerHTML=s.todayData.wind;
			//剩余4天
			for(var i=0;i<4;i++){
				s.otherDaysEl[i].querySelector("i").setAttribute("class",s.otherDaysData[i].iconClass);
				s.otherDaysEl[i].querySelector("p").innerHTML=s.otherDaysData[i].temprature;
				s.otherDaysEl[i].querySelector("small").innerHTML=s.otherDaysData[i].week;
			}
	    }

		//Controller
		s.onSuccess=function(data){
			console.log("读取天气");
			if (!data) {
				alert("你填写的现居地有误 ");
				return;
			}
			console.log("正在读取服务器天气..");
			
			console.log("正在定义缓存时效，时效截止于"+s.params.expires);

			window.localStorage.setItem("weatherJson",JSON.stringify(data));
			window.localStorage.setItem("weatherJson_expires",s.params.expires);
			s.render(data);
		},
		s.onError=function(msg){
			console.log("天气获取失败,请刷新后重试："+msg);
		}
		s.initData();
	};
})(window,document,undefined);

// Gauge 仪表盘
var Gauge = function (container, params) {
  /* ----------------------
    Model
    ---------------------- */
  var defaults = {
    minValue: 0,
    maxValue: 360,
    currentValue: 0,

    maxPointRotate: 270,

    // dom
    pointClass: '.gauge-pointer',
    waveClass: '.gauge-wave',
    valueClass: '.gauge-text',

    // animate
    delay: 0,
    durationall: 2000

    /* callbacks
    onChangeStart:function(Gauge)
    onChangeEnd:function(Gauge)
    onOut:function(Gauge)
    */
  }
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  s.params = params
  s.container = typeof container === 'string' ? document.querySelector(container) : container
  if (!s.container) {
    console.log('SeedsUI Error：未找到Gauge的DOM对象，请检查传入参数是否正确')
    return
  }
  s.point = s.container.querySelector(s.params.pointClass)// 指针
  s.wave = s.container.querySelector(s.params.waveClass) || null// 波浪
  s.value = s.container.querySelector(s.params.valueClass)// 指针值

  s.percent = (s.params.currentValue - s.params.minValue) / (s.params.maxValue - s.params.minValue)// 当前值所占比例

  s.duration = Math.round(s.percent * s.params.durationall)// 执行时间长度
  if (s.duration > s.params.durationall) {
    s.duration = s.params.durationall
  }
  s.bgLvl = Math.round(s.percent * 10) + 1// 背景等级
  if (s.bgLvl < 1) s.bgLvl = 1
  if (s.bgLvl > 10) s.bgLvl = 10

  s.waveTop // 波浪高度

  /* ----------------------
    Method
    ---------------------- */
  // 旋转指针
  s.updatePoint = function () {
    // 指针旋转角度
    s.pointRotate = s.params.maxPointRotate * s.percent

    // CallBack onOut
    if (s.pointRotate > s.params.maxPointRotate) {
      s.pointRotate = s.params.maxPointRotate

      if (s.params.onOut) s.params.onOut(s)
    }

    // CallBack onChangeStart
    if (s.params.onChangeStart) s.params.onChangeStart(s)
    // 旋转时长
    s.point.style.webkitTransitionDuration = s.duration + 'ms'
  }
  // 设置数字
  s.updateValue = function () {
    s.value.innerHTML = s.params.currentValue
  }
  // 更改背景色
  s.updateBg = function () {
    s.container.style.webkitAnimationDuration = s.duration + 'ms'
  }
  // 设置波浪
  s.updateWave = function () {
    if (!s.wave) return
    s.waveTop = 100 - Math.round(s.percent.toFixed(1) * 100)
    if (s.waveTop < 0) {
      s.waveTop = 0
    }
    s.wave.style.webkitTransitionDuration = s.duration + 'ms'
  }
  s.updateDelay = function () {
    s.container.style.webkitAnimationDelay = s.params.delay + 'ms'
    s.point.style.webkitTransitionDelay = s.params.delay + 'ms'
    if (s.wave) s.wave.style.webkitTransitionDelay = s.params.delay + 'ms'
  }
  s.update = function () {
    s.updateBg()
    s.updatePoint()
    s.updateValue()
    s.updateWave()
    s.updateDelay()
  }
  s.update()
  s.play = function () {
    // 播放指针
    s.point.style.webkitTransform = 'rotate(' + s.pointRotate + 'deg)'
    // 播放背景
    var bgExpr = /bg[1-9]0?$/g
    if (bgExpr.test(s.container.className)) {
      s.container.className = s.container.className.replace(bgExpr, 'bg' + s.bgLvl)
    } else {
      s.container.className += ' bg' + s.bgLvl
    }
    // 播放波浪
    if (s.wave) s.wave.style.top = s.waveTop + '%'
  }
  /* ----------------------
    Events
    ---------------------- */
  s.events = function (detach) {
    var action = detach ? 'removeEventListener' : 'addEventListener'
    s.point[action]('webkitTransitionEnd', s.onTransitionEnd, false)
  }
  // attach、detach事件
  s.attach = function () {
    s.events()
  }
  s.detach = function () {
    s.events(true)
  }
  s.onTransitionEnd = function (e) {
    // CallBack onChangeEnd
    if (s.params.onChangeEnd) s.params.onChangeEnd(s)
  }
  // Init
  s.init = function () {
    s.attach()
  }
  s.init()
}

;//export default Gauge


// ImgLazy 图片预加载
var ImgLazy = function (params) {
  /* --------------------
  Model
  -------------------- */
  var defaults = {
    overflowContainer: document.body,
    isScrollLoad: true, // 滚动加载
    threshold: 300, // 滚动加载时，显示区域扩张上下像素
    imgLoadAttr: 'data-load-src', // 图片地址
    imgErrowAttr: 'data-error-src'// 错误图片地址
    /*
    callbacks
    onScroll:function(e)
    */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  s.params = params
  // Container
  s.overflowContainer = typeof s.params.overflowContainer === 'string' ? document.querySelector(s.params.overflowContainer) : s.params.overflowContainer
  if (!s.overflowContainer) {
    console.log('SeedsUI Error : Dragrefresh overflowContainer不存在，请检查页面中是否有此元素')
    return
  }
  // 所有图片
  s.imgs = []
  // 对应缓存图片
  s.cacheImgs = []

  // 屏幕高度
  s.windowHeight = window.innerHeight
  s.scrollTop = null
  /* --------------------
  Method
  -------------------- */
  // 获得所有懒人图片
  s.updateImgs = function () {
    s.imgs = s.overflowContainer.querySelectorAll('[' + s.params.imgLoadAttr + ']')
    for (var i = 0; i < s.imgs.length; i++) {
      s.cacheImgs[i] = new Image()
      s.cacheImgs[i].index = i
      s.cacheImgs[i].errorSrc = s.imgs[i].getAttribute(s.params.imgErrowAttr)
      // 如果没有选择滚动加载，则一次性加载
      if (!s.params.isScrollLoad) {
        var src = s.imgs[i].getAttribute(s.params.imgLoadAttr)
        s.cacheImgs[i].src = src
      }
    }
  }
  s.updateImgs()
  s.update = function () {
    // 重新获取图片
    s.updateImgs()
    // 重新绑定图片事件
    s.imgsDetach()
    s.imgsAttach()
    // 加载屏幕中的图片
    for (var i = 0; i < s.imgs.length; i++) {
      var flag = s.isInScreen(s.imgs[i])
      if (flag && s.cacheImgs[i].src === '') {
        // console.log('加载第'+i+'张：'+flag)
        var src = s.imgs[i].getAttribute(s.params.imgLoadAttr)
        s.cacheImgs[i].src = src
      }
    }
  }
  // 获得头部位置
  s.getOffsetTop = function (el) {
    var offsetTop = el.offsetTop
    if (el.offsetParent != null) offsetTop += s.getOffsetTop(el.offsetParent)

    return offsetTop
  }
  // 元素是否在显示区域内
  s.isInScreen = function (el) {
    var offsetTop = s.getOffsetTop(el)
    if (offsetTop > s.scrollTop - s.params.threshold && offsetTop < parseInt(s.scrollTop, 10) + parseInt(s.windowHeight, 10)) {
      return true
    }
    return false
  }
  /* --------------------
  Events
  -------------------- */
  s.events = function (detach) {
    var action = detach ? 'removeEventListener' : 'addEventListener'
    if (s.params.isScrollLoad) {
      var scrollTarget = s.overflowContainer === document.body ? window : s.overflowContainer
      scrollTarget[action]('scroll', s.onScroll, false)
    }
  }
  s.attach = function () {
    s.events()
    // 初始化时执行一次，让首屏可加载
    s.onScroll()
  }
  s.detach = function () {
    s.events(false)
  }
  s.imgsEvents = function (detach) {
    var action = detach ? 'removeEventListener' : 'addEventListener'
    // 缓存图片绑定onLoad事件|和绑定onError事件
    for (var i = 0; i < s.cacheImgs.length; i++) {
      s.cacheImgs[i][action]('load', s.onLoad, false)
      s.cacheImgs[i][action]('error', s.onError, false)
    }
  }
  s.imgsAttach = function () {
    s.imgsEvents()
  }
  s.imgsDetach = function () {
    s.imgsEvents(false)
  }
  // Events Handler
  s.onLoad = function (e) {
    var target = e.target
    var imgTarget = s.imgs[target.index]
    if (imgTarget.tagName === 'IMG') {
      imgTarget.src = target.src
    } else {
      imgTarget.style.backgroundImage = 'url(' + target.src + ')'
    }

    // console.log('加载图片'+target.index)
  }
  s.onError = function (e) {
    var target = e.target
    if (!target.errorSrc) return

    var imgTarget = s.imgs[target.index]
    if (imgTarget.tagName === 'IMG') {
      imgTarget.src = target.errorSrc
    } else {
      imgTarget.style.backgroundImage = 'url(' + target.errorSrc + ')'
    }
    // console.log('错误图片'+target.index)
  }
  var timer
  var millisec = 300
  s.getScrollTop = function () {
    return s.overflowContainer === document.body ? document.documentElement.scrollTop : s.overflowContainer.scrollTop
  }
  s.onScroll = function (e) {
    if (s.params.onScroll) s.params.onScroll(e)
    // 计算scrollEnd事件
    s.scrollTop = s.getScrollTop()
    if (timer) {
      clearTimeout(timer)
    }
    timer = setTimeout(function () {
      if (s.scrollTop === s.getScrollTop()) {
        s.onScrollEnd()
        clearTimeout(timer)
        return
      }
      timer = null
    }, millisec)
  }
  s.onScrollEnd = function () {
    console.log('停止滚动')
    s.update()
  }
  /* --------------------
  Init
  -------------------- */
  s.init = function () {
    // 绑定滚动条事件
    s.attach()
    // 绑定图片事件
    s.imgsAttach()
  }
  s.init()
}

;//export default ImgLazy


var HandSign = function (container, params) {
  /* ----------------------
  Model
  ---------------------- */
  var defaults = {
    color: '#000',
    lineWidth: '1',

    defaultImgSrc: '',
    defaultImgPosition: 'bottom right', // left center right top middle bottom
    defaultImgWidth: null,
    defaultImgHeight: null,

    defaultFontSize: '15px',
    defaultFontFamily: 'microsoft yahei',
    defaultFontStyle: 'rgba(0, 0, 0, 1)',
    defaultFontText: '',
    defaultFontPosition: 'bottom center',

    suffix: 'image/png',
    quality: 0.92
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  s.params = params
  s.container = typeof container === 'string' ? document.querySelector(container) : container
  if (!s.container) {
    console.log('SeedsUI Error : HandSign container不存在，请检查页面中是否有此元素')
    return
  }
  s.width = s.container.width
  s.height = s.container.height
  s.ctx = s.container.getContext('2d')
  s.stage_info = s.container.getBoundingClientRect()
  s.path = {
    beginX: 0,
    beginY: 0,
    endX: 0,
    endY: 0
  }
  s.isDrew = false
  /* ----------------------
  Events
  ---------------------- */
  s.preventDefault = function (e) {
    e.preventDefault()
  }
  s.events = function (detach) {
    var action = detach ? 'removeEventListener' : 'addEventListener'
    s.container[action]('touchstart', s.onTouchStart, false)
    s.container[action]('touchend', s.onTouchEnd, false)
    s.container[action]('touchcancel', s.onTouchEnd, false)
  }
  // attach、detach事件
  s.attach = function () {
    s.events()
  }
  s.detach = function () {
    s.events(true)
  }
  s.onTouchStart = function (e) {
    document.addEventListener('touchstart', s.preventDefault, false)
    s.drawBegin(e)
  }
  s.onTouchEnd = function (e) {
    document.addEventListener('touchend', s.preventDefault, false)
    s.drawEnd()
  }
  /* ----------------------
  Method
  ---------------------- */
  // 签名
  s.drawBegin = function (e) {
    window.getSelection() ? window.getSelection().removeAllRanges() : document.selection.empty()
    s.ctx.strokeStyle = s.params.color
    s.ctx.lineWidth = s.params.lineWidth
    s.ctx.beginPath()
    s.ctx.moveTo(
      e.changedTouches[0].clientX - s.stage_info.left,
      e.changedTouches[0].clientY - s.stage_info.top
    )
    s.path.beginX = e.changedTouches[0].clientX - s.stage_info.left
    s.path.beginY = e.changedTouches[0].clientY - s.stage_info.top
    s.container.addEventListener('touchmove', function () {
      s.drawIng(event)
    })
  }
  s.drawIng = function (e) {
    s.ctx.lineTo(
      e.changedTouches[0].clientX - s.stage_info.left,
      e.changedTouches[0].clientY - s.stage_info.top
    )
    s.path.endX = e.changedTouches[0].clientX - s.stage_info.left
    s.path.endY = e.changedTouches[0].clientY - s.stage_info.top
    s.ctx.stroke()
  }
  s.drawEnd = function () {
    s.isDrew = true
    document.removeEventListener('touchstart', s.preventDefault, false)
    document.removeEventListener('touchend', s.preventDefault, false)
    document.removeEventListener('touchmove', s.preventDefault, false)
    // canvas.ontouchmove = canvas.ontouchend = null
  }
  s.clear = function () {
    s.isDrew = false
    s.ctx.clearRect(0, 0, s.width, s.height)
  }
  s.save = function () {
    return s.container.toDataURL(s.params.suffix, s.params.quality)
  }
  s.calcPosition = function (w, h, pos) {
    var posArr = pos.split(' ').map(function (item, index){
      var x = 0
      var y = 0
      // 如果是数字
      if (!isNaN(item)) {
        if (index === 0) return {x: item}
        if (index === 1) return {y: item}
      }
      // 如果是字符串
      if (item === 'top') return {y: 0}
      if (item === 'left') return {x: 0}
      if (item === 'right') {
        x = s.width < w ? 0 : s.width - w
        return {x: x}
      }
      if (item === 'bottom') {
        y = s.height < h ? 0 : s.height - h
        return {y: y}
      }
      if (item === 'center') {
        x = (s.width - w) / 2
        return {x: x}
      }
      if (item === 'middle') {
        y = (s.height - h) / 2
        return {y: y}
      }
    })
    var posJson = {
      x: 0,
      y: 0
    }
    posArr.forEach(function (item) {
      if (item.x) {
        posJson.x = item.x
      } else if (item.y) {
        posJson.y = item.y
      }
    })
    return {
      x: posJson.x || 0,
      y: posJson.y || 0
    }
  }
  // 图片
  s.drawImg = function (imgSrc, opts) {
    if (!imgSrc) {
      console.log('SeedsUI Error:手写签名drawImg缺少imgSrc')
      return
    }
    var imgW = opts.width || s.params.defaultImgWidth
    var imgH = opts.height || s.params.defaultImgHeight
    var imgP = opts.position || s.params.defaultImgPosition

    var img = new Image()
    img.crossOrigin = 'Anonymous'
    img.src = imgSrc
    img.onload = function () {
      var sx = 0 // 剪切的 x 坐标
      var sy = 0 // 剪切的 y 坐标
      var width = imgW || img.width // 使用的图像宽度
      var height = imgH || img.height // 使用的图像高度
      var swidth = img.width // 剪切图像的宽度
      var sheight = img.height // 剪切图像的高度
      var pos = s.calcPosition(width, height, imgP) // 画布上放置xy坐标
      s.ctx.drawImage(img, sx, sy, swidth, sheight, pos.x, pos.y, width, height)
      // 成功回调
      if (opts.onSuccess) opts.onSuccess()
    }
  }
  // 文字
  s.drawFont = function (text, opts) {
    if (!text) {
      console.log('SeedsUI Error:手写签名drawFont缺少文字')
      return
    }
    var fontSize = opts.fontSize || s.params.defaultFontSize
    var fontFamily = opts.fontFamily || s.params.defaultFontFamily
    var fontPosition = opts.position || s.params.defaultFontPosition
    var fontStyle = opts.color || s.params.defaultFontStyle

    var match = fontSize.match(/(0|([1-9][0-9]*))(\.[0-9]+)?/)
    var height = match[0]
    var width = text.length * height
    var pos = s.calcPosition(width, height, fontPosition) // 画布上放置xy坐标
    var calcY = pos.y === 0 ? Number(pos.y) + Number(height) : Number(pos.y) + Number(height) -5 // 文字垂直位置有整个高度的偏差
    // 写字
    s.ctx.font = fontSize + ' ' + fontFamily
    s.ctx.fillStyle = fontStyle
    s.ctx.fillText(text, pos.x, calcY)
  }
  // 主函数
  s.init = function () {
    s.attach()
  }

  s.init()
}

;//export default HandSign


var Watermark = function (params) {
  /* ----------------------
  Model
  ---------------------- */
  var defaults = {
    src: '',
    suffix: 'image/png',
    font: '20px microsoft yahei',
    color: 'rgba(255, 255, 255, 0.5)',
    text: '水印'
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  s.params = params

  if (!s.params.src) {
    console.log('SeedsUI Error : Watermark 没有src，无法绘制水印')
    return
  }
  /* ----------------------
  Method
  ---------------------- */
  s.convertImgToBase64 = function(callback) {
    var canvas = document.createElement('CANVAS');
    var ctx = canvas.getContext('2d');
    var img = new Image;
    img.src = s.params.src;
    img.crossOrigin = 'Anonymous';
    img.onload = function () {
      // 绘制图片
      canvas.height = img.height;
      canvas.width = img.width;
      ctx.drawImage(img, 0, 0);

      // 绘制文字
      if(s.params.font){
        ctx.font=s.params.font
        ctx.fillStyle = s.params.color
        ctx.fillText(s.params.text, 100, 100)
      }

      var dataURL = canvas.toDataURL(s.params.suffix);
      // callback.call(this, dataURL);
      // Clean up 
      canvas = null;

      return dataURL
    }
  }
  s.save = function(){
    return s.convertImgToBase64();
  }
}

;//export default Draw
// 参考
/*function convertImgToBase64(url, callback, outputFormat) {
  var canvas = document.createElement('CANVAS');
  var ctx = canvas.getContext('2d');
  var img = new Image;
  img.crossOrigin = 'Anonymous';
  img.onload = function () {
    canvas.height = img.height;
    canvas.width = img.width;
    ctx.drawImage(img, 0, 0);
    var dataURL = canvas.toDataURL(outputFormat || 'image/png');
    callback.call(this, dataURL);
    // Clean up 
    canvas = null;
  };
  img.src = url;
}
convertImgToBase64('http://upload.wikimedia.org/wikipedia/commons/4/4a/Logo_2013_Google.png', function(base64Img){
  console.log(base64Img);
});*/


// Marquee 滚动框
var Marquee = function (container, params) {
  /* --------------------
  Model
  -------------------- */
  var defaults = {
    start: 0,
    end: 300,
    step: 50,
    duration: 300,
    delay: 2000,
    direction: 'top', // top | bottom | left | right
    loop: false,
    duplicateClass: 'duplicate'
    /*
    Callbacks:
    onSlideChange:function(Marquee)
    onSlideChangeEnd:function(Marquee)
    */
  }
  params = params || {}
  for (var def in defaults) {
    if (params[def] === undefined) {
      params[def] = defaults[def]
    }
  }
  var s = this
  s.params = params
  // Container
  s.container = typeof container === 'string' ? document.querySelector(container) : container
  // 定时器
  s.interval =  null
  // 循环
  if (s.params.loop) {
    var beforeDupContainer = s.container.cloneNode(true)
    var afterDupContainer = s.container.cloneNode(true)
    s.container.insertBefore(beforeDupContainer, s.container.firstElementChild)
    s.container.appendChild(afterDupContainer)
  }
  
  /* --------------------
  Method
  -------------------- */
  // 设置动画时长
  s.setDuration = function (duration) {
    s.container.style.webkitTransitionDuration = duration + 'ms'
  }
  // 设置移动位置
  s.setPosition = function (pos) {
    switch (s.params.direction) {
      case 'top':
        s.container.style.webkitTransform = 'translate(0px, ' + pos + 'px)'
        break;
      default:
        s.container.style.webkitTransform = 'translate(0px, ' + pos + 'px)'
    }
  }
  // 初始化位置变量
  s.start = 0
  s.end = 0
  s.move = 0
  s.update = function() {
    s.start = s.params.start
    s.end = s.params.end
    var range = s.params.end - s.params.start
    if (s.params.loop) {
      s.start = s.params.end + s.params.step
      s.end = s.start + range
    }
    s.setDuration(0)
    // 设置起始位置
    s.setPosition(-s.start)
    // 设置动画时长
    setTimeout(function () {
      s.setDuration(s.params.duration)
    }, 10)
    // 设置起始位置
    s.move = s.start
  }
  s.update()
  // 播放
  s.play = function () {
    if (s.interval) window.clearInterval(s.interval)
    s.interval = window.setInterval(function() {
      s.move += s.params.step
      if (s.params.loop) {
        if (s.move >= s.end + s.params.step) {
          // 回到复制相同处
          var initPos = s.start - s.params.step
          s.setDuration(0)
          s.setPosition(-initPos)
          // 再移动一格
          s.move = initPos + s.params.step
          setTimeout(() => {
            s.setDuration(s.params.duration)
            s.setPosition(-s.move)
          }, 10)
        } else {
          s.setPosition(-s.move)
        }
      } else {
        s.setPosition(-s.move)
        if (s.move >= s.end) {
          window.clearInterval(s.interval)
        }
      }
    }, s.params.delay);
  }
  s.pause = function () {
    window.clearInterval(s.interval)
  }
}

;//export default Marquee


// @koala-prepend "utils/dateutil.js"
// @koala-prepend "utils/db.js"
// @koala-prepend "utils/math.js"
// @koala-prepend "utils/request.js"
// @koala-prepend "utils/object.js"
// @koala-prepend "utils/string.js"
// @koala-prepend "utils/ajax.js"
// @koala-prepend "utils/edit.js"
// @koala-prepend "utils/pubsub.js"
// @koala-prepend "utils/eventutil.js"
// @koala-prepend "utils/element.js"
// @koala-prepend "utils/device.js"
// @koala-prepend "utils/form.js"
// @koala-prepend "utils/history.js"
// @koala-prepend "utils/media.js"
// @koala-prepend "utils/pinyin.js"
// @koala-prepend "utils/validator.js"
// @koala-prepend "utils/validator.id.js"
// @koala-prepend "utils/animate.js"
// @koala-prepend "utils/baidumap.js"
// @koala-prepend "utils/formcontrols.js"
// @koala-prepend "utils/countvalue.js"
// @koala-prepend "utils/array.js"

// @koala-prepend "Counter/counter.js"
// @koala-prepend "Clock/clock.js"
// @koala-prepend "Aside/aside.js"
// @koala-prepend "Dragrefresh/dragrefresh.js"
// @koala-prepend "Dragrefresh/dragrefresh.pull.js"
// @koala-prepend "Dragrefresh/dragrefresh.circle.js"
// @koala-prepend "RichInput/emoji.js"
// @koala-prepend "RichInput/richinput.js"
// @koala-prepend "Carrousel/carrousel.js"
// @koala-prepend "Calendar/calendarutil.js"
// @koala-prepend "Calendar/calendar.js"
// @koala-prepend "Alert/alert.js"
// @koala-prepend "Actionsheet/actionsheet.js"
// @koala-prepend "Toast/toast.js"
// @koala-prepend "Dialog/dialog.js"
// @koala-prepend "Picker/picker.js"
// @koala-prepend "Picker/picker.date.js"
// @koala-prepend "Picker/picker.city.data.js"
// @koala-prepend "Picker/picker.city.js"
// @koala-prepend "Tree/tree.js"
// @koala-prepend "Indexbar/indexbar.js"
// @koala-prepend "Loading/loading.js"
// @koala-prepend "Timepart/timepart.js"
// @koala-prepend "Listpull/listpull.js"
// @koala-prepend "Weather/weather.js"
// @koala-prepend "Gauge/gauge.js"
// @koala-prepend "Imglazy/imglazy.js"
// @koala-prepend "HandSign/handsign.js"
// @koala-prepend "Watermark/watermark.js"
// @koala-prepend "marquee/marquee.js"